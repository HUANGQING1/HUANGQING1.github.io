<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>晴语的博客</title>
  
  <subtitle>2</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-11-23T08:10:49.797Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>晴语</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>windows</title>
    <link href="http://example.com/blog/53166.html"/>
    <id>http://example.com/blog/53166.html</id>
    <published>2023-11-22T19:14:43.000Z</published>
    <updated>2023-11-23T08:10:49.797Z</updated>
    
    <content type="html"><![CDATA[<h1 id="快捷命令">快捷命令</h1><p>打开剪贴板：Win+V # 简单脚本编写</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;快捷命令&quot;&gt;快捷命令&lt;/h1&gt;
&lt;p&gt;打开剪贴板：Win+V # 简单脚本编写&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Windows_Linux" scheme="http://example.com/categories/Windows-Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>零散的嵌入式知识</title>
    <link href="http://example.com/blog/22.html"/>
    <id>http://example.com/blog/22.html</id>
    <published>2023-11-21T15:45:00.245Z</published>
    <updated>2023-11-22T23:34:46.535Z</updated>
    
    <content type="html"><![CDATA[<h5 id="nop_延时多久">_nop_（）延时多久</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">_nop_()延时一个机器周期</span><br><span class="line">如果学过计算机组成原理应该知道：</span><br><span class="line">CPU的最小时间单位是一个脉冲耗时，即一个时钟周期(主频倒数)。</span><br><span class="line">一个指令周期是CPU从主存中取出并执行一条指令所需要的全部时间。</span><br><span class="line">而CPU从主存中取出并执行一条指令是可以分为取指令，取有效地址，执行指令等最小操作的</span><br><span class="line">机器周期就是计算机执行这样的一个操作所需要的最短时间。机器周期有定长和不定长的设计方式。</span><br><span class="line">在单片机中机器周期应该是定长的吧，51系列标准的架构下，一个机器周期有12和时钟周期。</span><br></pre></td></tr></table></figure><h5 id="引脚对应问题">引脚对应问题</h5><ul><li><p>如何将原理图的芯片引脚与数据手册的芯片引脚与实际芯片的芯片引脚如何对应？</p><ul><li><p>原理图的引脚数组标号和数据手册的引脚标号一致</p></li><li><p>实际芯片引脚和数据手册引脚对应：</p><p>以STM32芯片为例，STM32较小的小圆点出发，逆时针排列便是1-n号引脚。<imgsrc="assets/零散的嵌入式知识.assets/STM32F107芯片.png"alt="STM32F107芯片" /></p></li></ul></li></ul><h5 id="usb-rs485422转接头的接线问题">USB-RS485/422转接头的接线问题</h5><p>这是一个USB-RS485/422转接头。<imgsrc="assets/零散的嵌入式知识.assets/USB_RS485_422转接头背面.jpg"alt="USB_RS485_422转接头背面" /><imgsrc="assets/零散的嵌入式知识.assets/USB_RS485_422转接头正面.jpg"alt="USB_RS485_422转接头正面" /></p><p>它可以将开发板的485接口和电脑的USB接口接在一起，使得电脑通过串口调试助手与有485模块的开发板进行485通信。</p><p>至于如何接线的问题，显然：A接A，B接B。<imgsrc="assets/零散的嵌入式知识.assets/转接头485接口.jpg"alt="转接头485接口" /></p><figure><img src="assets/零散的嵌入式知识.assets/开发板485接口.jpg"alt="开发板485接口" /><figcaption aria-hidden="true">开发板485接口</figcaption></figure><h4 id="关于规范的代码">关于规范的代码</h4><h5 id="关于全局变量是放于.h还是.c">关于全局变量是放于.h还是.c</h5><p>全局变量的定义通常放在源文件（.c）中，而不是头文件（.h）中。这是因为全局变量具有全局作用域，将其定义放在头文件中会导致在多个源文件中重复定义，从而引发编译错误。为了在多个源文件中共享全局变量，一种常见的做法是将全局变量的声明放在头文件中，而将其定义放在一个源文件中。其他源文件需要使用该全局变量时，可以通过包含相应的头文件来获取变量的声明。例如，假设有一个全局变量<code>int globalVar;</code>定义于source.c中，我们可以在头文件中添加以下声明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// source.h</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> globalVar;</span><br></pre></td></tr></table></figure><p>其他源文件需要使用该全局变量时，只需包含头文件即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// other.c</span><br><span class="line">#include &quot;source.h&quot;</span><br><span class="line"></span><br><span class="line">// 可以使用 globalVar 进行操作</span><br></pre></td></tr></table></figure><p>这样可以确保全局变量在多个源文件中的声明一致性，并避免重复定义的问题。</p><h5 id="宏定义提高代码可读性的技巧1">宏定义提高代码可读性的技巧1</h5><p>将需要共享的宏定义放在一个公共的配置文件（例如<code>config.h</code>）中，通过<code>#include "config.h"</code>在其他文件中引用。使用<code>#ifndef</code>检查宏是否已定义，没有定义便进行重定义，以避免冲突，并确保单个代码的可移植性与整个工程配置的便于修改。</p><p>在 <code>config.h</code>中定义宏：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define IIC_SDA_PIN GPIO_PIN_0</span><br></pre></td></tr></table></figure><p>在 <code>iic.h</code> 中引用 <code>config.h</code> 并定义宏：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;config.h&quot;</span><br><span class="line"></span><br><span class="line">#ifndef IIC_SDA_PIN</span><br><span class="line">#define IIC_SDA_PIN  GPIO_PIN_4</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">// 其他的 IIC 相关定义</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">通过在iic.h 中引用 config.h，你可以使用 config.h 中定义的宏，同时保持了可移植性和灵活性。如果 config.h和 iic.h`中都有同名的宏定义，并且使用了 #ifndef`来检查宏是否已定义，那么会优先选择 config.h 中的定义。</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;nop_延时多久&quot;&gt;_nop_（）延时多久&lt;/h5&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;s</summary>
      
    
    
    
    <category term="嵌入式" scheme="http://example.com/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>单片机报错</title>
    <link href="http://example.com/blog/18.html"/>
    <id>http://example.com/blog/18.html</id>
    <published>2023-11-21T15:45:00.238Z</published>
    <updated>2023-11-22T23:34:33.079Z</updated>
    
    <content type="html"><![CDATA[<h1 id="iar">IAR</h1><h5 id="错误1">错误1</h5><p><strong>unable to allocate space for sections/blocks with a totalestimated minimum size of 0x1fb4 bytes (max align 0x1) in&lt;[0x008000-0x009fff]&gt; (total uncommitted space</strong></p><figure><img src="assets/单片机报错.assets/IAR_Error_Lp011.png"alt="IAR_Error_Lp011" /><figcaption aria-hidden="true">IAR_Error_Lp011</figcaption></figure><p><strong>解决办法</strong></p><ul><li><p>options--&gt;C/C++Compiler--&gt;Optimizations：将Level改为High<imgsrc="assets/单片机报错.assets/IAR_Error_Lp011_Solution1.png"alt="IAR_Error_Lp011_Solution1" /></p></li><li><p>options--&gt;General Options--&gt;Library Options：</p><p>Printf formatter与Scanf formatter改小，比如改为Small withoutmultibyte<imgsrc="assets/单片机报错.assets/IAR_Error_Lp011_Solution2.png"alt="IAR_Error_Lp011_Solution2" /></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;iar&quot;&gt;IAR&lt;/h1&gt;
&lt;h5 id=&quot;错误1&quot;&gt;错误1&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;unable to allocate space for sections/blocks with a total
estimated minimum size o</summary>
      
    
    
    
    <category term="嵌入式" scheme="http://example.com/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>各类屏幕及其代码</title>
    <link href="http://example.com/blog/19.html"/>
    <id>http://example.com/blog/19.html</id>
    <published>2023-11-21T15:45:00.238Z</published>
    <updated>2023-11-22T23:34:39.426Z</updated>
    
    <content type="html"><![CDATA[<h1 id="各类屏幕介绍">各类屏幕介绍</h1><h2 id="点阵屏">点阵屏</h2><p>点阵屏(Dot matrix screen)指在显示屏上长和宽各能显示出多少个像素点。<em>从技术角度来说，所有屏幕都是以像素矩阵的形式显示，都是点阵屏，但在日常语言中，人们通常会将"点阵屏"这个术语更多地用于指代传统的液晶点阵屏或LED点阵屏，而将其他类型的屏幕根据其特定技术特征进行分类和命名。就好比485明明是物理层的通讯协议，没有规定帧的格式，但是市面上有很多运行于数据链路层的私有485协议，实际上它们不是485协议，只是基于485协议的私有数据链路层协议，但大家都称呼它为私有485协议。</em>下面是一些点阵屏：</p><p><img src="assets/各类屏幕及其代码.assets/8x8LED点阵屏.png"alt="8x8LED点阵屏" /><imgsrc="assets/各类屏幕及其代码.assets/128x64LED点阵屏.png"alt="128x64LED点阵屏" /><img src="D:\博客\hexo\blog\source\_posts\嵌入式\assets\各类屏幕及其代码.assets\1602点阵型字符液晶显示屏.png" alt="1602点阵型字符液晶显示屏" style="zoom:400%;" /></p><p><img src="D:\博客\hexo\blog\source\_posts\嵌入式\assets\各类屏幕及其代码.assets\12864点阵型图形液晶显示屏.png" alt="12864点阵型图形液晶显示屏" style="zoom:400%;" /></p><h2 id="段码笔段式屏">段码(笔段式)屏</h2><p>段码屏（SegmentDisplay）通常被认为是一种特殊类型的点阵屏(你也可以认为不是)。点阵屏是一种将图像或文本信息分割成像素矩阵的显示设备，而段码屏是其中的一种变体。</p><p>段码屏通常由七段显示器或十六段显示器组成，每个段（或几个段）对应一个特定的字符或数字。每个段可以通过控制电压或电流来点亮或熄灭，从而显示出不同的字符或数字。段码屏在数字显示和字符显示方面非常常见，例如用于显示数字时钟、计数器、温度显示等。</p><figure><img src="assets/各类屏幕及其代码.assets/笔段式液晶屏.png"alt="笔段式液晶屏" /><figcaption aria-hidden="true">笔段式液晶屏</figcaption></figure><h2 id="led屏light-emitting-diode-display">LED屏(Light-Emitting DiodeDisplay)</h2><p>Light-EmittingDiode翻译为发光二极管，由它的名字就可以看出，LED屏是通过使用发光二极管（LED）作为像素点来显示图像的显示屏。</p><p>下面是一些LED屏</p><figure><img src="assets/各类屏幕及其代码.assets/8x8LED点阵屏.png"alt="8x8LED点阵屏" /><figcaption aria-hidden="true">8x8LED点阵屏</figcaption></figure><figure><img src="assets/各类屏幕及其代码.assets/LED显示屏.png"alt="LED显示屏" /><figcaption aria-hidden="true">LED显示屏</figcaption></figure><h2 id="lcdliquid-crystal-display">LCD(Liquid Crystal Display)</h2><p>Liquid CrystalDisplay翻译为液晶显示屏，LCD是一种使用液晶材料来控制光的透过程度来显示图像和字符的技术。</p><p>LCD屏幕可以分为图形型和字符型，它们在显示内容和使用方式上有一些区别：</p><ol type="1"><li><p>图形型LCD屏幕：图形型LCD屏幕通常具有较高的分辨率和灵活性，可以显示更复杂的图形和图像。它们可以通过像素级别的控制来显示任意的图形和图像，可以绘制线条、曲线、点阵图像等。图形型LCD屏幕通常用于需要显示较复杂图形的应用场景，如图形用户界面（GUI）显示、图表绘制等。<img src="D:\博客\hexo\blog\source\_posts\嵌入式\assets\各类屏幕及其代码.assets\12864点阵型图形液晶显示屏.png" alt="12864点阵型图形液晶显示屏" style="zoom:400%;" /></p></li><li><p>字符型LCD屏幕：字符型LCD屏幕由一组预定义的字符组成，每个字符由一个固定大小的点阵矩阵表示。字符型LCD屏幕可以显示有限数量的字符，通常用于显示文本信息，如字母、数字、符号等。它们通常具有较低的分辨率，但可以显示大量的字符，并且能够提供简单的文本显示功能。字符型LCD用于显示字符，每个字符像素矩阵间都有预留的间隔，强行用来显示图片就会出现下图所示画面。</p><p><img src="D:\博客\hexo\blog\source\_posts\嵌入式\assets\各类屏幕及其代码.assets\1602点阵型字符液晶显示屏.png" alt="1602点阵型字符液晶显示屏" style="zoom:400%;" /></p></li></ol><p>区别总结如下：</p><ul><li>图形型LCD屏幕具有较高的分辨率和灵活性，可以显示复杂的图形和图像。</li><li>字符型LCD屏幕由预定义的字符组成，每个字符具有固定的点阵表示，用于显示有限数量的字符和文本信息。</li></ul><h2 id="oled屏-organic-light-emitting-diode">OLED屏 (OrganicLight-Emitting Diode)</h2><p>Organic Light-EmittingDiode意为有机发光二极管。OLED是一种利用有机化合物作为发光材料的显示技术，它能够直接发光而无需背光源。</p><h2 id="tftthin-film-transistor">TFT(Thin Film Transistor)</h2><p>Thin FilmTransistor意为薄膜晶体管。TFT是一种液晶显示屏的技术，其中每个液晶像素点都与一个薄膜晶体管相连，通过控制晶体管的电流来控制像素的亮度和颜色。</p><h1 id="ssd1306">SSD1306</h1><h2 id="mcu接口">MCU接口</h2><p>SSD1306总共有8个数据引脚和5个控制引脚，不同的MCU模块可以通过BS[2:0]引脚选择设置</p><figure><img src="assets/各类屏幕及其代码.assets/MCU总线接口引脚选择.png"alt="MCU总线接口引脚选择" /><figcaption aria-hidden="true">MCU总线接口引脚选择</figcaption></figure><figure><imgsrc="assets/各类屏幕及其代码.assets/不同接口模式下的MCU硬件配置_SSD1306.png"alt="不同接口模式下的MCU硬件配置_SSD1306" /><figcaptionaria-hidden="true">不同接口模式下的MCU硬件配置_SSD1306</figcaption></figure><p>如下图所示，它就使用的是IIC接口，从它BS0-2的接线情况可以看出。而出于节省IO引脚的需要，其余引脚也是参照上表配置的。</p><figure><img src="assets/各类屏幕及其代码.assets/SSD1306原理图示例.png"alt="SSD1306原理图示例" /><figcaption aria-hidden="true">SSD1306原理图示例</figcaption></figure><h3 id="mcu-i2c接口">MCU I2C接口</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I2C通讯接口由从机地址为SA0(D/C#引脚作为SA0), I2C总线数据信号(SDAout/D2输出和SDAin/D1输入)和I2C</span><br><span class="line">总线时钟信号SCL (D0) 组成。数据和时钟信号线都必须接上上拉电阻。RES#用来初始化设</span><br><span class="line">备。</span><br></pre></td></tr></table></figure><ul><li>I2C通信的地址由7位从机地址加1位读写控制，即<spanclass="math inline">\(011110 + SA0+R/W\#\)</span>位组成</li><li>R/W位是I2C的读写选择(1读0写)，一般向OLED写数据居多，极少读，因此下图为了节省IO口，R/W#接地了。</li><li>而SSD1306中，SA0位为从机地址提供一位的扩展，0111100和0111101都可以作为从机地址，下图的D/C#引脚接地表示从机地址为0111100</li><li>RES#为0会初始化设备。所以可以看出与上面的例子不同下图的例子出于某种需要RES#不再是接地。</li></ul><figure><img src="assets/各类屏幕及其代码.assets/SSD1306原理图示例2.png"alt="SSD1306原理图示例2" /><figcaption aria-hidden="true">SSD1306原理图示例2</figcaption></figure><h3 id="命令表">命令表</h3><p>SSD1306的部分常用命令如下所示在SSD1306中，有的命令是单字节命令，有的是双字节命令。比如设置显示开关0xAE就是关闭OLED屏幕，是单字节命令。比如设置对比度(亮度)的命令就是双字节命令，可以认为0x81是一个命令头，只有先发送0x81，才允许发送对比度进行设置，否则命令无效，而从图中可以看出A[7:0]都是用于对比度设置，因此对比度取值为0x00-0xFF。</p><figure><img src="assets/各类屏幕及其代码.assets/SSD1306常用命令.png"alt="SSD1306常用命令" /><figcaption aria-hidden="true">SSD1306常用命令</figcaption></figure><p>具体的命令参见数据手册，现就SSD1306的初始化命令为例，对其命令表进行介绍。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">//将OLED面板关闭(睡眠模式)</span><br><span class="line">OLED_WriteCommond(0xae);//单字节命令</span><br><span class="line"></span><br><span class="line">//设置显示起始行地址(0x40-0x7F，共64行，每行一像素)，</span><br><span class="line">OLED_WriteCommond(0x40); </span><br><span class="line"></span><br><span class="line">//设置列、行扫描方向。0xa1和0xc8表示从0行0列开始扫描</span><br><span class="line">OLED_WriteCommond(0xa1);//set SEG/Column Mapping     0xa0左右反置 0xa1正常</span><br><span class="line">OLED_WriteCommond(0xc8);//set COM/Row Scan Direction   0xc0上下反置 0xc8正常</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//设置显示偏移A[5:0]</span><br><span class="line">//经实验偏移由0x00--&gt;0x03图像上移了些许</span><br><span class="line">OLED_WriteCommond(0xd3);</span><br><span class="line">OLED_WriteCommond(0x00);</span><br><span class="line"></span><br><span class="line">//设置对比度和亮度。</span><br><span class="line">OLED_WriteCommond(0x81);//set contrast control register</span><br><span class="line">OLED_WriteCommond(0xcf);//set SEG Output Current Brightness(0x00-0xff)</span><br><span class="line"></span><br><span class="line">//设置时钟分频和RC振荡器频率。 A[3:0] 分频因子, A[7:4] 震荡频率设置</span><br><span class="line">OLED_WriteCommond(0xd5);//双字节命令</span><br><span class="line">OLED_WriteCommond(0x80);</span><br><span class="line"></span><br><span class="line">//设置多路复用比例A[5:0]</span><br><span class="line">OLED_WriteCommond(0xa8);</span><br><span class="line">OLED_WriteCommond(0x3f)</span><br><span class="line"></span><br><span class="line">//设置COM引脚硬件配置。</span><br><span class="line">OLED_WriteCommond(0xda);//set com pins hardware configuration</span><br><span class="line">OLED_WriteCommond(0x12);//Sequential COM pin configuration，Enable COM Left/Right remap</span><br><span class="line"></span><br><span class="line">//设置预充电期间的持续时间</span><br><span class="line">OLED_WriteCommond(0xd9);/*Set Pre-Charge Period */</span><br><span class="line">OLED_WriteCommond(0xf1);</span><br><span class="line"></span><br><span class="line">//设置VCOMH电压和VCOM Deselect电平。</span><br><span class="line">OLED_WriteCommond(0xdb);/*Set VCOMH Deselect Level */</span><br><span class="line">OLED_WriteCommond(0x40);/*set display start line*/  </span><br><span class="line"></span><br><span class="line">//设置页面寻址模式(0x00水平寻址,01垂直寻址,02页寻址)</span><br><span class="line">OLED_WriteCommond(0x20);</span><br><span class="line">OLED_WriteCommond(0x02);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//恢复到RAM内容显示(重置)0xA4 根据RAM 内容显示，0xA5 屏幕全亮)</span><br><span class="line">OLED_WriteCommond(0xa4);</span><br><span class="line"></span><br><span class="line">//设置是否反相</span><br><span class="line">OLED_WriteCommond(0xa6);//Set Normal/Inverse Display   0xA6正常,0xA7反相(白色背景，黑色前景)</span><br><span class="line">、</span><br><span class="line">//设置充电泵使能和禁用。0x14是启用，0x10是禁用</span><br><span class="line">OLED_WriteCommond(0x8d);//set Charge Pump enable/disable</span><br><span class="line">OLED_WriteCommond(0x14);//set(0x10) disable</span><br><span class="line"></span><br><span class="line">//打开OLED面板（正常模式）</span><br><span class="line">OLED_WriteCommond(0xaf);//打开屏幕</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;各类屏幕介绍&quot;&gt;各类屏幕介绍&lt;/h1&gt;
&lt;h2 id=&quot;点阵屏&quot;&gt;点阵屏&lt;/h2&gt;
&lt;p&gt;点阵屏(Dot matrix screen)指在显示屏上长和宽各能显示出多少个像素点。
&lt;em&gt;从技术角度来说，所有屏幕都是以像素矩阵的形式显示，都是点阵屏，但在日常语</summary>
      
    
    
    
    <category term="嵌入式" scheme="http://example.com/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>tm1637</title>
    <link href="http://example.com/blog/14.html"/>
    <id>http://example.com/blog/14.html</id>
    <published>2023-11-21T15:45:00.235Z</published>
    <updated>2023-11-22T23:35:54.174Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="6fd6546804102ca1343b39b43b4c9e8a217825ff6e0f3f1afbf6fc0f5cdf780f"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这些是草稿或不便于观看的内容，需要密码。</summary>
    
    
    
    <category term="嵌入式" scheme="http://example.com/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
    <category term="草稿" scheme="http://example.com/tags/%E8%8D%89%E7%A8%BF/"/>
    
  </entry>
  
  <entry>
    <title>STM8S005K6T6C单片机</title>
    <link href="http://example.com/blog/13.html"/>
    <id>http://example.com/blog/13.html</id>
    <published>2023-11-21T15:45:00.233Z</published>
    <updated>2023-11-22T23:35:38.356Z</updated>
    
    <content type="html"><![CDATA[<p>数据手册下载网站：：<ahref="https://www.alldatasheet.com">ALLDATASHEET</a>,官网</p><h1 id="液晶显示屏">液晶显示屏</h1><ul><li>液晶显示屏依靠驱动芯片来控制显示内容和操作，驱动芯片有HD44780等等。</li><li>液晶显示屏的种类有很多，如字符型液晶、图形型液晶和TFT液晶等<ul><li>字符型液晶：字符型液晶显示屏仅能显示预定义的字符。</li><li>图形型液晶：图形型液晶显示屏能够显示自定义的图像、图形和文本。</li><li>TFT液晶显示屏：一种彩色液晶显示屏，使用TFT技术来控制像素点。</li></ul></li></ul><h2 id="hd44780">HD44780</h2><ul><li><p>内置字符生成器，支持预定义的字符集，如字母、数字和特殊符号。</p></li><li><p>支持8位和4位并行接口，以便与微控制器连接。</p></li><li><p>可控制多行字符显示，如1行、2行或4行。</p></li><li><p>支持自定义字符，可以创建和显示特定于应用的字符。</p></li><li><p>具有简单的指令集，方便编程和控制。</p></li></ul><h3 id="时序图阅读">时序图阅读</h3><figure><img src="assets/STM8S005K6T6C单片机.assets/HD44780U时序图_读操作.png"alt="HD44780U时序图_读操作" /><figcaption aria-hidden="true">HD44780U时序图_读操作</figcaption></figure><p>首先把RS置0/1（选择指令/数据模式)。然后将R/<spanclass="math inline">\(\overline{W}\)</span>置1，为读模式。随后将E置1，使能。经过<spanclass="math inline">\(t_{DDR}\)</span>时间后，就可以从总线上取指令/数据了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">代码参考：</span><br><span class="line">u8 LCD1602_ <span class="title function_">Read</span><span class="params">(u8 readtype)</span> <span class="comment">//读取液晶模组状态或数据</span></span><br><span class="line">&#123;</span><br><span class="line">    u8 readdata;<span class="comment">//定义返回值变址(存放状态信息或数据信息)</span></span><br><span class="line">    <span class="keyword">if</span>(readtype = = <span class="number">0</span>)&#123;<span class="comment">//判断读取类型</span></span><br><span class="line">    LCDRS= <span class="number">0</span>;<span class="comment">//读取状态信息  </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">    LCDRS= <span class="number">1</span>;<span class="comment">//读取数据信息.    </span></span><br><span class="line">    &#125;</span><br><span class="line">    LCDRW= <span class="number">1</span>;<span class="comment">//读取操作</span></span><br><span class="line">    delay(<span class="number">5</span>); <span class="comment">//延时等待稳定</span></span><br><span class="line">    LCDEN= <span class="number">1</span>;<span class="comment">//模块使能</span></span><br><span class="line">    delay(<span class="number">5</span>);<span class="comment">//延时等待数据返回</span></span><br><span class="line">    readdata = PORT;<span class="comment">//从数据线上取回读取信息</span></span><br><span class="line">    LCDEN= <span class="number">0</span>;<span class="comment">//模块不使能</span></span><br><span class="line">    <span class="keyword">return</span> readdata;<span class="comment">//返回信息</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">LCD1602_Write</span><span class="params">(u8 cmdordata 。u8 writetype)</span>&#123;<span class="comment">//写入液晶模组命令或数据</span></span><br><span class="line">    <span class="comment">//写入数据是先将数据发送到数据总线上，再使能，将EN由1--&gt;0产生下降沿，使写入数据生效</span></span><br><span class="line"><span class="keyword">if</span>(writetype = = <span class="number">0</span>)<span class="comment">//判断写人类型</span></span><br><span class="line">LCDRS= <span class="number">0</span>;<span class="comment">//写入命令信息</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">LCDRS= <span class="number">1</span>;<span class="comment">//写入数据信息</span></span><br><span class="line">LCDRM= <span class="number">0</span>;<span class="comment">//写入操作</span></span><br><span class="line">PORT = cmdordata ;<span class="comment">//向数据线端口写入信息</span></span><br><span class="line">delay(<span class="number">5</span>);<span class="comment">//延时等待稳定</span></span><br><span class="line">LCDEN= <span class="number">1</span>;<span class="comment">//模块使能</span></span><br><span class="line">delay(<span class="number">5</span>);<span class="comment">//延时等待写入</span></span><br><span class="line">ICDEN=<span class="number">0</span>:<span class="comment">//模块不使能</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符型液晶模组">1602字符型液晶模组</h2><p>主要引脚：</p><ul><li><p>VCC与GND：电源连接与接地。</p></li><li><p>VEE：对比度调整，通过一个可变电阻器连接，以调整显示对比度。</p></li><li><p>RS（RegisterSelect）：寄存器选择，用于选择指令(0)或数据(1)模式。</p></li><li><p>R/<spanclass="math inline">\(\overline{W}\)</span>（Read/Write）：读/写选择，决定当前操作是读取还是写入液晶模块。</p></li><li><p>EN（Enable）：使能信号，用于触发读/写操作。</p></li><li><p>DB0-DB7：数据线，用于传输8位数据或指令。并行DB0-DB7，串行DB4-DB7。</p></li><li><p>A（Anode）和K（Cathode）：背光LED的阳极和阴极。</p></li></ul><h2 id="图形型液晶">12864图形型液晶</h2><p>主要引脚：</p><ul><li>VCC、GND、EN、VEE、RST、A：电源连接、接地、使能引脚、对比度调整、复位、背光正/负极。</li><li>DB0-DB7：数据线，用于传输8位数据或指令</li><li>RS（RegisterSelect）：命令/数据选择引脚，用于选择指令(0)或数据(1)模式。</li><li>R/<spanclass="math inline">\(\overline{W}\)</span>（Read/Write）：读/写选择，决定当前操作是读取还是写入液晶模块。<br /></li><li>PSB，串/并模式选择，为1，使用DB0-7。为0，使用RS、R/W、EN进行通信，此时RS为CS<ahref="">串行片选功能</a>，R/W为SID串行输入输出功能，EN为CLK串行时钟功能。</li><li>NC：空脚</li><li>VO：内部电压输出</li></ul><h1 id="iic通信">IIC通信</h1><ul><li>IIC总线是两线式串行总线，用于连接多个芯片和传感器。由两条信号线完成通信，是半双工通信协议：SDA——数据线、SCL——时钟线</li><li>IIC同时支持多个主机和多个从机，每个设备都有7位的唯一的地址。其中产生时钟信号的是主机，在此时，接收数据的都被认为是从机。</li><li>一般采用开漏结构和总线相连，因此SCL和SDA都需接上拉电阻。故总线空闲，SCL,SDA均为高电平，连接总线任一器件输出低电平，都会拉低总线电平。</li></ul><h2 id="iic通信时序">IIC通信时序</h2><ul><li><strong>空闲状态</strong>：SCL线与SDA线均处于高电平状态，等待起始信号</li><li><strong>起始信号</strong>：由主机发送。SCL线为高电平期间，SDA线由高电平向低电平的变化表示起始信号。</li><li><strong>终止信号</strong>：由主机发送。SCL线为高电平期间，SDA线由低电平向高电平的变化表示终止信号（释放SDA时，SDA会自动被拉高）</li><li><strong>数据传输</strong>：SCL为低电平期间，才允许改变SDA电平，传输数据。SCK为高电平时，用以数据读取。故除开始结束信号外，SCL高电平时，不允许改变SDA。</li><li><strong>数据传送格式</strong>：以8位字节为单位传送，高位在前。每个字节发送完成后，接收方需发送一位ACK表示已经收到。也可在读操作时发送一位NACK信号，表示停止读取数据。<ul><li>ACK与NACK：SDA=1为NACK，SDA=0为ACK</li></ul></li><li>通信过程中需要严格遵守IIC总线协议，包括起始信号、地址字节、数据字节、应答信号、停止信号等。<ul><li><strong>地址字节</strong>由7位设备地址，加一位R/<spanclass="math inline">\(\overline{W}\)</span>构成。R/<spanclass="math inline">\(\overline{W}\)</span>为1表示接下来是主机读信号，从机发送信号，为0表示接下来是主机发送，从机读取。（上面有一横，表示低电平有效）</li></ul></li></ul><p>写操作：先发送开始信号，在发送控制字节，地址字节，数据字节，其中每完发送一个字节，都需要一个应答信号ACK，结束信号。如果地址超过一个字节，先发送地址高字节，IIC的发送，是高位在前。控制字节：4bit控制码（如24C01C，是1010），3bit片选（选择哪个字节），1bit读写标志（1读，0写）应答信号ACK：发送器在发送完1字节后，由接收器发送ACK信号，表示已经收到数据。发送器释放SDA线(一般SDA会拉高)，接收器将SDA拉低，表示收到数据。注意，仅有开始，结束信号可以在SCL为高时，改变SDA。</p><p>非应答信号NACK：在读操作时，接收方停止读取数据，则向发送方发送NACK</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在IIC的代码中，在除开始，结束信号的SDA设置外，在所有设置SDA的值的代码前，都添加了IIC_SCL_LOW()，保证在SCL为低电平时，对SDA进行改变。同样的，考虑到其他人可能会在调用函数后，设置SDA的值，而忘记先使得SCL为低电平，所以在结尾也都添加了IIC_SCL_LOW()。</span></span><br><span class="line"><span class="comment">而考虑到IIC的电平信号在电路中传输可能需要时间，以及可能需要给从设备读取信号的时间，在对IIC总线信号进行改变后，都添加了延时。</span></span><br><span class="line"><span class="comment">考虑到可能有多个主机要传输时钟信号，这时会出现时钟同步问题，于是在IIC_SCL_HIGH();后都进行总线空闲判断，当然，此处大多省略了此段代码。</span></span><br><span class="line"><span class="comment">考虑到可能有多个主机要传输SDA信号，可能还要添加仲裁代码，此处省略。</span></span><br><span class="line"><span class="comment">考虑到在传输开始，结束，ACK,NAck信号，读取/发送信号等时，开始时SCL和SDA的电平可能并不符合要求，所以在需要进行设置的地方，我们设置了SCL与SDA的电平，比如开始信号要求最初SCL,SDA均为高电平。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_Init</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//将两个数据线都设置为输出模式,起始高电平</span></span><br><span class="line">    IIC_SDA_OUT();</span><br><span class="line">    IIC_SCL_OUT();</span><br><span class="line">IIC_SDA_HIGH();</span><br><span class="line">    IIC_SCL_HIGH();</span><br><span class="line">    delayus(<span class="number">2</span>);<span class="comment">//等待电平稳定</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//判断IIC总线是否空闲</span></span><br><span class="line">    u32 num=<span class="number">2000</span>;</span><br><span class="line">    <span class="keyword">while</span>(num--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(IIC_SCL_Read())&#123;<span class="comment">//等待时钟线空闲</span></span><br><span class="line">            <span class="comment">//此时如果SDA为1，且时间持续较长，说明此时处于空闲状态</span></span><br><span class="line">            delayus(<span class="number">6</span>);</span><br><span class="line">            <span class="keyword">if</span>(IIC_SDA_Read())&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;           </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">u8 <span class="title function_">IIC_ReadBit</span><span class="params">(<span class="type">void</span>)</span>&#123;<span class="comment">//读入一位数据</span></span><br><span class="line">    u8 bit;</span><br><span class="line">    IIC_SCL_LOW();<span class="comment">//数据传输</span></span><br><span class="line">    delayus(<span class="number">2</span>);</span><br><span class="line">    IIC_SCL_HIGH();<span class="comment">//数据读取，此处可判断SCL是否空闲，进行时钟同步</span></span><br><span class="line">delayus(<span class="number">2</span>);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    //判断SCL是否空闲</span></span><br><span class="line"><span class="comment">        unsigned int num=2000;</span></span><br><span class="line"><span class="comment">        while(num--)&#123;</span></span><br><span class="line"><span class="comment">            if(IIC_SCL_Read())&#123;//等待时钟线空闲</span></span><br><span class="line"><span class="comment">                    break;        </span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    ack=IIC_SCL_Read();</span><br><span class="line">    delayus(<span class="number">2</span>);</span><br><span class="line">IIC_SCL_LOW();<span class="comment">//恢复SCL为低电平，防止误传开始，结束信号，便于进行数据传输</span></span><br><span class="line">    delayus(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> ack;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_WriteBit</span><span class="params">(u8 bit)</span>&#123;<span class="comment">//写入一位数据</span></span><br><span class="line">    IIC_SCL_LOW();<span class="comment">//数据传输</span></span><br><span class="line">delayus(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(bit)&#123;<span class="comment">//写数据</span></span><br><span class="line">        IIC_SDA_HIGH();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        IIC_SDA_LOW();</span><br><span class="line">    &#125;</span><br><span class="line">IIC_SCL_HIGH();<span class="comment">//让从机进行数据读取，此处可进行时钟同步</span></span><br><span class="line">    delayus(<span class="number">2</span>);</span><br><span class="line">    IIC_SCL_LOW();</span><br><span class="line">delayus(<span class="number">2</span>);    </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_Start</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//将两个数据线都设置为高电平</span></span><br><span class="line">IIC_SDA_HIGH();</span><br><span class="line">    IIC_SCL_HIGH();</span><br><span class="line">delayus(<span class="number">2</span>);<span class="comment">//等待电平稳定</span></span><br><span class="line">IIC_SDA_LOW();<span class="comment">//拉低SDA电平，发送开始信号</span></span><br><span class="line">    delayus(<span class="number">2</span>);</span><br><span class="line">IIC_SCL_LOW();<span class="comment">//拉低SCL电平，等待数据传输</span></span><br><span class="line">delayus(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_Stop</span><span class="params">(<span class="type">void</span>)</span>&#123;<span class="comment">//SCL为高电平期间，SDA由低电平到高电平</span></span><br><span class="line">    IIC_SCL_LOW();<span class="comment">//数据传输</span></span><br><span class="line">    IIC_SDA_LOW();<span class="comment">//电平置低</span></span><br><span class="line">delayus(<span class="number">2</span>);</span><br><span class="line">IIC_SCL_HIGH();<span class="comment">//数据读取</span></span><br><span class="line">    delayus(<span class="number">2</span>);</span><br><span class="line">    IIC_SDA_HIGH();<span class="comment">//电平置高</span></span><br><span class="line">IIC_SDA_IN();<span class="comment">//释放SDA</span></span><br><span class="line">delayus(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">SCL_SetACK</span><span class="params">(<span class="type">void</span>)</span>&#123;<span class="comment">//发送ACK信号</span></span><br><span class="line">    IIC_SCL_LOW();<span class="comment">//数据传输</span></span><br><span class="line">    delayus(<span class="number">2</span>);</span><br><span class="line">    IIC_SDA_OUT();<span class="comment">//获取SDA</span></span><br><span class="line">    IIC_SDA_LOW();<span class="comment">//发送ACK</span></span><br><span class="line">    delayus(<span class="number">2</span>);</span><br><span class="line">    IIC_SCL_HIGH();<span class="comment">//数据读取</span></span><br><span class="line">delayus(<span class="number">2</span>);</span><br><span class="line">IIC_SCL_LOW();<span class="comment">//便于下次操作</span></span><br><span class="line">delayus(<span class="number">2</span>);    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">SCL_SetNACK</span><span class="params">(<span class="type">void</span>)</span>&#123;<span class="comment">//发送NACK</span></span><br><span class="line">    IIC_SCL_LOW();<span class="comment">//数据传输</span></span><br><span class="line">    delayus(<span class="number">2</span>);</span><br><span class="line">    IIC_SDA_OUT();<span class="comment">//获取SDA</span></span><br><span class="line">    IIC_SDA_HIGH();<span class="comment">//发送ACK</span></span><br><span class="line">    delayus(<span class="number">2</span>);</span><br><span class="line">    IIC_SCL_HIGH();<span class="comment">//数据读取</span></span><br><span class="line">delayus(<span class="number">2</span>);</span><br><span class="line">IIC_SCL_LOW();</span><br><span class="line">delayus(<span class="number">2</span>);    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">u8 <span class="title function_">SCL_GetACK</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    u8 ack;</span><br><span class="line">    IIC_SCL_LOW();<span class="comment">//主机需要将SCL设为低电平，让从机可以发送ACK</span></span><br><span class="line">    delayus(<span class="number">2</span>);</span><br><span class="line">    IIC_SDA_IN();<span class="comment">//释放SDA</span></span><br><span class="line">    IIC_SCL_HIGH();<span class="comment">//准备读取SDA</span></span><br><span class="line">    delayus(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(IIC_ReadBit())&#123;<span class="comment">//读取SDA数据</span></span><br><span class="line">     ack=<span class="number">1</span>;   </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        ack=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    delayus(<span class="number">2</span>);</span><br><span class="line">    <span class="comment">//占用SDA，由于接上拉电阻，默认输出高电平，此时SCL为高电平，可能会出现误发结束信号</span></span><br><span class="line">    <span class="comment">//因此先置低SCL，然后占用SDA</span></span><br><span class="line">    IIC_SCL_LOW();</span><br><span class="line">    IIC_SDA_OUT();<span class="comment">//占用SDA</span></span><br><span class="line">    delayus(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> ack;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">u8 <span class="title function_">IIC_Read</span><span class="params">(<span class="type">void</span>)</span>&#123;<span class="comment">//读取一个字节数据</span></span><br><span class="line">    u8 data=<span class="number">0</span>;</span><br><span class="line">    u8 t=<span class="number">8</span>;</span><br><span class="line">    u8 bit;</span><br><span class="line">    IIC_SCL_LOW();<span class="comment">//数据传输</span></span><br><span class="line">    IIC_SDA_IN();<span class="comment">//释放SDA</span></span><br><span class="line">    delayus(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        bit=IIC_ReadBit();<span class="comment">//读取数据</span></span><br><span class="line">        <span class="comment">//读取的数据是高位在前的</span></span><br><span class="line">        data&lt;&lt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(bit)&#123;</span><br><span class="line">            data++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    IIC_SCL_LOW();</span><br><span class="line">    delayus(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_Write</span><span class="params">(u8 data)</span>&#123;<span class="comment">//发送一个字节数据</span></span><br><span class="line">    u8 t=<span class="number">8</span>;</span><br><span class="line">    IIC_SCL_LOW();<span class="comment">//数据传输</span></span><br><span class="line">    IIC_SDA_OUT();<span class="comment">//获取SDA</span></span><br><span class="line">    delayus(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(data&amp;<span class="number">0x80</span>)&#123;<span class="comment">//传输的数据是高位在前</span></span><br><span class="line">            IIC_WriteBit(<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            IIC_WriteBit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        data&lt;&lt;<span class="number">1</span>;     </span><br><span class="line">    &#125;</span><br><span class="line">    IIC_SCL_LOW();</span><br><span class="line">    delayus(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="eeprom">EEPROM</h2><p>EEPROM（Electrically Erasable Programmable Read OnlyMemory），电可擦除可编程只读存储器，是一种掉电之后数据不会丢失的存储芯片。EEPROM里面用的芯片是24c0x系列芯片，它能够存储数据的大小为：24C01：128字节（128×8位） 24C02：256字节（256×8位）24C04：512字节（512×8位） 24C08：1K字节（1K×8位）24C16：2K字节（2K×8位）</p><h2 id="iic通信相关问题">IIC通信相关问题</h2><ul><li><p><strong>主机发送数据时，如果有多个从机，那么是不是所有从机都会接收到数据？</strong></p><p>IIC的每个设备都有唯一的地址，所以发送开始信号后，会先发送从机的地址数据，故总线上所有的从机会对该地址进行比对，如果和自己的地址匹配，才接收下面的数据；</p></li><li><p><strong>为什么总线上有任一主机发送时钟低电平，那么总线电平是低电平？</strong></p><p>IIC一般采用开漏结构和总线相连，因此SCL和SDA都需接上拉电阻。</p><p><img src="assets/STM8S005K6T6C单片机.assets/IIC总线设备图.png"alt="IIC总线设备图" />如图，如果所有设备都输出高电平，那么总线电平为高电平，如果有一个设备发送低电平，那么，上拉电阻和发送低电平端口有电压差，电路导通，所以总线上的电平为低电平（高中物理中理想状态单独一根导线上的电压处处相等)</p></li><li><p><strong>如果IIC总线上有多个主机发送数据，会发生数据冲突吗？</strong></p><ul><li><p>如果多个主机发送数据的时间不同，那么先发送数据的主机会占有主线，后发送的会检测到主线忙，于是停止发送。</p></li><li><p>如果多个主机发送数据的时间相同，会进行时钟同步和总线仲裁</p><ul><li><p>时钟同步：</p><p>当有多个主机在同时发送时钟信号到总线上时，SCL被有最长低电平的器件占有控制权</p><p>如何实现：该主机发送时钟高电平后，会读SCL电平。由于IIC总线特点，总线上一个主机发送低电平时，整个总线的电平会拉低。所以当SCL为低电平时，该主机会进行等待，直到，SCL电平为高电平才进入下一步。</p><p>代码参考：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">IIC_SCL_HIGH();</span><br><span class="line">delayus(<span class="number">2</span>);<span class="comment">//等待电平稳定</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> num=<span class="number">2000</span>;</span><br><span class="line"><span class="keyword">while</span>(num--)&#123;</span><br><span class="line"><span class="keyword">if</span>(IIC_SCL_Read())&#123;<span class="comment">//IIC_SCL_Read():读取SCL时钟信号</span></span><br><span class="line">        <span class="comment">//这是在进行时钟同步，当有多个主机在同时发送时钟信号到总线上时，SCL被有最长低电平的器件占有控制权</span></span><br><span class="line">        <span class="comment">//在这里，如果设置了SCL=HIGH，读取到的电平却没有改变为高电平，说明它没有占有总线，于是等待。</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>总线仲裁：各个主机发送SDA信息，发送低电平的占有总线，发送高电平的退出竞争，仲裁可以持续多位。</p></li></ul></li></ul></li><li><p><strong>如果接收方没有来得及发送ACK信号会怎么样？</strong></p><p>主机会发送开始信号重新传输，或发送结束信号，结束传输。</p></li><li><p>有没有可能主机发送得太快，从机还没有来得及读，就进入下一步？</p><p>可能，所以在芯片通过IIC与传感器通信时，传感器数据手册会有最大时钟频率设置，保证传感器来得及读取数据。所以在改变SCL,SDA电平时，会进行延时，一方面是等待电路稳定，另一方面是为了从设备来得及读取。</p></li></ul><h2 id="tm1637">TM1637</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">你看一看我的理解有没有错误。</span><br><span class="line">TM1637_start() 是在发送起始信号吗，首先SCL,SDA默认都是高电平，然后拉低SDA的电平，发送起始信号，中间延迟的2us是在等SCL,SDA电平稳定吗？</span><br><span class="line">TM1637_writeByte（）是在进行数据传送吗？传送8位数据，低位在前，这一阶段只有SCL为低电平时SDA才允许变化，所以先将CLK设为低电平，然后DIO发送数据，延时2us等待数据发送完毕，然后CLK电平拉高，</span><br><span class="line">TM1637_stop()是发送停止信号，开始时SCL是高电平，SDA是低电平，当SDA由低变高时产生一个上升沿，表示结束信号。同样的延时2us是等待电平稳定。</span><br><span class="line"></span><br><span class="line">我写了一个</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#include &lt;reg51.h&gt;</span><br><span class="line">#include &lt;stdint.h&gt;</span><br><span class="line"></span><br><span class="line">sbit CLK = P2^0;</span><br><span class="line">sbit DIO = P2^1;</span><br><span class="line"></span><br><span class="line">void delay_us(unsigned int us) &#123;</span><br><span class="line">    while (us--);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void TM1637_start() &#123;</span><br><span class="line">    DIO = 1;</span><br><span class="line">    CLK = 1;</span><br><span class="line">    delay_us(2);</span><br><span class="line">    DIO = 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void TM1637_stop() &#123;</span><br><span class="line">    DIO = 0;</span><br><span class="line">    CLK = 1;</span><br><span class="line">    delay_us(2);</span><br><span class="line">    DIO = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void TM1637_writeByte(unsigned char data) &#123;</span><br><span class="line">    unsigned char i;</span><br><span class="line">    for (i = 0; i &lt; 8; i++) &#123;</span><br><span class="line">        CLK = 0;</span><br><span class="line">        DIO = data &amp; 0x01;</span><br><span class="line">        data &gt;&gt;= 1;</span><br><span class="line">        delay_us(2);</span><br><span class="line">        CLK = 1;</span><br><span class="line">    &#125;</span><br><span class="line">    CLK = 0;</span><br><span class="line">    DIO = 1;</span><br><span class="line">    delay_us(2);</span><br><span class="line">    CLK = 1;</span><br><span class="line">    DIO = 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void TM1637_display(unsigned char addr, unsigned char data) &#123;</span><br><span class="line">    TM1637_start();</span><br><span class="line">    TM1637_writeByte(0x40);</span><br><span class="line">    TM1637_stop();</span><br><span class="line">    TM1637_start();</span><br><span class="line">    TM1637_writeByte(0xC0 | addr);</span><br><span class="line">    TM1637_writeByte(data);</span><br><span class="line">    TM1637_stop();</span><br><span class="line">    TM1637_start();</span><br><span class="line">    TM1637_writeByte(0x8F);</span><br><span class="line">    TM1637_stop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void delay_ms(unsigned int ms) &#123;</span><br><span class="line">    unsigned int i;</span><br><span class="line">    while (ms--) &#123;</span><br><span class="line">        for (i = 0; i &lt; 1000; i++);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void main() &#123;</span><br><span class="line">    unsigned char count = 0;</span><br><span class="line">    unsigned char segment[] = &#123;</span><br><span class="line">        0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    while (1) &#123;</span><br><span class="line">        TM1637_display(0, segment[count % 10]);</span><br><span class="line">        TM1637_display(1, segment[count / 10]);</span><br><span class="line">        count++;</span><br><span class="line">        delay_ms(1000);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>冗余计算：两个计算器进行计算，如果答案相同，计算可能正确，答案不同，必定至少有一个计算错误，可以用于校验计算的正确。</p><p>什么才是可计算的问题呢？有限步可以解决吗？是的。模拟信号是连续的，数字信号是离散的。</p><p><strong>74hc245</strong>是一种在单片机系统中常用的驱动器，三态输出八路收发器，它在电路中的作用是：增加io口的驱动能力，比如说51单片机的io口本身的驱动电流较小但所带的负载很大，这种时候就可以使用74hc245来增强io口的驱动能力</p><p>知识点：三极管、GPIO、74HC138译码器、定时器、中断、数码管、点阵LED、晶振、复位电路、独立按键、矩阵按键、74HC245驱动器、准双向IO口、步进电机、蜂鸣器、PWM、并行通信、串行通信，UART,I2C,SPI,差分信号，RS-485通信，Modbus协议</p><h4 id="stm8的gpio"><strong>STM8的GPIO</strong></h4><ul><li>确定是输入，还是输出</li><li>如果是输出，采取哪种模式，有两种输出模式：推挽、开漏如果是输入，采取哪种模式，有两种输入模式：弱上拉，悬浮</li><li>确定输入输出模式后，如果是输出，确定以什么样是速率输出。如果是输入，确定是否要有中断。所以在STM8中，有四种输入模式：悬浮、上拉、中断悬浮、中断上拉</li></ul><h4id="推挽开漏上拉悬浮详解"><strong>推挽、开漏、上拉、悬浮详解</strong></h4><ul><li><p>推挽 推挽输出的特点是提高负载驱动能力，提高开关速度。推挽输出模式下，内部电路由两个管轮流导通输出高低电平，即在每一时刻只有一个管子处于导通状态。如图所示PMOS管导通，NMOS管关闭，输出高电平，NMOS管导通，PMOS管关闭，输出低电平。</p><ul><li><p>扩展</p><figure><img src="assets/STM8S005K6T6C单片机.assets/推挽输出模式电路结构.png"alt="推挽输出模式电路结构" /><figcaption aria-hidden="true">推挽输出模式电路结构</figcaption></figure></li></ul></li><li><p>开漏开漏输出是MOS漏极处于开路状态，无法输出高电平，如果需要得到确定的高电平状态需要外接上拉电阻，适合于电流型的驱动，吸收电流能力强。开漏模式中如果要输出高电平，只有外界上拉电阻，那么单片机内部就不需提供驱动电流，可以减少单片机自身功耗。</p><ul><li><p>扩展</p><figure><img src="assets/STM8S005K6T6C单片机.assets/开漏输出模式电路结构.png"alt="开漏输出模式电路结构" /><figcaption aria-hidden="true">开漏输出模式电路结构</figcaption></figure></li></ul></li><li><p>悬浮悬浮输入模式下，电路的引脚电平状态不确定，它跟随外部信号的变化而变化，适用于模拟信号输入采样。</p><ul><li><p>扩展</p><figure><img src="assets/STM8S005K6T6C单片机.assets/悬浮输入电路图.png"alt="悬浮输入电路图" /><figcaption aria-hidden="true">悬浮输入电路图</figcaption></figure><p>很显然从电路图上可以看出，引脚到芯片内部电路上什么也没接，那么引脚的电平变化会直接反应到芯片内部电路中。</p></li></ul></li><li><p>上拉上拉的作用就是将引脚的不确定电平通过一个上拉电阻确定为高电平状态，减少外部电平的影响。同理，下拉作用则是通过一个下拉电阻将引脚电平拉到低电平。一般来说上拉作用强弱与上拉电阻阻值和上拉电阻端电源电压有关，电压一定时，阻值越小上拉作用越强。同理下拉时阻值越小下拉作用越强。</p><ul><li><p>扩展</p><figure><img src="assets/STM8S005K6T6C单片机.assets/上拉输入模式电路结构.png"alt="上拉输入模式电路结构" /><figcaption aria-hidden="true">上拉输入模式电路结构</figcaption></figure><p>显然，从电路图上可以看出，当端口断开时，整条回路断路，电阻相当于断路，此时端口的电平就是VDD电平。当端口没有断开是输入到内部电路的电流也有来自VDD--&gt;R1--&gt;芯片内部电路的一份，那么来自外部环境的影响就被削弱了。</p></li></ul></li></ul><p>集成电路是采用一定工艺，将一个电路中所需要的晶体管、电阻、电容、电感等元件和布线都互连在一起，并制作成小块的半导体晶片或介质基片上，并封装好的。<strong>在电路中用“IC”表示。</strong></p><h4 id="芯片引脚"><strong>芯片引脚</strong></h4><h5id="数据手册的芯片引脚和现实的芯片引脚如何对应">数据手册的芯片引脚和现实的芯片引脚如何对应</h5><p>可以看出，现实的芯片有一个小的圆形印记，将芯片的字体摆正，圆形印记在左下方，所以芯片的引脚是以左下方的第一个引脚为1号，逆时针编号到第n号(比如64)</p><p><img src="assets/STM8S005K6T6C单片机.assets/引脚对照图.png"alt="引脚对照图" /> ##### 如何阅读数据手册的引脚描述表</p><p>Pin number是引脚编号，为“-”表示无此引脚，LQFP80表示采取了该类封装的芯片，Pin name是引脚名字。Type为I/O表示其为输入/出引脚，为S表示电源电极 floating(悬浮输入)wpu(弱上拉输入) Exit.interrput(外部中断输入) High sink(高吸收电流)Speed(输出速率) OD(开漏输出) PP(推挽输出) Main function(alter reser)复位后的主功能 Default alternate function 默认的复位后功能 Alternatefunction after remap[option bit] 选项位</p><p><img src="assets/STM8S005K6T6C单片机.assets/引脚描述表.png"alt="引脚描述表" /> <imgsrc="assets/STM8S005K6T6C单片机.assets/image-20230330155925003.png"alt="image-20230330155925003" /></p><h4 id="gpio常用寄存器">GPIO常用寄存器</h4><p>每个GPI0端口都分配有五个寄存器:输出数据寄存器 Px_ODR、输入数据寄存器Px_IDR、数据方向寄存器 Px_DDR、控制寄存器1 Px_CR1、控制寄存器2 Px_CR2（x表示端口组，取A~I)</p><p>DDR为0表示输入，为1表示输出 输入模式中：CR1为0表示悬浮，为1表示上拉输出模式中：CR1为0表示开漏，为1表示推挽输入模式中：CR2为0表是不开启中断，为1表示开启中断输出模式中：CR2为0表示不采取快速模式，为1表示采取快速模式</p><p>在进行读操作是我们通过读取寄存器IDR的值获取引脚的电平状态，通过改变寄存器ODR的值进行输出。</p><figure><img src="assets/STM8S005K6T6C单片机.assets/STM8单片机GPIO配置表.png"alt="STM8单片机GPIO配置表" /><figcaption aria-hidden="true">STM8单片机GPIO配置表</figcaption></figure><p>从这里我们也可以清楚，如果要使GPIO端口，必定要设置DDR，CR寄存器的值，以配置好其输入输出模式，一般会自定义一个函数GPIO_init(),在其中配置好各个寄存器的值。</p><h5 id="示例代码">示例代码</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">配置实例<span class="number">1</span>:现需配置PB组端口高<span class="number">4</span>位为悬浮输入模式低<span class="number">4</span>位为弱上拉输入模式，读取端口状态赋值给变量“x”,读取单一端口PB2状态赋值给变量“y”: </span><br><span class="line">PB_DDR =<span class="number">0x00</span>;<span class="comment">//对应二进制为“0000 0000”， PB全端口均为输入模式</span></span><br><span class="line">PB_CR1=<span class="number">0x0F</span>;<span class="comment">//对应二进制为“0000 1111” ，高4位悬浮输入，低4位上拉输入</span></span><br><span class="line">x=PB_IDR; <span class="comment">//读取PB端口状态并赋值给变量“x”</span></span><br><span class="line">y= (PB_IDR&gt;&gt;<span class="number">2</span>)&amp;<span class="number">0x01</span>; <span class="comment">//读取PB2端口状态并赋值给变量“x”(理解一下位运算和&amp;就知道为什么这么写了)</span></span><br><span class="line"></span><br><span class="line">配置实例<span class="number">2</span>:现需配置PB组GPI0端口高<span class="number">4</span>位为<span class="number">2</span>MHz速率开漏输出模式，低<span class="number">4</span>位为</span><br><span class="line"><span class="number">10</span>MHz速率推挽输出模式，让端口输出“<span class="number">0101</span> <span class="number">0111</span>” 电平状态: </span><br><span class="line">PB_DDR =<span class="number">0xFF</span>;<span class="comment">//对应二进制为“1111 1111”， PB全端口均为输出模式</span></span><br><span class="line">PB_CR1=<span class="number">0x0F</span>;<span class="comment">//对应二进制为“0000 1111”，高4位(PB7-PB4)开漏输出，低4位(PB3-PB0)推挽输出</span></span><br><span class="line">PB_CR2=<span class="number">0x0F</span>;<span class="comment">//对应二进制为“0000 1111” ，高4位2MHz速率，低4位10MHz速率</span></span><br><span class="line">PB_ODR= <span class="number">0x57</span>;<span class="comment">//对应二进制为“0101 0111” ，即为用户自定义输出状态数据</span></span><br><span class="line"></span><br><span class="line">Stm8中进行位操作也有如同<span class="number">51</span>中P1_1这样的用法，也是在头文件例如iostm8s208mb.h中定义好的。</span><br></pre></td></tr></table></figure><p><strong>三极管</strong> 在电路中作用：作为开关使用、放大电流有三个极：基极B、集电极C、发射极E</p><ul><li>NPN型三极管</li><li>PNP型三极管</li></ul><p><strong>mos管</strong> 有三个极</p><ul><li><p>P沟道</p></li><li><p>N沟道</p></li></ul><h4 id="数码管">数码管</h4><p>在数码管中为减少引脚，一般会多个led灯共阳/阴。在电路图中，会用A表示阳极，K表示阴极，各个灯与编号的对应关系如下图所示。</p><figure><img src="assets/STM8S005K6T6C单片机.assets/数码管电路引脚示意图.png"alt="数码管电路引脚示意图" /><figcaption aria-hidden="true">数码管电路引脚示意图</figcaption></figure><p>在使用多个数码管时，要引入位、段的概念，位表示的是哪个数码管，段表示的是数码管中各个led灯的电平情况。多位数码管一般会采取动态显示法。公共端上电，后送入位码，然后送段码，决定哪个数码管亮哪些灯，利用人眼的视觉残留，一定时间内依次亮不同的灯，呈现出所有灯亮的效果。当使用多个数码管时，为减少引脚，可以使用驱动、电子开关、串转并、专用驱动芯片等来节省IO口。<strong>利用74HC595芯片多个驱动数码管</strong></p><figure><img src="assets/STM8S005K6T6C单片机.assets/74HC595驱动数码管电路.png"alt="74HC595驱动数码管电路" /><figcaption aria-hidden="true">74HC595驱动数码管电路</figcaption></figure><p>可以发现，有上划线的表示低电平有效。</p><h4 id="spi协议">SPI协议</h4><figure><img src="assets/STM8S005K6T6C单片机.assets/SPI电路图.png"alt="SPI电路图" /><figcaption aria-hidden="true">SPI电路图</figcaption></figure><h4 id="相关例程">相关例程</h4><h5 id="点亮一个led灯">点亮一个led灯</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">RCLK  </span><br><span class="line"></span><br><span class="line"><span class="comment">//head</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iostm8s208mb.h&quot;</span></span></span><br><span class="line"><span class="comment">//normal datatype</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> u8 uint8_t</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> u16 uint16_t</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> u32 uint32_t</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">char</span> <span class="type">uint8_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">short</span> <span class="type">uint16_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">uint32_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// function declare</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">led_init</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">delayms</span><span class="params">(u16 count)</span>;</span><br><span class="line"><span class="comment">//main</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">( <span class="type">void</span> )</span></span><br><span class="line">&#123;</span><br><span class="line">  u8 i=<span class="number">0</span>;</span><br><span class="line">  led_init();</span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">      PB_ODR=<span class="number">0x01</span>&lt;&lt;i++;</span><br><span class="line">      delayms(<span class="number">500</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// functions</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">led_init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  PB_DDR=<span class="number">0x01</span>;</span><br><span class="line">  PB_CR1=<span class="number">0XFF</span>;</span><br><span class="line">  PB_CR2=<span class="number">0x00</span>;</span><br><span class="line">  PB_ODR=<span class="number">0x01</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">delayms</span><span class="params">(u16 count)</span></span><br><span class="line">&#123;</span><br><span class="line">  u8 i,j;</span><br><span class="line">  <span class="keyword">while</span>(count--)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">50</span>;i++)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">20</span>;j++);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="流水灯">流水灯</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">        </span><br><span class="line">//head</span><br><span class="line">#include &quot;iostm8s208mb.h&quot;</span><br><span class="line">//normal datatype</span><br><span class="line">#define u8 uint8_t</span><br><span class="line">#define u16 uint16_t</span><br><span class="line">#define u32 uint32_t</span><br><span class="line">typedef unsigned char uint8_t;</span><br><span class="line">typedef unsigned short uint16_t;</span><br><span class="line">typedef unsigned long uint32_t;</span><br><span class="line"></span><br><span class="line">// function declare</span><br><span class="line">void led_init();</span><br><span class="line">void delayms(u16 count);</span><br><span class="line">//main</span><br><span class="line">void main( void )</span><br><span class="line">&#123;</span><br><span class="line">  led_init();</span><br><span class="line">  while(1)</span><br><span class="line">  &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// functions</span><br><span class="line">void led_init()</span><br><span class="line">&#123;</span><br><span class="line">  PB_DDR=0xFF;</span><br><span class="line">  PB_CR1=0XFF;</span><br><span class="line">  PB_CR2=0x00;</span><br><span class="line">  PB_ODR=0x01;</span><br><span class="line">&#125;</span><br><span class="line">void delayms(u16 count)</span><br><span class="line">&#123;</span><br><span class="line">  u8 i,j;</span><br><span class="line">  while(count--)</span><br><span class="line">  &#123;</span><br><span class="line">      for(i=0;i&lt;50;i++)</span><br><span class="line">      &#123;</span><br><span class="line">        for(j=0;j&lt;20;j++);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="中断点亮led">中断点亮LED</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//------------------------------header------------------------------------------</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iostm8s208mb.h&quot;</span></span></span><br><span class="line"><span class="comment">//------------------------------common datatype---------------------------------</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">char</span> <span class="type">uint8_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">short</span> <span class="type">uint16_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">uint32_t</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> u8 uint8_t</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> u16 uint16_t</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> u32 uint32_t</span></span><br><span class="line"><span class="comment">//------------------------------macros------------------------------------------</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED PI_ODR_ODR0</span></span><br><span class="line"><span class="comment">//------------------------------function declare--------------------------------</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">delay</span><span class="params">(u16 count)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">GPIO_init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="comment">//------------------------------global------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------main--------------------------------------------</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">( <span class="type">void</span> )</span></span><br><span class="line">&#123;</span><br><span class="line">  GPIO_init();</span><br><span class="line">  <span class="keyword">asm</span>(<span class="string">&quot;sim&quot;</span>);</span><br><span class="line">  EXTI_CR1=<span class="number">0X20</span>;<span class="comment">//EXTI_CR1是一个寄存器，用于控制外部中断线1（即PC0引脚所连接的中断线）的触发方式</span></span><br><span class="line">  <span class="keyword">asm</span>(<span class="string">&quot;rim&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//------------------------------functions---------------------------------------</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">GPIO_init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  PI_DDR_DDR0=<span class="number">1</span>;</span><br><span class="line">  PI_CR1_C10=<span class="number">1</span>;</span><br><span class="line">  PI_CR2_C20=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  PC_DDR_DDR0=<span class="number">0</span>;</span><br><span class="line">  PC_CR1_C10=<span class="number">1</span>;</span><br><span class="line">  PC_CR2_C20=<span class="number">1</span>;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> vector=0X07<span class="comment">//这是一条编译器指令，定义中断函数向量号，0x07对应外部中断0（即PC0）。</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">#pragma vector=0X07`，它告诉编译器将下面的函数（`EXTI_PORTC_IRQHandler`）放在中断向量表的第7个位置，这个位置是外部中断0的位置（每个中断有一个对应的向量表位置）。当外部中断0发生时，CPU会跳转到中断向量表的第7个位置，执行相应的中断处理函数。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">中断向量表是一张存储着所有中断处理函数地址的表格，存储在特定的内存区域。中断向量表的地址存储在内核寄存器中。当发生中断时，内核会从中断向量表中获取中断处理函数的地址，并跳转到该地址执行中断处理函数。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">STM8有两种类型的中断：外部中断和内部中断。外部中断可以处理来自GPIO引脚、定时器、UART、SPI、I2C等外设的中断。内部中断可以处理来自CPU内部的中断，例如时钟溢出、ADC转换完成等。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">__interrupt <span class="type">void</span> <span class="title function_">EXTI_PORTC_IRQHandler</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//__interrupt：关键字，表示该函数是一个中断服务子程序。</span></span><br><span class="line">&#123;</span><br><span class="line">  delay(<span class="number">10</span>);</span><br><span class="line">  <span class="keyword">if</span> (PC_IDR_IDR0==<span class="number">0</span>)<span class="comment">//判断PC0引脚是否被按下，即判断外部中断是否发生。</span></span><br><span class="line">  &#123;</span><br><span class="line">    LED=!LED;</span><br><span class="line">    <span class="keyword">while</span>(!PC_IDR_IDR0);<span class="comment">//等待PC0引脚被松开，避免因为按键抖动导致的误操作。</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">delay</span><span class="params">(u16 count)</span></span><br><span class="line">&#123;</span><br><span class="line">  u8 i,j;</span><br><span class="line">  <span class="keyword">while</span> (count--)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">50</span>;i++)</span><br><span class="line">      <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">20</span>;j++);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ChatGPT描述的执行结果</span></span><br><span class="line">如果按下按键并一直保持按下不松开，那么中断程序将会不停地被触发，然后在每次中断时，LED灯的状态都会取反。也就是说，LED灯会不停地闪烁，直到松开按键为止。因为在中断程序中，检测到按键按下时，会一直在循环中等待按键松开才继续执行下面的程序。</span><br><span class="line">当程序运行时，如果按键没有按下，LED会一直处于初始状态（默认为熄灭状态）。当按下按键时，LED的状态会翻转一次（从熄灭状态变为点亮状态或从点亮状态变为熄灭状态），并且在按键释放之前，LED的状态不会再次改变。</span><br></pre></td></tr></table></figure><h5id="stm8定义外部中断的例子chatgpt写的">STM8定义外部中断的例子（ChatGPT写的）</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> vector=EXTI_PORTC_VECTOR</span></span><br><span class="line">__interrupt <span class="type">void</span> <span class="title function_">EXTI_PORTC_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 中断处理代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="时钟周期与机器周期">时钟周期与机器周期</h1><ul><li><p>时钟周期：</p><p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CPU时间的最小基本单位，通常是CPU时钟信号从上升沿到下降沿再到下一次上升沿所需要的时间。不同的CPU架构和处理器型号，时钟周期的长度可能不同，例如，一个12MHz的晶振，CPU时钟信号的一个完整周期为1/12MHz ≈ 83.33纳秒。</span><br></pre></td></tr></table></figure></p></li><li><p>机器周期：</p><p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一个机器周期包括多个时钟周期，通常是CPU执行一个完整的机器指令所需要的时间。</span><br></pre></td></tr></table></figure></p></li><li><p>通常来说，CPU的时钟频率越高，机器周期包含的时钟周期数量就越少，因为在相同的时间内，CPU可以执行更多的操作和指令。</p></li></ul><h1id="智能机制作嵌入式系统mkl25z128vlk4-mcu">智能机制作：嵌入式系统（MKL25Z128VLK4MCU)</h1><p>学堂在线的课程 智能机制作：嵌入式系统的2.2从晶体管到CPU没看懂，建议在学习数字电路后，重新回顾。</p><h2 id="cpu的基本结构和运行机制">CPU的基本结构和运行机制</h2><p>ALU：运算逻辑单元 Reg：寄存器单元 CU：控制单元对于CPU的各个单元的存在意义，我们理一下：首先，计算机是用于计算的，那么它必须要有一个用于逻辑计算的单元：ALU其次，我们应该要意识，运行的结果需要有存放的地方，那就是：寄存器最后，计算机需要有一个部件使得计算机知晓应该采取何样的顺序，执行何种运算，这就是：控制器IO设备用于计算机与外界交互，毕竟我们需要的不是一个自顾自的做自己的事，无法使用的石头。</p><h1 id="uart串口通信">UART串口通信</h1><h2 id="串口通信">串口通信</h2><p>串口通信（Serialcommunication）是一种通信方式，通过串行（逐位）传输数据。它是计算机和其他设备之间传输数据的常用方法。串口通信有多种类型，如UART（通用异步收发器）、SPI（串行外设接口）、I2C（内部集成电路总线）等。</p><h2 id="uart串口通信-1">UART串口通信：</h2><h3 id="定义">定义</h3><p>UART（通用异步收发器）是一种异步串行通信协议，使用两个数据线进行通信：TX（发送）和RX（接收）。UART 通信具有以下特点：</p><ul><li>异步：通信双方不需要共享时钟信号，而是各自有一个独立的时钟源。通信的开始和结束由起始位和停止位来标识。</li><li>数据帧结构：每个数据帧通常包括一个起始位、5到9个数据位、一个可选的奇偶校验位和一个或两个停止位。</li><li>波特率：通信速率，即每秒传输的位数。通信双方需要设置相同的波特率以进行有效通信。</li><li>UART 通信只需两个设备之间的两个数据线，适用于点对点通信。</li><li>可扩展：通过添加额外的硬件（例如 RS-232、RS-485、RS-422 等），UART通信可以用于长距离传输或多设备通信。</li></ul><h3 id="uart-通信过程">UART 通信过程</h3><ul><li>发送设备将要发送的字节（8位数据）从并行到串行转换，并将起始位、数据位、奇偶校验位（可选）和停止位组合成一个数据帧。</li><li>数据帧通过 TX 线发出，连接对面的RX引脚。</li><li>接收设备的 RX 线接收数据帧，连接对面的TX引脚。</li><li>接收设备通过内部时钟，从起始位开始，同步地对接收到的数据位进行采样。</li><li>将接收到的数据位转换回字节，并检查奇偶校验位（如果存在）以确保数据传输的正确性。</li><li>如果数据有效，接收设备会处理这些数据。如果检测到错误，接收设备可以请求重发。</li></ul><h4 id="uart发送接收">UART发送接收</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">普通UART模式下串行数据的发送接收帧结构：</span><br><span class="line">一个起始位、一个数据字（8、9位）、校验位、停止位（1、1.5、2）</span><br><span class="line">首先要确定接收数据的位数,通过UART_CR1</span><br><span class="line">然后要配置停止位的位数,通过UART_CR3</span><br><span class="line">要设置波特率,通过UART_BRR2与UART_BRR1</span><br><span class="line">设置UART_CR2的TEN/REN位，使能发送/接收</span><br><span class="line">UART_DR寄存器用来写入/读出 待发送/接收的数据</span><br><span class="line">UART_SR寄存器用来判断是否 发送寄存器位空（位7TXE）、已接收到数据（位5：RXNE)</span><br><span class="line"></span><br><span class="line">UARTx_CR1=0x00;//8位数据位，无奇偶校验，其中的位4(M:字长)和位5(UARTD:使能)值得注意</span><br><span class="line">UARTx_CR3=0x20;//2位停止位（5、6位STOP：停止位）</span><br><span class="line">//2MHz时钟下9600波特率，写BRR2(如果需要)应当先于在写BRR1，因为对BRR1的写操作会更新波特计数器</span><br><span class="line">//BRR的计算是 f_master(主频)/baudrate(波特率)</span><br><span class="line">//比如10MHz时钟下9600波特率，10 000 000/9600=1042=0x0412,故BRR2=0x02,BRR1=0x41</span><br><span class="line">//比如2MHz时钟下9600波特率，2 000 000/9600=208=0x00d0,故BRR2=0x00,BRR1=0x0d</span><br><span class="line">UARTx_BRR2=0x00;//先写波特比率的高4位与低4位                               </span><br><span class="line">UARTx_BRR1=0x0d;//后写波特比率的中间8位</span><br><span class="line">UARTx_CR2=0x0c;//使能发送、接收（3位TEN：发送使能，2位REX：接收使能）</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;数据手册下载网站：：&lt;a
href=&quot;https://www.alldatasheet.com&quot;&gt;ALLDATASHEET&lt;/a&gt;,官网&lt;/p&gt;
&lt;h1 id=&quot;液晶显示屏&quot;&gt;液晶显示屏&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;液晶显示屏依靠驱动芯片来控制显示内容和操作，驱动芯</summary>
      
    
    
    
    <category term="嵌入式" scheme="http://example.com/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>STM32学习</title>
    <link href="http://example.com/blog/15.html"/>
    <id>http://example.com/blog/15.html</id>
    <published>2023-11-21T15:45:00.232Z</published>
    <updated>2023-11-22T23:35:45.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="stm32相关软件下载与安装">STM32相关软件下载与安装</h1><p>下载并安装STM32CubeIDE</p><h1 id="section"></h1><h1 id="其他">其他</h1><h2 id="独立按键">独立按键</h2><figure><img src="assets/STM32学习.assets/image-20230426085540729.png"alt="image-20230426085540729" /><figcaption aria-hidden="true">image-20230426085540729</figcaption></figure><p>串联的电容用于消除按键抖动。从这个电路中可以看出，当按键按下，电路导通，PB12直连GND，读取到的是低电平。当按键松开，连接的是3.3v的正极，而采用浮空输入，内部有高速电阻，所以R11分的电压几乎可忽略不计，相当于直连正极，读到的是高电平。如果采用上拉输入，相当于内部接了上拉电阻，此处的上拉电阻可以省略。</p><p>HAL_GPIO_ReadPin()</p><p>GPIO_PinState是高电平和低电平状态的枚举类型HAL_GPIO_TogglePin（）翻转输出电平</p><p>Ctrl+鼠标点击，可查看函数实现 浮空输入，内部有高电阻</p><h1 id="gpio">GPIO</h1><h2 id="种gpio模式">8种GPIO模式</h2><h2 id="使用gpio的基本步骤">使用GPIO的基本步骤</h2><ul><li><p>配置GPIO引脚的时钟使能。(stm32为实现低功耗，所有外设时钟默认不使能)</p></li><li><p>配置输入输出模式：输入/推挽或开漏输出、输出速度、上拉/下拉，输入输出速度。然后初始化引脚</p></li><li><p>使用GPIO'</p></li></ul><h1 id="使用uart的基本步骤">使用UART的基本步骤</h1><p>串行通信方式，RS232电平。异步通信通过帧发送，帧由起始位，数据位，奇偶校验位，停止位构成，通过波特率和起始位保证通信双方接发同步。有Rx,Tx两条数据线。</p><ul><li>配置UART的GPIO引脚<ul><li>使能GPIO和UART的时钟</li><li>配置GPIO引脚为复用功能等</li><li>配置GPIO引脚的复用映射到UART的收发引脚</li></ul></li><li>配置UART的波特率、数据位、等等信息</li><li>配置UART的发送和接收方式<ul><li>配置UART的发送和接收中断（可选，配置中断向量表，开中断）</li><li>或者轮询方式进行发送和接收（主循环中轮询）</li></ul></li><li>使能UART</li></ul><h2 id="uart代码">UART代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line">//UART HAL库代码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#include &quot;stm32f1xx_hal.h&quot;  </span><br><span class="line">#include &quot;stdio.h&quot;</span><br><span class="line"></span><br><span class="line">//重定向printf函数</span><br><span class="line">#if 1</span><br><span class="line">#pragma import(__use_no_semihosting)             </span><br><span class="line">//标准库需要的支持函数                 </span><br><span class="line">struct __FILE </span><br><span class="line">&#123; </span><br><span class="line">int handle; </span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line">FILE __stdout;       </span><br><span class="line">//定义_sys_exit()以避免使用半主机模式    </span><br><span class="line">void _sys_exit(int x) </span><br><span class="line">&#123; </span><br><span class="line">x = x; </span><br><span class="line">&#125; </span><br><span class="line">//重定义fputc函数 </span><br><span class="line">int fputc(int ch, FILE *f)</span><br><span class="line">&#123;      </span><br><span class="line">while((USART1-&gt;SR&amp;0X40)==0);//循环发送,直到发送完毕   </span><br><span class="line">    USART1-&gt;DR = (unsigned char) ch;      </span><br><span class="line">return ch;</span><br><span class="line">&#125;</span><br><span class="line">#endif </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">uint8_t TxBuf[]=&quot;Hello World&quot;;//HAL库使用的串口接收缓冲</span><br><span class="line">UART_HandleTypeDef UART1_Handler; //UART句柄</span><br><span class="line">void MX_USART1_UART_Init(void);  </span><br><span class="line">void HAL_UART_MspInit(UART_HandleTypeDef *huart);</span><br><span class="line">void SystemClock_Config(void);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123; </span><br><span class="line"></span><br><span class="line">HAL_Init();                     //初始化HAL库    </span><br><span class="line">SystemClock_Config();   //设置时钟,72M</span><br><span class="line">MX_USART1_UART_Init();//初始化串口</span><br><span class="line">while (1)</span><br><span class="line">&#123;</span><br><span class="line">HAL_Delay(100);</span><br><span class="line">HAL_UART_Transmit(&amp;UART1_Handler, TxBuf, sizeof(TxBuf), 100);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/***************************</span><br><span class="line">时钟部分代码</span><br><span class="line">****************************/</span><br><span class="line">//系统时钟时钟</span><br><span class="line">void SystemClock_Config(void)</span><br><span class="line">&#123;</span><br><span class="line">RCC_OscInitTypeDef RCC_OscInitStructure; </span><br><span class="line">RCC_ClkInitTypeDef RCC_ClkInitStructure;</span><br><span class="line"></span><br><span class="line">RCC_OscInitStructure.OscillatorType=RCC_OSCILLATORTYPE_HSE;    //时钟源为HSE</span><br><span class="line">RCC_OscInitStructure.HSEState=RCC_HSE_ON;                      //打开HSE</span><br><span class="line">RCC_OscInitStructure.HSEPredivValue=RCC_HSE_PREDIV_DIV1;//HSE预分频</span><br><span class="line">RCC_OscInitStructure.PLL.PLLState=RCC_PLL_ON;//打开PLL</span><br><span class="line">RCC_OscInitStructure.PLL.PLLSource=RCC_PLLSOURCE_HSE;//PLL时钟源选择HSE</span><br><span class="line">RCC_OscInitStructure.PLL.PLLMUL=RCC_PLL_MUL9; //主PLL倍频因子</span><br><span class="line"></span><br><span class="line">if(HAL_RCC_OscConfig(&amp;RCC_OscInitStructure)!=HAL_OK) &#123;</span><br><span class="line">while(1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//选中PLL作为系统时钟源并且配置HCLK,PCLK1和PCLK2</span><br><span class="line">RCC_ClkInitStructure.ClockType=(RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2);</span><br><span class="line">RCC_ClkInitStructure.SYSCLKSource=RCC_SYSCLKSOURCE_PLLCLK;//设置系统时钟时钟源为PLL</span><br><span class="line">RCC_ClkInitStructure.AHBCLKDivider=RCC_SYSCLK_DIV1;//AHB分频系数为1</span><br><span class="line">RCC_ClkInitStructure.APB1CLKDivider=RCC_HCLK_DIV2; //APB1分频系数为2</span><br><span class="line">RCC_ClkInitStructure.APB2CLKDivider=RCC_HCLK_DIV1; //APB2分频系数为1</span><br><span class="line"></span><br><span class="line">if (HAL_RCC_ClockConfig(&amp;RCC_ClkInitStructure,FLASH_LATENCY_2) != HAL_OK)</span><br><span class="line">&#123;</span><br><span class="line">while(1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/***************************</span><br><span class="line">串口部分代码</span><br><span class="line">****************************/</span><br><span class="line"></span><br><span class="line">//初始化IO 串口1 </span><br><span class="line">void MX_USART1_UART_Init()</span><br><span class="line">&#123;</span><br><span class="line">//UART 初始化设置</span><br><span class="line">UART1_Handler.Instance=USART1;    //USART1</span><br><span class="line">UART1_Handler.Init.BaudRate=115200;    //波特率</span><br><span class="line">UART1_Handler.Init.WordLength=UART_WORDLENGTH_8B;   //字长为8位数据格式</span><br><span class="line">UART1_Handler.Init.StopBits=UART_STOPBITS_1;    //一个停止位</span><br><span class="line">UART1_Handler.Init.Parity=UART_PARITY_NONE;    //无奇偶校验位</span><br><span class="line">UART1_Handler.Init.HwFlowCtl=UART_HWCONTROL_NONE;   //无硬件流控</span><br><span class="line">UART1_Handler.Init.Mode=UART_MODE_TX_RX;    //收发模式</span><br><span class="line">HAL_UART_Init(&amp;UART1_Handler);    //HAL_UART_Init()会使能UART1</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">//UART底层初始化，时钟使能，引脚配置，中断配置</span><br><span class="line">//此函数会被HAL_UART_Init()调用</span><br><span class="line">void HAL_UART_MspInit(UART_HandleTypeDef *huart)//huart:串口句柄</span><br><span class="line">&#123;</span><br><span class="line">    //GPIO端口设置</span><br><span class="line">GPIO_InitTypeDef GPIO_Initure;</span><br><span class="line"></span><br><span class="line">if(huart-&gt;Instance==USART1)//如果是串口1，进行串口1 MSP初始化</span><br><span class="line">&#123;</span><br><span class="line">__HAL_RCC_GPIOA_CLK_ENABLE();//使能GPIOA时钟</span><br><span class="line">__HAL_RCC_USART1_CLK_ENABLE();//使能USART1时钟</span><br><span class="line">__HAL_RCC_AFIO_CLK_ENABLE();</span><br><span class="line"></span><br><span class="line">GPIO_Initure.Pin=GPIO_PIN_9;//PA9</span><br><span class="line">GPIO_Initure.Mode=GPIO_MODE_AF_PP;//复用推挽输出</span><br><span class="line">GPIO_Initure.Pull=GPIO_PULLUP;//上拉</span><br><span class="line">GPIO_Initure.Speed=GPIO_SPEED_FREQ_HIGH;//高速</span><br><span class="line">HAL_GPIO_Init(GPIOA,&amp;GPIO_Initure);   //初始化PA9</span><br><span class="line"></span><br><span class="line">GPIO_Initure.Pin=GPIO_PIN_10;//PA10</span><br><span class="line">GPIO_Initure.Mode=GPIO_MODE_AF_INPUT;//模式要设置为复用输入模式！</span><br><span class="line">HAL_GPIO_Init(GPIOA,&amp;GPIO_Initure);   //初始化PA10</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line">// UART 标准库代码</span><br><span class="line">//将串口接收的数据原样返回</span><br><span class="line"></span><br><span class="line">#include &quot;stm32f10x.h&quot;</span><br><span class="line">#include &quot;stm32f10x_usart.h&quot;</span><br><span class="line">#include &quot;stdio.h&quot;</span><br><span class="line">//重定向printf函数</span><br><span class="line">#if 1</span><br><span class="line">#pragma import(__use_no_semihosting)             </span><br><span class="line">//标准库需要的支持函数                 </span><br><span class="line">struct __FILE </span><br><span class="line">&#123; </span><br><span class="line">int handle; </span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line">FILE __stdout;       </span><br><span class="line">//定义_sys_exit()以避免使用半主机模式    </span><br><span class="line">void _sys_exit(int x) </span><br><span class="line">&#123; </span><br><span class="line">x = x; </span><br><span class="line">&#125; </span><br><span class="line">//重定义fputc函数 </span><br><span class="line">int fputc(int ch, FILE *f)</span><br><span class="line">&#123;      </span><br><span class="line">while((USART1-&gt;SR&amp;0X40)==0);//循环发送,直到发送完毕   </span><br><span class="line">    USART1-&gt;DR = (unsigned char) ch;      </span><br><span class="line">return ch;</span><br><span class="line">&#125;</span><br><span class="line">#endif </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void GPIO_Configuration(void);</span><br><span class="line">void USART_Configuration(u32 bound);</span><br><span class="line">void RCC_Configuration(void);</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">RCC_Configuration();</span><br><span class="line">GPIO_Configuration();</span><br><span class="line">USART_Configuration(9600);</span><br><span class="line"> </span><br><span class="line">while(1)</span><br><span class="line">&#123;</span><br><span class="line">if(USART_GetFlagStatus(USART1,USART_FLAG_RXNE)==SET)</span><br><span class="line">&#123;</span><br><span class="line">USART_SendData(USART1,USART_ReceiveData(USART1));</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/***************************</span><br><span class="line">时钟部分代码</span><br><span class="line">****************************/</span><br><span class="line"></span><br><span class="line">void RCC_Configuration(void)</span><br><span class="line">&#123;</span><br><span class="line">ErrorStatus HSEStartUpStatus;//定义枚举型变量HSEStartUpStatus</span><br><span class="line">RCC_DeInit();//复位系统时钟设置</span><br><span class="line">RCC_HSEConfig(RCC_HSE_ON);//开启HSE</span><br><span class="line">HSEStartUpStatus=RCC_WaitForHSEStatusUp();//等待HSE起振并稳定</span><br><span class="line">if(HSEStartUpStatus==SUCCESS)//判断HSE是否起振成功，是则进入if内部</span><br><span class="line">&#123;</span><br><span class="line">RCC_HCLKConfig(RCC_SYSCLK_Div1);//选择HCLK(AHB)时钟源为SYSCLK 1 分频</span><br><span class="line">RCC_PCLK2Config(RCC_HCLK_Div1);//选择PCLK2时钟源为HCLK(AHB) 1 分频</span><br><span class="line">RCC_PCLK1Config(RCC_HCLK_Div2);//选择PCLK1时钟源为HCLK(AHB) 2 分频</span><br><span class="line">FLASH_SetLatency(FLASH_Latency_2);//设置FLASH延时周期数为2</span><br><span class="line">FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);//使能FLASH预取缓存</span><br><span class="line">RCC_PLLConfig(RCC_PLLSource_HSE_Div1,RCC_PLLMul_9);//选择锁相环(PLL)时钟源为HSE 1 分频，倍频数为9，则PLL输出频率为 8MHz*9=72MHz</span><br><span class="line">RCC_PLLCmd(ENABLE);//使能PLL</span><br><span class="line">while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY)==RESET);//等待PLL输出稳定</span><br><span class="line">RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);//选择SYSCLK时钟源为PLL</span><br><span class="line">while(RCC_GetSYSCLKSource()!=0x08);//等待PLL成为SYSCLK时钟源</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1|RCC_APB2Periph_GPIOA, ENABLE);//使能USART1，GPIOA时钟</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">/***************************</span><br><span class="line">串口部分代码</span><br><span class="line">****************************/</span><br><span class="line"></span><br><span class="line">//初始化IO 串口1 </span><br><span class="line">void GPIO_Configuration(void)</span><br><span class="line">&#123;</span><br><span class="line">  //GPIO端口设置</span><br><span class="line">  GPIO_InitTypeDef GPIO_InitStructure; </span><br><span class="line">  </span><br><span class="line">//USART1_TX   GPIOA.9</span><br><span class="line">  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9; //PA.9</span><br><span class="line">  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;//复用推挽输出</span><br><span class="line">  GPIO_Init(GPIOA, &amp;GPIO_InitStructure);//初始化GPIOA.9</span><br><span class="line">   </span><br><span class="line">  //USART1_RX  GPIOA.10初始化</span><br><span class="line">  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;//PA10</span><br><span class="line">  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;//浮空输入</span><br><span class="line">  GPIO_Init(GPIOA, &amp;GPIO_InitStructure);//初始化GPIOA.10  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">//UART底层初始化，时钟使能，引脚配置，中断配置</span><br><span class="line">void USART_Configuration(u32 bound)&#123;</span><br><span class="line">USART_InitTypeDef USART_InitStructure;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   //USART 初始化设置</span><br><span class="line"></span><br><span class="line">USART_InitStructure.USART_BaudRate = bound;//串口波特率</span><br><span class="line">USART_InitStructure.USART_WordLength = USART_WordLength_8b;//字长为8位数据格式</span><br><span class="line">USART_InitStructure.USART_StopBits = USART_StopBits_1;//一个停止位</span><br><span class="line">USART_InitStructure.USART_Parity = USART_Parity_No;//无奇偶校验位</span><br><span class="line">USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;//无硬件数据流控制</span><br><span class="line">USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;//收发模式</span><br><span class="line"></span><br><span class="line">  USART_Init(USART1, &amp;USART_InitStructure); //初始化串口1</span><br><span class="line">  USART_Cmd(USART1, ENABLE);                    //使能串口1 </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="uart中断接收">UART中断接收</h2><figure><img src="assets/STM32学习.assets/串口接收中断流程.png"alt="串口接收中断流程" /><figcaption aria-hidden="true">串口接收中断流程</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line">//这只是最简单的中断接收程序，故不能保证接收的数据无误等。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#include &quot;stm32f1xx_hal.h&quot;  </span><br><span class="line">#include &quot;stdio.h&quot;</span><br><span class="line"></span><br><span class="line">//重定向printf函数</span><br><span class="line">#if 1</span><br><span class="line">#pragma import(__use_no_semihosting)             </span><br><span class="line">//标准库需要的支持函数                 </span><br><span class="line">struct __FILE </span><br><span class="line">&#123; </span><br><span class="line">int handle; </span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line">FILE __stdout;       </span><br><span class="line">//定义_sys_exit()以避免使用半主机模式    </span><br><span class="line">void _sys_exit(int x) </span><br><span class="line">&#123; </span><br><span class="line">x = x; </span><br><span class="line">&#125; </span><br><span class="line">//重定义fputc函数 </span><br><span class="line">int fputc(int ch, FILE *f)</span><br><span class="line">&#123;      </span><br><span class="line">while((USART1-&gt;SR&amp;0X40)==0);//循环发送,直到发送完毕   </span><br><span class="line">    USART1-&gt;DR = (unsigned char) ch;      </span><br><span class="line">return ch;</span><br><span class="line">&#125;</span><br><span class="line">#endif </span><br><span class="line"></span><br><span class="line">unsigned char aRxBuffer[10];//HAL库使用的串口接收缓冲</span><br><span class="line">UART_HandleTypeDef UART1_Handler; //UART句柄</span><br><span class="line">void MX_USART1_UART_Init(void);  </span><br><span class="line">void HAL_UART_MspInit(UART_HandleTypeDef *huart);</span><br><span class="line">void SystemClock_Config(void);</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123; </span><br><span class="line">    HAL_Init();                  //初始化HAL库    </span><br><span class="line">    SystemClock_Config();   //设置时钟,72M</span><br><span class="line">    MX_USART1_UART_Init();//初始化串口</span><br><span class="line">    while(1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/***************************</span><br><span class="line">时钟部分代码</span><br><span class="line">****************************/</span><br><span class="line">//系统时钟时钟</span><br><span class="line">void SystemClock_Config(void)</span><br><span class="line">&#123;</span><br><span class="line">RCC_OscInitTypeDef RCC_OscInitStructure; </span><br><span class="line">RCC_ClkInitTypeDef RCC_ClkInitStructure;</span><br><span class="line"></span><br><span class="line">RCC_OscInitStructure.OscillatorType=RCC_OSCILLATORTYPE_HSE;    //时钟源为HSE</span><br><span class="line">RCC_OscInitStructure.HSEState=RCC_HSE_ON;                      //打开HSE</span><br><span class="line">RCC_OscInitStructure.HSEPredivValue=RCC_HSE_PREDIV_DIV1;//HSE预分频</span><br><span class="line">RCC_OscInitStructure.PLL.PLLState=RCC_PLL_ON;//打开PLL</span><br><span class="line">RCC_OscInitStructure.PLL.PLLSource=RCC_PLLSOURCE_HSE;//PLL时钟源选择HSE</span><br><span class="line">RCC_OscInitStructure.PLL.PLLMUL=RCC_PLL_MUL9; //主PLL倍频因子</span><br><span class="line"></span><br><span class="line">if(HAL_RCC_OscConfig(&amp;RCC_OscInitStructure)!=HAL_OK) &#123;</span><br><span class="line">while(1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//选中PLL作为系统时钟源并且配置HCLK,PCLK1和PCLK2</span><br><span class="line">RCC_ClkInitStructure.ClockType=(RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2);</span><br><span class="line">RCC_ClkInitStructure.SYSCLKSource=RCC_SYSCLKSOURCE_PLLCLK;//设置系统时钟时钟源为PLL</span><br><span class="line">RCC_ClkInitStructure.AHBCLKDivider=RCC_SYSCLK_DIV1;//AHB分频系数为1</span><br><span class="line">RCC_ClkInitStructure.APB1CLKDivider=RCC_HCLK_DIV2; //APB1分频系数为2</span><br><span class="line">RCC_ClkInitStructure.APB2CLKDivider=RCC_HCLK_DIV1; //APB2分频系数为1</span><br><span class="line"></span><br><span class="line">if (HAL_RCC_ClockConfig(&amp;RCC_ClkInitStructure,FLASH_LATENCY_2) != HAL_OK)</span><br><span class="line">&#123;</span><br><span class="line">while(1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/***************************</span><br><span class="line">串口部分代码</span><br><span class="line">****************************/</span><br><span class="line"></span><br><span class="line">//初始化IO 串口1 </span><br><span class="line">void MX_USART1_UART_Init()</span><br><span class="line">&#123;</span><br><span class="line">//UART 初始化设置</span><br><span class="line">UART1_Handler.Instance=USART1;    //USART1</span><br><span class="line">UART1_Handler.Init.BaudRate=115200;    //波特率</span><br><span class="line">UART1_Handler.Init.WordLength=UART_WORDLENGTH_8B;   //字长为8位数据格式</span><br><span class="line">UART1_Handler.Init.StopBits=UART_STOPBITS_1;    //一个停止位</span><br><span class="line">UART1_Handler.Init.Parity=UART_PARITY_NONE;    //无奇偶校验位</span><br><span class="line">UART1_Handler.Init.HwFlowCtl=UART_HWCONTROL_NONE;   //无硬件流控</span><br><span class="line">UART1_Handler.Init.Mode=UART_MODE_TX_RX;    //收发模式</span><br><span class="line">HAL_UART_Init(&amp;UART1_Handler);    //HAL_UART_Init()会使能UART1</span><br><span class="line"></span><br><span class="line">HAL_UART_Receive_IT(&amp;UART1_Handler, (unsigned char *)aRxBuffer,sizeof(aRxBuffer));//该函数会开启接收中断：标志位UART_IT_RXNE，并且设置接收缓冲以及接收缓冲接收最大数据量  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//UART底层初始化，时钟使能，引脚配置，中断配置</span><br><span class="line">//此函数会被HAL_UART_Init()调用</span><br><span class="line">void HAL_UART_MspInit(UART_HandleTypeDef *huart)//huart:串口句柄</span><br><span class="line">&#123;</span><br><span class="line">    //GPIO端口设置</span><br><span class="line">GPIO_InitTypeDef GPIO_Initure;</span><br><span class="line"></span><br><span class="line">if(huart-&gt;Instance==USART1)//如果是串口1，进行串口1 MSP初始化</span><br><span class="line">&#123;</span><br><span class="line">__HAL_RCC_GPIOA_CLK_ENABLE();//使能GPIOA时钟</span><br><span class="line">__HAL_RCC_USART1_CLK_ENABLE();//使能USART1时钟</span><br><span class="line">__HAL_RCC_AFIO_CLK_ENABLE();</span><br><span class="line"></span><br><span class="line">GPIO_Initure.Pin=GPIO_PIN_9;//PA9</span><br><span class="line">GPIO_Initure.Mode=GPIO_MODE_AF_PP;//复用推挽输出</span><br><span class="line">GPIO_Initure.Pull=GPIO_PULLUP;//上拉</span><br><span class="line">GPIO_Initure.Speed=GPIO_SPEED_FREQ_HIGH;//高速</span><br><span class="line">HAL_GPIO_Init(GPIOA,&amp;GPIO_Initure);   //初始化PA9</span><br><span class="line"></span><br><span class="line">GPIO_Initure.Pin=GPIO_PIN_10;//PA10</span><br><span class="line">GPIO_Initure.Mode=GPIO_MODE_AF_INPUT;//模式要设置为复用输入模式！</span><br><span class="line">HAL_GPIO_Init(GPIOA,&amp;GPIO_Initure);   //初始化PA10</span><br><span class="line"></span><br><span class="line">HAL_NVIC_EnableIRQ(USART1_IRQn);//使能USART1中断通道</span><br><span class="line">HAL_NVIC_SetPriority(USART1_IRQn,3,3);//抢占优先级3，子优先级3</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">/***************************</span><br><span class="line">中断部分代码</span><br><span class="line">****************************/</span><br><span class="line">//当串口接收到信号，会触发串口中断，调用USART1_IRQHandler函数</span><br><span class="line">//HAL_UART_IRQHandler函数会判断是否为该USART口发生USART中断，如果发生，执行该函数</span><br><span class="line">//HAL_UART_IRQHandler函数中会一根还是，这个函数又会调用HAL_UART_RxCpltCallback函数，实际上HAL_UART_RxCpltCallback函数才是真正的编写中断服务程序的函数。</span><br><span class="line">//HAL_UART_Receive_IT的作用是开启中断，设置接收缓冲以及接收缓冲接收最大数据量 。</span><br><span class="line">//当接收了HAL_UART_Receive_IT中指定数目字节数据后，HAL_UART_RxCpltCallback才会被触发一次</span><br><span class="line"></span><br><span class="line">void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)</span><br><span class="line">&#123;</span><br><span class="line">if(huart-&gt;Instance==USART1)//如果是串口1</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;您收到的数据是：&quot;);</span><br><span class="line">if(HAL_UART_Transmit(&amp;UART1_Handler, (uint8_t *)aRxBuffer, sizeof(aRxBuffer), 5000) != HAL_OK)</span><br><span class="line">&#123;</span><br><span class="line">// Error_Handler();  // Error handling function</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;\r\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">//串口1中断服务程序</span><br><span class="line">void USART1_IRQHandler(void)                </span><br><span class="line">&#123; </span><br><span class="line">HAL_UART_IRQHandler(&amp;UART1_Handler);//调用HAL库中断处理公用函数</span><br><span class="line">HAL_UART_Receive_IT(&amp;UART1_Handler, (unsigned char *)aRxBuffer,sizeof(aRxBuffer)) ;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line">// UART 标准库代码</span><br><span class="line"></span><br><span class="line">#include &quot;stm32f10x.h&quot;</span><br><span class="line">#include &quot;stm32f10x_usart.h&quot;</span><br><span class="line">#include &quot;stdio.h&quot;</span><br><span class="line">//重定向printf函数</span><br><span class="line">#if 1</span><br><span class="line">#pragma import(__use_no_semihosting)             </span><br><span class="line">//标准库需要的支持函数                 </span><br><span class="line">struct __FILE </span><br><span class="line">&#123; </span><br><span class="line">int handle; </span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line">FILE __stdout;       </span><br><span class="line">//定义_sys_exit()以避免使用半主机模式    </span><br><span class="line">void _sys_exit(int x) </span><br><span class="line">&#123; </span><br><span class="line">x = x; </span><br><span class="line">&#125; </span><br><span class="line">//重定义fputc函数 </span><br><span class="line">int fputc(int ch, FILE *f)</span><br><span class="line">&#123;      </span><br><span class="line">while((USART1-&gt;SR&amp;0X40)==0);//循环发送,直到发送完毕   </span><br><span class="line">    USART1-&gt;DR = (unsigned char) ch;      </span><br><span class="line">return ch;</span><br><span class="line">&#125;</span><br><span class="line">#endif </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void NVIC_Configuration(void);</span><br><span class="line">void GPIO_Configuration(void);</span><br><span class="line">void USART_Configuration(u32 bound);</span><br><span class="line">void RCC_Configuration(void);</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">RCC_Configuration();</span><br><span class="line">GPIO_Configuration();</span><br><span class="line"> NVIC_Configuration();</span><br><span class="line">USART_Configuration(9600);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">while(1)</span><br><span class="line">&#123;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/***************************</span><br><span class="line">时钟部分代码</span><br><span class="line">****************************/</span><br><span class="line"></span><br><span class="line">void RCC_Configuration(void)</span><br><span class="line">&#123;</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1|RCC_APB2Periph_GPIOA, ENABLE);//使能USART1，GPIOA时钟</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">/***************************</span><br><span class="line">串口部分代码</span><br><span class="line">****************************/</span><br><span class="line"></span><br><span class="line">//初始化IO 串口1 </span><br><span class="line">void GPIO_Configuration(void)</span><br><span class="line">&#123;</span><br><span class="line">  //GPIO端口设置</span><br><span class="line">  GPIO_InitTypeDef GPIO_InitStructure; </span><br><span class="line">  </span><br><span class="line">//USART1_TX   GPIOA.9</span><br><span class="line">  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9; //PA.9</span><br><span class="line">  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;//复用推挽输出</span><br><span class="line">  GPIO_Init(GPIOA, &amp;GPIO_InitStructure);//初始化GPIOA.9</span><br><span class="line">   </span><br><span class="line">  //USART1_RX  GPIOA.10初始化</span><br><span class="line">  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;//PA10</span><br><span class="line">  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;//浮空输入</span><br><span class="line">  GPIO_Init(GPIOA, &amp;GPIO_InitStructure);//初始化GPIOA.10  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">//UART底层初始化，时钟使能，引脚配置，中断配置</span><br><span class="line">void USART_Configuration(u32 bound)&#123;</span><br><span class="line">USART_InitTypeDef USART_InitStructure;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   //USART 初始化设置</span><br><span class="line"></span><br><span class="line">USART_InitStructure.USART_BaudRate = bound;//串口波特率</span><br><span class="line">USART_InitStructure.USART_WordLength = USART_WordLength_8b;//字长为8位数据格式</span><br><span class="line">USART_InitStructure.USART_StopBits = USART_StopBits_1;//一个停止位</span><br><span class="line">USART_InitStructure.USART_Parity = USART_Parity_No;//无奇偶校验位</span><br><span class="line">USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;//无硬件数据流控制</span><br><span class="line">USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;//收发模式</span><br><span class="line"></span><br><span class="line">  USART_Init(USART1, &amp;USART_InitStructure); //初始化串口1</span><br><span class="line">  USART_Cmd(USART1, ENABLE);                    //使能串口1 </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/***************************</span><br><span class="line">中断部分代码</span><br><span class="line">****************************/</span><br><span class="line">void NVIC_Configuration(void)</span><br><span class="line">&#123;</span><br><span class="line">NVIC_InitTypeDef NVIC_InitStructure;</span><br><span class="line">  //Usart1 NVIC 配置</span><br><span class="line">  NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;</span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=3 ;//抢占优先级3</span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;//子优先级3</span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;//IRQ通道使能</span><br><span class="line">NVIC_Init(&amp;NVIC_InitStructure);//根据指定的参数初始化VIC寄存器</span><br><span class="line"></span><br><span class="line">NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);</span><br><span class="line">USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);//开启串口接受中断</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//USART_GetFlagStatus(USART1,USART_FLAG_RXNE)与USART_GetITStatus(USART1,USART_IT_RXNE)使用起来是一样的</span><br><span class="line">void USART1_IRQHandler(void)                //串口1中断服务程序</span><br><span class="line">&#123;</span><br><span class="line">if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)  //接收中断(接收到的数据必须是0x0d 0x0a结尾)</span><br><span class="line">&#123;</span><br><span class="line">USART_SendData(USART1,USART_ReceiveData(USART1)); </span><br><span class="line">USART_ClearITPendingBit(USART1,USART_IT_RXNE);</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="dma">DMA</h1><p>DMA(Direct MemoryAccess)直接存储器访问，将数据从一个地址空间复制到另一个地址空间，提供在外设和存储器之间或者存储器和存储器之间的高速数据传输。DMA传输方式无需CPU直接控制传输，也没有中断处理方式那样保留现场和恢复现场过程，使得CPU的效率大大提高。</p><p>STM32 最多有 2 个 DMA 控制器（ DMA2仅存在大容量产品和互联型产品中），12个独立的可配置的通道(请求)， DMA1 有7 个通道。DMA2 有 5个通道。每个通道专门用来管理来自于一个或多个外设对存储器访问的请求。还有一个仲裁器来协调各个DMA 请求的优先权。</p><figure><img src="assets/STM32学习.assets/DMA1请求映像.png"alt="DMA1请求映像" /><figcaption aria-hidden="true">DMA1请求映像</figcaption></figure><p><img src="assets/STM32学习.assets/各个通道的DMA1请求一览.png"alt="各个通道的DMA1请求一览" /> <imgsrc="assets/STM32学习.assets/DMA2请求映像.png" alt="DMA2请求映像" /></p><figure><img src="assets/STM32学习.assets/各个通道的DMA2请求一览.png"alt="各个通道的DMA2请求一览" /><figcaption aria-hidden="true">各个通道的DMA2请求一览</figcaption></figure><ul><li><p>DMA常用库函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DMA_DeInit(DMA1_Channel6);//将DMA的通道6寄存器重设为缺省值 </span><br><span class="line">DMA_Init(DMA1_Channel6,&amp;DMA1_Init); //对DMA通道6进行初始化</span><br><span class="line">DMA_ITConfig(DMA1_Channel6,DMA_IT_TC|DMA_IT_HT,ENABLE);//使能DMA通道6的传输完成中断和半传输中断</span><br><span class="line">DMA_Cmd(DMA1_Channel6,ENABLE);           //使DMA通道6开始工作</span><br><span class="line">USART_DMACmd(USART2, USART_DMAReq_Rx, ENABLE);        //开启串口DMA接收</span><br><span class="line">u16 CurrDataCount=DMA_GetCurrDataCounte(DMA1_Channel6) //获取DMA通道当前剩余的待传输数据数目</span><br><span class="line">DMA_GetITStatus(DMA_IT_TC6)!=RESET //查询DMA的通道6是否已经传输完成，产生传输完成中断</span><br><span class="line">DMA_ClearITPendingBit(DMA_IT_TC6);//清除DMA通道6的传输完成中断</span><br></pre></td></tr></table></figure></li><li><p>使用DMA基本步骤：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DMA中约定了源地址和目的地址，以及需要搬运的数据大小(存放于计数器中)后，使能对应的DMA通道，会开始搬运数据，每搬运完成一个字节，计数器减1，传输完成中断置位</span><br></pre></td></tr></table></figure><ul><li>配置RCC寄存器，打开DMA时钟，一般挂载在AHB上</li><li>配置NVIC，比如给予DMA传输完成中断0级抢占优先级</li><li>配置DMA寄存器各个参数</li></ul></li></ul><h2 id="dma串口收发代码">DMA串口收发代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br></pre></td><td class="code"><pre><span class="line">// UART 标准库代码</span><br><span class="line"></span><br><span class="line">#include &quot;stm32f10x.h&quot;</span><br><span class="line">#include &quot;stm32f10x_usart.h&quot;</span><br><span class="line">#include &quot;stdio.h&quot;</span><br><span class="line">//重定向printf函数</span><br><span class="line">#if 1</span><br><span class="line">#pragma import(__use_no_semihosting)             </span><br><span class="line">//标准库需要的支持函数                 </span><br><span class="line">struct __FILE </span><br><span class="line">&#123; </span><br><span class="line">int handle; </span><br><span class="line"></span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line">FILE __stdout;       </span><br><span class="line">//定义_sys_exit()以避免使用半主机模式    </span><br><span class="line">void _sys_exit(int x) </span><br><span class="line">&#123; </span><br><span class="line">x = x; </span><br><span class="line">&#125; </span><br><span class="line">//重定义fputc函数 </span><br><span class="line">int fputc(int ch, FILE *f)</span><br><span class="line">&#123;      </span><br><span class="line">while((USART1-&gt;SR&amp;0X40)==0);//循环发送,直到发送完毕   </span><br><span class="line">    USART1-&gt;DR = (unsigned char) ch;      </span><br><span class="line">return ch;</span><br><span class="line">&#125;</span><br><span class="line">#endif </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//USART2_MAX_TX_LEN和USART2_MAX_RX_LEN在头文件进行了宏定义，分别指USART2最大发送长度和最大接收长度</span><br><span class="line">u8 USART2_TX_BUF[USART2_MAX_TX_LEN]; //发送缓冲,最大USART2_MAX_TX_LEN字节</span><br><span class="line">u8 u1rxbuf[USART2_MAX_RX_LEN];//发送数据缓冲区1</span><br><span class="line">u8 u2rxbuf[USART2_MAX_RX_LEN];//发送数据缓冲区2</span><br><span class="line">u8 witchbuf=0;                  //标记当前使用的是哪个缓冲区,0：使用u1rxbuf；1：使用u2rxbuf</span><br><span class="line">u8 USART2_TX_FLAG=0;//USART2发送标志，启动发送时置1</span><br><span class="line">u8 USART2_RX_FLAG=0;//USART2接收标志，启动接收时置1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void NVIC_Configuration(void);</span><br><span class="line">void GPIO_Configuration(void);</span><br><span class="line">void USART_Configuration(u32 bound);</span><br><span class="line">void RCC_Configuration(void);</span><br><span class="line">void DMA_Configuration(void);</span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">RCC_Configuration();</span><br><span class="line">GPIO_Configuration();</span><br><span class="line"> NVIC_Configuration();</span><br><span class="line">USART_Configuration(9600);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">while(1)</span><br><span class="line">&#123;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/***************************</span><br><span class="line">时钟部分代码</span><br><span class="line">****************************/</span><br><span class="line"></span><br><span class="line">void RCC_Configuration(void)</span><br><span class="line">&#123;</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1|RCC_APB2Periph_GPIOA, ENABLE);//使能USART1，GPIOA时钟</span><br><span class="line">RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1,ENABLE);//使能DMA1时钟</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">/***************************</span><br><span class="line">串口部分代码</span><br><span class="line">****************************/</span><br><span class="line"></span><br><span class="line">//初始化IO 串口1 </span><br><span class="line">void GPIO_Configuration(void)</span><br><span class="line">&#123;</span><br><span class="line">  //GPIO端口设置</span><br><span class="line">  GPIO_InitTypeDef GPIO_InitStructure; </span><br><span class="line">  </span><br><span class="line">//USART1_TX   GPIOA.9</span><br><span class="line">  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9; //PA.9</span><br><span class="line">  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;//复用推挽输出</span><br><span class="line">  GPIO_Init(GPIOA, &amp;GPIO_InitStructure);//初始化GPIOA.9</span><br><span class="line">   </span><br><span class="line">  //USART1_RX  GPIOA.10初始化</span><br><span class="line">  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;//PA10</span><br><span class="line">  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;//浮空输入</span><br><span class="line">  GPIO_Init(GPIOA, &amp;GPIO_InitStructure);//初始化GPIOA.10  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">//UART底层初始化，时钟使能，引脚配置，中断配置</span><br><span class="line">void USART_Configuration(u32 bound)&#123;</span><br><span class="line">USART_InitTypeDef USART_InitStructure;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   //USART 初始化设置</span><br><span class="line"></span><br><span class="line">USART_InitStructure.USART_BaudRate = bound;//串口波特率</span><br><span class="line">USART_InitStructure.USART_WordLength = USART_WordLength_8b;//字长为8位数据格式</span><br><span class="line">USART_InitStructure.USART_StopBits = USART_StopBits_1;//一个停止位</span><br><span class="line">USART_InitStructure.USART_Parity = USART_Parity_No;//无奇偶校验位</span><br><span class="line">USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;//无硬件数据流控制</span><br><span class="line">USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;//收发模式</span><br><span class="line"></span><br><span class="line">    USART_ITConfig(USART2, USART_IT_IDLE, ENABLE);//开启检测串口空闲状态中断</span><br><span class="line">    USART_ClearFlag(USART2,USART_FLAG_TC);//清除USART2标志位</span><br><span class="line">    USART_Init(USART1, &amp;USART_InitStructure); //初始化串口1</span><br><span class="line">    USART_Cmd(USART1, ENABLE);                    //使能串口1 </span><br><span class="line"></span><br><span class="line">    USART_DMACmd(USART2, USART_DMAReq_Tx, ENABLE);        //开启串口DMA发送</span><br><span class="line">    USART_DMACmd(USART2, USART_DMAReq_Rx, ENABLE);        //开启串口DMA接收</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/***************************</span><br><span class="line">中断部分代码</span><br><span class="line">****************************/</span><br><span class="line">void NVIC_Configuration(void)</span><br><span class="line">&#123;</span><br><span class="line">NVIC_InitTypeDef NVIC_InitStructure;</span><br><span class="line">    //Usart1 NVIC 配置</span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;</span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=3 ;//抢占优先级3</span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;//子优先级3</span><br><span class="line">    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;//IRQ通道使能</span><br><span class="line">    NVIC_Init(&amp;NVIC_InitStructure);//根据指定的参数初始化VIC寄存器</span><br><span class="line"></span><br><span class="line">    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">//DMA1通道6 NVIC 配置</span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannel = DMA1_Channel6_IRQn;//NVIC通道设置</span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 3 ;//抢占优先级</span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;//子优先级</span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;//IRQ通道使能</span><br><span class="line">NVIC_Init(&amp;NVIC_InitStructure);//根据指定的参数初始化NVIC寄存器</span><br><span class="line"> </span><br><span class="line">//DMA1通道7 NVIC 配置</span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannel = DMA1_Channel7_IRQn;//NVIC通道设置</span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 3 ;//抢占优先级</span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;//子优先级</span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;//IRQ通道使能</span><br><span class="line">NVIC_Init(&amp;NVIC_InitStructure);//根据指定的参数初始化NVIC寄存器</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//USART_GetFlagStatus(USART1,USART_FLAG_RXNE)与USART_GetITStatus(USART1,USART_IT_RXNE)使用起来是一样的</span><br><span class="line">void USART1_IRQHandler(void)                //串口1中断服务程序</span><br><span class="line">&#123;</span><br><span class="line">if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)  //接收中断(接收到的数据必须是0x0d 0x0a结尾)</span><br><span class="line">&#123;</span><br><span class="line">USART_SendData(USART1,USART_ReceiveData(USART1)); </span><br><span class="line">USART_ClearITPendingBit(USART1,USART_IT_RXNE);</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/***************************</span><br><span class="line">DMA部分代码</span><br><span class="line">****************************/</span><br><span class="line">void DMA_Configuration(void)</span><br><span class="line">&#123;</span><br><span class="line">DMA_InitTypeDef DMA1_Init;</span><br><span class="line">NVIC_InitTypeDef NVIC_InitStructure;</span><br><span class="line">DMA_DeInit(DMA1_Channel6);//将DMA的通道6寄存器重设为缺省值 </span><br><span class="line"></span><br><span class="line">//DMA_USART2_RX  USART2-&gt;RAM的数据传输</span><br><span class="line">DMA1_Init.DMA_PeripheralBaseAddr = (u32)(&amp;USART2-&gt;DR);//外设地址</span><br><span class="line">DMA1_Init.DMA_MemoryBaseAddr = (u32)u1rxbuf;            //内存(接收缓冲区)基地址</span><br><span class="line">DMA1_Init.DMA_DIR = DMA_DIR_PeripheralSRC;//数据传输方向，从外设读取到内存</span><br><span class="line">DMA1_Init.DMA_BufferSize = USART2_MAX_RX_LEN;//DMA通道的DMA缓存的大小</span><br><span class="line">DMA1_Init.DMA_PeripheralInc = DMA_PeripheralInc_Disable;//外设地址寄存器不变（不递增)</span><br><span class="line">DMA1_Init.DMA_MemoryInc = DMA_MemoryInc_Enable;//内存地址寄存器递增</span><br><span class="line">DMA1_Init.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;//外设数据宽度为8位</span><br><span class="line">DMA1_Init.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;//内存数据宽度为8位</span><br><span class="line">DMA1_Init.DMA_Mode = DMA_Mode_Normal;//工作在正常缓存模式</span><br><span class="line">DMA1_Init.DMA_Priority = DMA_Priority_High; //DMA通道x拥有最高优先级 </span><br><span class="line">DMA1_Init.DMA_M2M = DMA_M2M_Disable;//DMA通道x没有设置为内存到内存传输</span><br><span class="line"> </span><br><span class="line">DMA_Init(DMA1_Channel6,&amp;DMA1_Init); //对DMA通道6进行初始化</span><br><span class="line"></span><br><span class="line">//DMA_USART2_TX  RAM-&gt;USART2的数据传输</span><br><span class="line">DMA_DeInit(DMA1_Channel7);//将DMA的通道7寄存器重设为缺省外设地址启动传输前装入实际RAM地址</span><br><span class="line">DMA1_Init.DMA_MemoryBaseAddr = (u32)USART2_TX_BUF;              //内存(发送缓冲区)基地址</span><br><span class="line">DMA1_Init.DMA_DIR = DMA_DIR_PeripheralDST; //数据传输方向，从内存发送到外设</span><br><span class="line">DMA1_Init.DMA_BufferSize = USART2_MAX_TX_LEN;//DMA通道的DMA缓存的大小</span><br><span class="line">DMA1_Init.DMA_PeripheralInc = DMA_PeripheralInc_Disable;//外设地址寄存器不变</span><br><span class="line">DMA1_Init.DMA_MemoryInc = DMA_MemoryInc_Enable;//内存地址寄存器递增</span><br><span class="line">DMA1_Init.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;//数据宽度为8位</span><br><span class="line">DMA1_Init.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;//数据宽度为8位</span><br><span class="line">DMA1_Init.DMA_Mode = DMA_Mode_Normal;//工作在正常模式</span><br><span class="line">DMA1_Init.DMA_Priority = DMA_Priority_High; //DMA通道x拥有高优先级 </span><br><span class="line">DMA1_Init.DMA_M2M = DMA_M2M_Disable;//DMA通道x没有设置为内存到内存传输</span><br><span class="line"></span><br><span class="line">DMA_Init(DMA1_Channel7,&amp;DMA1_Init); //对DMA通道7进行初始化</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DMA_ITConfig(DMA1_Channel6,DMA_IT_TC,ENABLE);//开USART2 Rx DMA中断</span><br><span class="line">DMA_ITConfig(DMA1_Channel7,DMA_IT_TC,ENABLE);//开USART2 Tx DMA中断</span><br><span class="line"></span><br><span class="line">DMA_Cmd(DMA1_Channel6,DISABLE);           //使DMA通道6停止工作</span><br><span class="line">DMA_Cmd(DMA1_Channel7,DISABLE);           //使DMA通道7停止工作</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//DMA 发送应用源码</span><br><span class="line">void DMA_USART2_Tx_Data(u8 *buffer, u32 size)</span><br><span class="line">&#123;</span><br><span class="line">while(USART2_TX_FLAG)&#123;&#125;;//等待上一次发送完成（USART2_TX_FLAG为1即还在发送数据）,实际应用中，传输数据期间，可以执行另外的任务</span><br><span class="line">USART2_TX_FLAG=1;//USART2发送标志（启动发送）</span><br><span class="line">DMA1_Channel7-&gt;CMAR  = (uint32_t)buffer;//设置要发送的数据地址,记住需要先失能DMA通道，显然能走到这里通道已经失能</span><br><span class="line">DMA1_Channel7-&gt;CNDTR = size;    //设置要发送的字节数目</span><br><span class="line">DMA_Cmd(DMA1_Channel7, ENABLE);//开始DMA发送</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//DMA1通道7中断</span><br><span class="line">void DMA1_Channel7_IRQHandler(void)</span><br><span class="line">&#123;</span><br><span class="line">if(DMA_GetITStatus(DMA1_IT_TC7)!= RESET)//DMA接收完成标志</span><br><span class="line">&#123;</span><br><span class="line">DMA_ClearITPendingBit(DMA1_IT_TC7); //清除中断标志 </span><br><span class="line">USART_ClearFlag(USART2,USART_FLAG_TC);//清除串口2的标志位</span><br><span class="line">DMA_Cmd(DMA1_Channel7, DISABLE );   //关闭USART2 TX DMA1 所指示的通道</span><br><span class="line">USART2_TX_FLAG=0;//USART2发送标志(关闭)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//DMA一般接收有两个缓冲区，</span><br><span class="line">//接收定长数据使用传输完成中断，接收</span><br><span class="line">//处理DMA1 通道6的接收完成中断</span><br><span class="line">//定长数据</span><br><span class="line">void DMA1_Channel6_IRQHandler(void)</span><br><span class="line">&#123;</span><br><span class="line">u8 *p;</span><br><span class="line">if(DMA_GetITStatus(DMA1_IT_TC6)!= RESET)//DMA接收完成标志</span><br><span class="line">&#123;</span><br><span class="line">DMA_ClearITPendingBit(DMA1_IT_TC6); //清除中断标志 </span><br><span class="line">USART_ClearFlag(USART2,USART_FLAG_TC);//清除USART2标志位</span><br><span class="line">DMA_Cmd(DMA1_Channel6, DISABLE );   //关闭USART2 TX DMA1 所指示的通道；</span><br><span class="line"></span><br><span class="line">//接收不定长数据需要增加:</span><br><span class="line">//USART2_RX_LEN = USART2_MAX_RX_LEN - DMA1_Channel6-&gt;CNDTR;//获得接收到的字节数</span><br><span class="line"></span><br><span class="line">if(witchbuf)                        //之前用的u2rxbuf，切换为u1rxbuf</span><br><span class="line">&#123;</span><br><span class="line">p=u2rxbuf;//先保存前一次数据地址再切换缓冲区</span><br><span class="line">DMA1_Channel6-&gt;CMAR=(u32)u1rxbuf;//切换为u1rxbuf缓冲区地址</span><br><span class="line">witchbuf=0;                     //下一次切换为u2rxbuf</span><br><span class="line">&#125;else                               //之前用的u1rxbuf，切换为u2rxbuf</span><br><span class="line">&#123;</span><br><span class="line">p=u1rxbuf;//先保存前一次数据地址再切换缓冲区</span><br><span class="line">DMA1_Channel6-&gt;CMAR=(u32)u2rxbuf;//切换为u2rxbuf缓冲区地址</span><br><span class="line">witchbuf=1;                     //下一次切换为u1rxbuf</span><br><span class="line">&#125;</span><br><span class="line">DMA1_Channel6-&gt;CNDTR = USART2_MAX_RX_LEN;//DMA通道的DMA缓存的大小</span><br><span class="line">DMA_Cmd(DMA1_Channel6, ENABLE);     //使能USART2 TX DMA1 所指示的通道</span><br><span class="line"></span><br><span class="line">//******************↓↓↓↓↓这里作数据处理↓↓↓↓↓******************//</span><br><span class="line"></span><br><span class="line">DMA_USART2_Tx_Data(p,USART2_MAX_RX_LEN);</span><br><span class="line">、、</span><br><span class="line">//******************↑↑↑↑↑这里作数据处理↑↑↑↑↑******************//</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//不定长数据</span><br><span class="line"></span><br><span class="line">//串口2中断函数</span><br><span class="line">void USART2_IRQHandler(void)                </span><br><span class="line">&#123;</span><br><span class="line">u8 *p;</span><br><span class="line">//增加</span><br><span class="line">u8 USART2_RX_LEN = 0;//接收数据长度</span><br><span class="line"></span><br><span class="line">if(USART_GetITStatus(USART2, USART_IT_IDLE) != RESET)//串口2空闲中断</span><br><span class="line">&#123;</span><br><span class="line">//增加</span><br><span class="line">USART_ReceiveData(USART2); //清除串口2空闲中断IDLE标志位</span><br><span class="line"></span><br><span class="line">USART_ClearFlag(USART2,USART_FLAG_TC);//清除USART2标志位</span><br><span class="line">DMA_Cmd(DMA1_Channel6, DISABLE );   //关闭USART2 TX DMA1 所指示的通道</span><br><span class="line">//修改</span><br><span class="line">USART2_RX_LEN = USART2_MAX_RX_LEN - DMA1_Channel6-&gt;CNDTR;//获得接收到的字节数</span><br><span class="line">if(witchbuf)                        //之前用的u2rxbuf，切换为u1rxbuf</span><br><span class="line">&#123;</span><br><span class="line">p=u2rxbuf;//先保存前一次数据地址再切换缓冲区</span><br><span class="line">DMA1_Channel6-&gt;CMAR=(u32)u1rxbuf;//切换为u1rxbuf缓冲区地址</span><br><span class="line">witchbuf=0;                     //下一次切换为u2rxbuf</span><br><span class="line">&#125;else                               //之前用的u1rxbuf，切换为u2rxbuf</span><br><span class="line">&#123;</span><br><span class="line">p=u1rxbuf;//先保存前一次数据地址再切换缓冲区</span><br><span class="line">DMA1_Channel6-&gt;CMAR=(u32)u2rxbuf;//切换为u2rxbuf缓冲区地址</span><br><span class="line">witchbuf=1;                     //下一次切换为u1rxbuf</span><br><span class="line">&#125;</span><br><span class="line">DMA1_Channel6-&gt;CNDTR = USART2_MAX_RX_LEN;//DMA通道的DMA缓存的大小</span><br><span class="line">DMA_Cmd(DMA1_Channel6, ENABLE);     //使能USART2 TX DMA1 所指示的通道</span><br><span class="line"></span><br><span class="line">//******************↓↓↓↓↓这里作数据处理↓↓↓↓↓******************//</span><br><span class="line"></span><br><span class="line">//修改：</span><br><span class="line">DMA_USART2_Tx_Data(p,USART2_RX_LEN);</span><br><span class="line"></span><br><span class="line">//******************↑↑↑↑↑这里作数据处理↑↑↑↑↑******************//</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="stm32中断">STM32中断</h1><p>STM32有68个可屏蔽中断通道，包括EXTI、TIM、ADC等等。使用<strong>NVIC</strong>统一管理中断。STM32的中断优先级可以分为抢占优先级和响应优先级。</p><blockquote><p>抢占优先级是优先级高的可以在其他中断执行过程中夺得MCU使用权的，响应优先级则是在多个中断同时触发时，获得MCU使用权的优先级。STM32总共有4位数据进行设置抢占和响应优先级，这4位可以进行切分，分为高n位的抢占优先级，和低4-n位的响应优先级。</p></blockquote><p>中断：要进入NVIC,有相应的中断服务函数，需要CPU处理事件：不需要进入NVIC，仅用于内部硬件自动控制的，如：TMI,DMA,ADC</p><h2 id="exti外部中断">EXTI外部中断</h2><p>EXTI可以监测指定的GPIO口的电平信号，在其电平变化时，向NVIC申请中断。支持的触发方式有：上升沿触发，下降沿触发，双边沿触发，软件触发</p><h3 id="使用步骤">使用步骤</h3><blockquote><p>在STM32中GPIO外部中断信号的流程图如下：信号----&gt;GPIO---&gt;AFIO(F1) / SYSCFG(F4/F7/H7)---&gt;EXTI---&gt;NVIC---&gt;CPU</p></blockquote><h4 id="step1使能gpio时钟">Step1：使能GPIO时钟</h4><blockquote><p>在STM32中，为了低功耗，几乎所有的外设时钟默认情况下都是关闭的，所以使用外部中断，需要先打开所使用到的GPIO口对应的时钟。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;__HAL_RCC_GPIOx_CLK_ENABLE();</span><br></pre></td></tr></table></figure></blockquote><h4id="step2设置gpioafiosyscfgexti">Step2：设置GPIO/AFIO(SYSCFG)/EXTI</h4><blockquote><p>EXTI(External interrupt/eventController)外部中断事件控制器，包含多条产生事件/中断请求的边沿检测器，即多条EXTI线。每条EXTI线可以单独配置：类型（中断、事件），触发方式（上升沿，下降沿），支持软件触发、开启/屏蔽、挂起</p><p>比如EXTI线0-15对应于GPIO0-15，EXTI16对应PVD输出，等等。</p><p>所谓的对应关系，IO中断是使用EXTI0-15。EXTI0对应于GPIOPIN0,而PA0~PG0共用这一根线，那么要将EXTI0与哪个对应？这就是在配置EXTI和IO的对应关系，从这里可以知道，同一编号的IO中断不可以同时使用。</p><p><strong>使用IO中断需要配置AFIO(F1)(Alternate FunctionIO)复用IO</strong>，如果是F4/F7/H7，则配置SYSCFG，它们功能相似。AFIO可以用来调试IO配置(SWD/JTAG)，重映射配置，外部中断配置。<strong>在使用AFIO前一定要打开它的时钟</strong>，RCC_APB2ENR寄存器的的AFIO时钟</p><p>关于EXTI屏蔽，上/下沿触发等：</p><figure><img src="assets/STM32学习.assets/EXTI工作原理图.png"alt="EXTI工作原理图" /><figcaption aria-hidden="true">EXTI工作原理图</figcaption></figure><p>这是EXTI的工作原理图。当输入线传来信号时，会先经过边沿检测电路，上升/下降沿触发选择寄存器会控制电路的检测情况，当满足要求，高电平会经过或门（如果打开了软件中断，那么软件中断也可以通过这个，传递中断信号），经过后，会将请求挂起寄存器置1，如果中断屏蔽寄存器是开放中断的（为1），那经与门，就可以得到高电平，将信号送到NVIC。如果事件屏蔽寄存器是开发中断信号的（为1），那么就可以通过脉冲发生器控制一些硬件的中断。</p></blockquote><h5id="step2如果用hal库hal_gpio_init函数一步到位">Step2：如果用HAL库，HAL_GPIO_Init函数一步到位</h5><blockquote><p>HAL_GPIO_Init() 库函数已经包括了Step2.1-2.4全部内容</p></blockquote><h5 id="step2.1设置gpio输入模式">Step2.1：设置GPIO输入模式</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h5 id="step2.2设置afiosyscfg时钟">Step2.2：设置AFIO/SYSCFG时钟</h5><blockquote><p>设置代码：</p><p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__HAL_RCC_AFIO_CLK_ENABLE();使能AFIO时钟</span><br></pre></td></tr></table></figure></p></blockquote><h5id="step2.3设置exti和io对应关系">Step2.3：设置EXTI和IO对应关系。</h5><h5 id="step2.4-设置exti屏蔽上下沿触发">Step2.4设置EXTI屏蔽，上/下沿触发</h5><h4 id="step3设置nvic">Step3：设置NVIC</h4><h5 id="nvic">NVIC</h5><blockquote><p>NVIC(Nested vectored interruptcontroller)嵌套向量中断控制器，总共可以支持256个中断，256个优先级，允许裁剪。所以STM32的不同系列的中断数目，优先级不同。</p><p>NVIC负责统一管理中断，进行中断的使能，和优先级控制。许多中断信号发往CPU，如果由CPU负责按优先级处理开启的中断，过于浪费CPU资源且麻烦，于是通过NVIC统一管理，给部分中断使能，并按照优先级的顺序将中断信号发送到CPU，CPU就只要处理中断即可。</p><p>中断信号在NVIC的处理流程：</p><p>应用程序中断及复位控制寄存器AIRCR寄存器负责管理响应优先级与与抢占优先级的位数切分。</p><blockquote><p>内核中断信号经SHPR控制，发往CPU外部中断信号----&gt;ISER/ICER中断使/除能寄存器----&gt;IPR中断优先寄存器寄存器---&gt;CPU</p></blockquote></blockquote><h5 id="step3.1-设置中断分组aircr">Step3.1 设置中断分组AIRCR</h5><blockquote><p>应用程序中断及复位控制寄存器AIRCR寄存器负责管理响应优先级与与抢占优先级的位数切分。</p><p>在STM32中只使用了IPR的4位用来设置优先级，优先级有抢占与响应两种，4位中前几位是抢占优先级，后几位是响应优先级，由AIRCR控制</p><p>比如AIRCR中控制优先级的几位是111，则表示0位抢占，4位响应，在STM32中，在STM32中总共有5种分组方式：0-4，...,4-0。</p><p>IPR寄存器则是用于配置优先级的大小</p><p>设置代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">设置中断分组AIRCR：HAL_NVIC_SetPriorityGrouping()</span><br></pre></td></tr></table></figure></blockquote><h5 id="step3.2-设置中段优先级">Step3.2 设置中段优先级</h5><blockquote><p>相关知识在 step3.1 设置中断分组AIRCR 设置代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">设置中断优先级IPRx:HAL_NVIC_SetPriority()</span><br></pre></td></tr></table></figure></blockquote><h5 id="step3.3-使能中断">Step3.3 使能中断</h5><blockquote><p>设置代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使能中断ISERx:HAL_NVIC_EnableIRQ</span><br></pre></td></tr></table></figure></blockquote><h4 id="step4设计中断服务函数">Step4：设计中断服务函数</h4><blockquote><p>首先我们编写的中断服务函数（硬件）时，应该与官方文件中规定的中断服务函数名比如EXTIx_IRQHandler()一致。HAL库：</p><ul><li><p>EXTIx_IRQHandler()的代码只是调用了HAL_GPIO_EXTI_IRQHandler()函数;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">EXTI15_10_IRQHandler</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>HAL_GPIO_EXTI_IRQHandler函数会先判断该GPIO口的是否发生中断（中断标志位是否为1），如果是，清除中断，并调用回调函数HAL_GPIO_EXTI_Callback()函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//官方文档中的</span><br><span class="line">void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)&#123;</span><br><span class="line">if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin)!=RESET)&#123;</span><br><span class="line">__HAL_GPIO_EXTI_CLEAT_IT(GPIO_Pin);</span><br><span class="line">HAL_GPIO_EXTI_Callback(GPIO_Pin);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>HAL_GPIO_EXTI_Callback(uint16_tGPIO_Pin)这个函数是真正执行具体功能的函数，该函数需要用户重写。</p></li><li><p><strong>总结</strong></p><ul><li><p>使用HAL库需要按照上述格式写中断服务函数如：EXTIx_IRQHandler()</p><p>然后写执行中断具体功能的函数HAL_GPIO_EXTI_Callback(uint16_tGPIO_Pin)</p><p>可以不清除标志位</p></li><li><p>也可以仿照上述流程自己写EXTIx_IRQHandler()，功能，清标志等都写在里面，不调用回调函数</p></li></ul></li></ul></blockquote><h3 id="外部中断点灯示例">外部中断点灯示例</h3><p>按键key0：一端接地，一端接PC5。故PC5使用上拉输入模式，按键松开，读到高电平，按下，读到低电平。小灯LED0：正极接电源，负极接PA8。故PA8采用推挽输出，输出低电平，小灯亮。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********************************************************************</span></span><br><span class="line"><span class="comment">点灯代码</span></span><br><span class="line"><span class="comment">**********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f1xx_hal.h&quot;</span>   </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED0_Pin GPIO_PIN_8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED0_GPIO_Port GPIOA</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KEY0_Pin GPIO_PIN_5</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KEY0_GPIO_Port GPIOC</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KEY0_EXTI_IRQn EXTI9_5_IRQn</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KEY0_Press GPIO_PIN_RESET</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KEY0_NotPress GPIO_PIN_SET</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED0_ON() HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin,GPIO_PIN_RESET)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED0_OFF() HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED0_Toggle() HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin)</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">exti_init</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">SystemClock_Config</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123; </span><br><span class="line">HAL_Init();<span class="comment">//初始化HAL库    </span></span><br><span class="line">SystemClock_Config();  <span class="comment">//设置时钟,72M</span></span><br><span class="line">exti_init();</span><br><span class="line">LED0_OFF();</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**********************************************************************</span></span><br><span class="line"><span class="comment">中断代码</span></span><br><span class="line"><span class="comment">**********************************************************************/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">exti_init</span><span class="params">()</span>&#123;</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStruct=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//开启开关和按键的时钟</span></span><br><span class="line">__HAL_RCC_GPIOC_CLK_ENABLE();</span><br><span class="line">__HAL_RCC_GPIOA_CLK_ENABLE();</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置GPIO输入模式，AFIO时钟，EXTI</span></span><br><span class="line">GPIO_InitStruct.Pin=LED0_Pin;</span><br><span class="line">GPIO_InitStruct.Mode=GPIO_MODE_OUTPUT_PP;</span><br><span class="line">GPIO_InitStruct.Pull=GPIO_NOPULL;</span><br><span class="line">GPIO_InitStruct.Speed=GPIO_SPEED_FREQ_HIGH;</span><br><span class="line">HAL_GPIO_Init(LED0_GPIO_Port,&amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line">GPIO_InitStruct.Pin=KEY0_Pin;</span><br><span class="line">GPIO_InitStruct.Mode=GPIO_MODE_IT_FALLING;<span class="comment">//采用外部中断，下降沿触发</span></span><br><span class="line">GPIO_InitStruct.Pull=GPIO_PULLUP;</span><br><span class="line">HAL_GPIO_Init(KEY0_GPIO_Port,&amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置NVIC</span></span><br><span class="line">HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);</span><br><span class="line">HAL_NVIC_SetPriority(EXTI9_5_IRQn,<span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中断服务函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">EXTI9_5_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    HAL_GPIO_EXTI_IRQHandler(KEY0_Pin );<span class="comment">//调用中断处理公用函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重写回调函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_GPIO_EXTI_Callback</span><span class="params">(<span class="type">uint16_t</span> GPIO_Pin)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//HAL_Delay(100);</span></span><br><span class="line">    <span class="keyword">if</span>(GPIO_Pin==KEY0_Pin)&#123;</span><br><span class="line"><span class="keyword">if</span>(HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin)==KEY0_Press)&#123;</span><br><span class="line">LED0_Toggle();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//系统时钟时钟</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SystemClock_Config</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">HAL_StatusTypeDef ret = HAL_OK;</span><br><span class="line">RCC_OscInitTypeDef RCC_OscInitStructure; </span><br><span class="line">RCC_ClkInitTypeDef RCC_ClkInitStructure;</span><br><span class="line"></span><br><span class="line">RCC_OscInitStructure.OscillatorType=RCC_OSCILLATORTYPE_HSE;    <span class="comment">//时钟源为HSE</span></span><br><span class="line">RCC_OscInitStructure.HSEState=RCC_HSE_ON;                      <span class="comment">//打开HSE</span></span><br><span class="line">RCC_OscInitStructure.HSEPredivValue=RCC_HSE_PREDIV_DIV1;<span class="comment">//HSE预分频</span></span><br><span class="line">RCC_OscInitStructure.PLL.PLLState=RCC_PLL_ON;<span class="comment">//打开PLL</span></span><br><span class="line">RCC_OscInitStructure.PLL.PLLSource=RCC_PLLSOURCE_HSE;<span class="comment">//PLL时钟源选择HSE</span></span><br><span class="line">RCC_OscInitStructure.PLL.PLLMUL=RCC_PLL_MUL9; <span class="comment">//主PLL倍频因子</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(HAL_RCC_OscConfig(&amp;RCC_OscInitStructure)!=HAL_OK) &#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//选中PLL作为系统时钟源并且配置HCLK,PCLK1和PCLK2</span></span><br><span class="line">RCC_ClkInitStructure.ClockType=(RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2);</span><br><span class="line">RCC_ClkInitStructure.SYSCLKSource=RCC_SYSCLKSOURCE_PLLCLK;<span class="comment">//设置系统时钟时钟源为PLL</span></span><br><span class="line">RCC_ClkInitStructure.AHBCLKDivider=RCC_SYSCLK_DIV1;<span class="comment">//AHB分频系数为1</span></span><br><span class="line">RCC_ClkInitStructure.APB1CLKDivider=RCC_HCLK_DIV2; <span class="comment">//APB1分频系数为2</span></span><br><span class="line">RCC_ClkInitStructure.APB2CLKDivider=RCC_HCLK_DIV1; <span class="comment">//APB2分频系数为1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (HAL_RCC_ClockConfig(&amp;RCC_ClkInitStructure,FLASH_LATENCY_2) != HAL_OK)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="iwdg">IWDG</h1><ul><li>IWDG(Independentwatchdog)本质上是一个可以产生系统<strong>复位</strong>信号的计数器，主要用于解决CPU异常，程序故障等问题。</li><li>IWDG是一个递减的计数器，由独立的RC振荡器(LSI)提供时钟（可在待机/停止模式下运行），看门狗被激活后，计数器不断递减，直到计数为0x000时，产生复位。如果在此期间，喂狗（重装载计数器的值），就会重新开始计数，不会复位。</li><li>看门狗的使用RC振荡器，时钟不够精确，一般用于要求高稳定，对时间精确要求不严的场合。</li></ul><p>​</p><h2 id="iwdg的工作原理">IWDG的工作原理</h2><figure><img src="assets/STM32学习.assets/IWDG工作原理简图.png"alt="IWDG工作原理简图" /><figcaption aria-hidden="true">IWDG工作原理简图</figcaption></figure><figure><img src="assets/STM32学习.assets/IWDG框图.png" alt="IWDG框图" /><figcaption aria-hidden="true">IWDG框图</figcaption></figure><ul><li><strong>预分频寄存器：</strong>用于设置预分频系数</li><li><strong>状态寄存器</strong>：显示看门狗的状态，比如预分频值是否更新结束，重装载值是否更新结束。比如只有预分频值更新结束后，才可以修改重装载寄存器，读取的重装载值才有效。</li><li><strong>重装载寄存器</strong>：用于重载递减计数器的值，<strong>最大为4096</strong>。当收到键寄存器的喂狗指令会喂狗。</li><li><strong>键寄存器：</strong>用于启动看门狗，喂狗，使能IWDG_PR,IWDG_RLR的访问许可。写入0xAAAA可以让重装载寄存器喂狗，写入0x5555是使能访问许可，写入0xCCCC是启动看门狗。</li></ul><p>LSI提供的时钟信号经过预分频器分频，得到看门狗时钟频率IWDGCLK，给递减计数器提供时钟，当递减计数器计数到0，就会进行复位。同时当预分频寄存器，重装载寄存器正在更新中与更新结束时，都会通知状态寄存器，改变其值。</p><h2 id="iwdg预分频器的溢出时间计算">IWDG预分频器的溢出时间计算</h2><p>LSI的时钟频率不精确，F1系列在30KHZ到60KHZ之间变化，通常我们取40KHZ的典型值，当然具体的还是请参考数据手册。</p><p><span class="math display">\[\begin{aligned}&amp;溢出时间计算公式：T_{out}=\frac{psc*rlr}{f_{IWDG}} \\&amp;T_{out}是溢出时间、f_{IWDG}是是时钟源频率、psc是预分频系数，rlr是看门狗的重装载值。\end{aligned}\]</span></p><p>关于预分频系数如何选择，不同的预分频系数对应的最短溢出时间（计数1次）和最长溢出时间不同（计数4096次）不同，我们应根据需要的溢出时间选择合适的。参考手册里有对应表格，可以自己算，也可查表。</p><h2 id="看门狗的配置">看门狗的配置</h2><h3 id="寄存器配置">寄存器配置</h3><p>这是看门狗的寄存器配置步骤，具体的建议参考相关参考手册。</p><figure><img src="assets/STM32学习.assets/独立看门狗的寄存器配置操作步骤.png"alt="独立看门狗的寄存器配置操作步骤" /><figcaptionaria-hidden="true">独立看门狗的寄存器配置操作步骤</figcaption></figure><h3 id="hal库配置">HAL库配置</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">这两个函数定义于文件如stm32f1xx_hal_iwdg.c中,对应的.h文件有参数的定义及参考值。</span><br><span class="line">HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)：使能IWDG,取消PR/RLR寄存器写保护，设置预分频系数和重装载值，</span><br><span class="line">HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)：喂狗，即写入<span class="number">0xAAAA</span>到IWDG_KR</span><br><span class="line"></span><br><span class="line">.h文件：</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="comment">//IWDG的寄存器的基地址,可以在stm32f103xe.h中找到  #define IWDG    ((IWDG_TypeDef *)IWDG_BASE)   IWDG_TypeDef是IWDG的寄存器结构体</span></span><br><span class="line">  IWDG_TypeDef *Instance;   </span><br><span class="line">  <span class="comment">//IWDG初始值</span></span><br><span class="line">  IWDG_InitTypeDef Init;      </span><br><span class="line">&#125; IWDG_HandleTypeDef;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">uint32_t</span> Prescaler; <span class="comment">//分频系数</span></span><br><span class="line">  <span class="type">uint32_t</span> Reload;  <span class="comment">//重装载值</span></span><br><span class="line">&#125; IWDG_InitTypeDef;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;delay.h&quot;</span><br><span class="line"></span><br><span class="line">#include &quot;stm32f1xx_hal.h&quot;   </span><br><span class="line">#include&quot;stdio.h&quot;</span><br><span class="line"></span><br><span class="line">//串口配置句柄，发送缓冲区和接收缓冲区</span><br><span class="line">UART_HandleTypeDef huart1;</span><br><span class="line">uint8_t TxBuf[]=&quot;Hello World&quot;;</span><br><span class="line">uint8_t RxBuf[4];</span><br><span class="line"></span><br><span class="line">//重定向printf函数</span><br><span class="line">#if 1</span><br><span class="line">#pragma import(__use_no_semihosting)             </span><br><span class="line">//标准库需要的支持函数                 </span><br><span class="line">struct __FILE </span><br><span class="line">&#123; </span><br><span class="line">int handle; </span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line">FILE __stdout;       </span><br><span class="line">//定义_sys_exit()以避免使用半主机模式    </span><br><span class="line">void _sys_exit(int x) </span><br><span class="line">&#123; </span><br><span class="line">x = x; </span><br><span class="line">&#125; </span><br><span class="line">//重定义fputc函数 </span><br><span class="line">int fputc(int ch, FILE *f)</span><br><span class="line">&#123;      </span><br><span class="line">while((USART1-&gt;SR&amp;0X40)==0);//循环发送,直到发送完毕   </span><br><span class="line">    USART1-&gt;DR = (unsigned char) ch;      </span><br><span class="line">return ch;</span><br><span class="line">&#125;</span><br><span class="line">#endif </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//声明函数</span><br><span class="line">void SystemClock_Config(void);</span><br><span class="line">static void MX_USART1_UART_Init(void);</span><br><span class="line">void IWDG_Init(void);</span><br><span class="line">void IWDG_Feed(void);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**********************************************************************</span><br><span class="line">在代码中将看门狗配置为每秒必须喂狗一次，否则会复位。加上串口部分内容。</span><br><span class="line">运行的效果是：</span><br><span class="line">当延时时间delay_ms(1009)大于1s,不能及时喂狗：在打印完&quot;您还没喂狗，请及时喂狗&quot;后，延时函数执行时，时间达到一秒，复位，反复执行上述流程。</span><br><span class="line">当延时时间delay_ms()小于1s,可以及时喂狗：在打印完&quot;您还没喂狗，请及时喂狗&quot;后，延时函数执行后，喂狗，&quot;已经喂狗&quot;，不断重复while循环中的内容。</span><br><span class="line">由于LSI不精确，可能delay_ms(1009)延时，仍然可以成功喂狗。</span><br><span class="line">**********************************************************************/</span><br><span class="line">int main(void)</span><br><span class="line">&#123; </span><br><span class="line">//我们要使用HAL库，所以一定要先初始化HAL库，要使用STM32，需要先初始化系统时钟</span><br><span class="line">HAL_Init();//初始化HAL库    </span><br><span class="line">SystemClock_Config();  //设置时钟,72M,</span><br><span class="line">delay_init(72);//初始化延时函数</span><br><span class="line">//出于对代码调试的需要，加上了串口</span><br><span class="line">MX_USART1_UART_Init();</span><br><span class="line">printf(&quot;您还没喂狗，请及时喂狗&quot;);</span><br><span class="line"></span><br><span class="line">IWDG_Init();//初始化看门狗</span><br><span class="line">while(1)&#123;</span><br><span class="line">delay_ms(1009);</span><br><span class="line">IWDG_Feed();//喂狗</span><br><span class="line">printf(&quot;已经喂狗&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**********************************************************************</span><br><span class="line">看门狗代码</span><br><span class="line">**********************************************************************/</span><br><span class="line">IWDG_HandleTypeDef IWDG_Handler; //独立看门狗句柄,定义为全局变量</span><br><span class="line">void IWDG_Init()&#123;</span><br><span class="line">IWDG_Handler.Instance=IWDG;</span><br><span class="line">//由于希望每秒喂一次狗，所以选择分频系数32,对应的重装载值为1250   1s=1250*32/40000，参考溢出时间计算公式。</span><br><span class="line">IWDG_Handler.Init.Prescaler=IWDG_PRESCALER_32;</span><br><span class="line">IWDG_Handler.Init.Reload=1250;</span><br><span class="line">HAL_IWDG_Init(&amp;IWDG_Handler);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void IWDG_Feed(void)&#123;</span><br><span class="line">HAL_IWDG_Refresh(&amp;IWDG_Handler);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**********************************************************************</span><br><span class="line">串口部分代码</span><br><span class="line">**********************************************************************/</span><br><span class="line">static void MX_USART1_UART_Init(void)</span><br><span class="line">&#123;</span><br><span class="line">  huart1.Instance = USART1;//USART1</span><br><span class="line">  huart1.Init.BaudRate = 115200;//波特兰</span><br><span class="line">  huart1.Init.WordLength = UART_WORDLENGTH_8B;//8位数据位</span><br><span class="line">  huart1.Init.StopBits = UART_STOPBITS_1;//一个停止位</span><br><span class="line">  huart1.Init.Parity = UART_PARITY_NONE;//无奇偶校验位</span><br><span class="line">  huart1.Init.Mode = UART_MODE_TX_RX;//收发模式</span><br><span class="line">  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;//无硬件流控</span><br><span class="line">  huart1.Init.OverSampling = UART_OVERSAMPLING_16;  //？？？？？</span><br><span class="line">  if (HAL_UART_Init(&amp;huart1) != HAL_OK)//HAL_UART_Init()会使能UART1</span><br><span class="line">  &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//UART底层初始化，时钟使能，引脚配置，中断配置</span><br><span class="line">//此函数会被HAL_UART_Init()调用</span><br><span class="line">void HAL_UART_MspInit(UART_HandleTypeDef *huart)//huart:串口句柄</span><br><span class="line">&#123;</span><br><span class="line">    //GPIO端口设置</span><br><span class="line">GPIO_InitTypeDef GPIO_Initure;</span><br><span class="line"></span><br><span class="line">if(huart-&gt;Instance==USART1)//如果是串口1，进行串口1 MSP初始化</span><br><span class="line">&#123;</span><br><span class="line">__HAL_RCC_GPIOA_CLK_ENABLE();//使能GPIOA时钟</span><br><span class="line">__HAL_RCC_USART1_CLK_ENABLE();//使能USART1时钟</span><br><span class="line">__HAL_RCC_AFIO_CLK_ENABLE();</span><br><span class="line"></span><br><span class="line">GPIO_Initure.Pin=GPIO_PIN_9;//PA9</span><br><span class="line">GPIO_Initure.Mode=GPIO_MODE_AF_PP;//复用推挽输出</span><br><span class="line">GPIO_Initure.Pull=GPIO_PULLUP;//上拉</span><br><span class="line">GPIO_Initure.Speed=GPIO_SPEED_FREQ_HIGH;//高速</span><br><span class="line">HAL_GPIO_Init(GPIOA,&amp;GPIO_Initure);   //初始化PA9</span><br><span class="line"></span><br><span class="line">GPIO_Initure.Pin=GPIO_PIN_10;//PA10</span><br><span class="line">GPIO_Initure.Mode=GPIO_MODE_AF_INPUT;//模式要设置为复用输入模式！</span><br><span class="line">HAL_GPIO_Init(GPIOA,&amp;GPIO_Initure);   //初始化PA10</span><br><span class="line"></span><br><span class="line">HAL_NVIC_EnableIRQ(USART1_IRQn);//使能USART1中断通道</span><br><span class="line">HAL_NVIC_SetPriority(USART1_IRQn,3,3);//抢占优先级3，子优先级3</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**********************************************************************</span><br><span class="line">系统时钟代码</span><br><span class="line">**********************************************************************/</span><br><span class="line">//系统时钟</span><br><span class="line">void SystemClock_Config(void)</span><br><span class="line">&#123;</span><br><span class="line">RCC_OscInitTypeDef RCC_OscInitStructure; </span><br><span class="line">RCC_ClkInitTypeDef RCC_ClkInitStructure;</span><br><span class="line"></span><br><span class="line">RCC_OscInitStructure.OscillatorType=RCC_OSCILLATORTYPE_HSE;    //时钟源为HSE  8MHZ</span><br><span class="line">RCC_OscInitStructure.HSEState=RCC_HSE_ON;                      //打开HSE</span><br><span class="line">RCC_OscInitStructure.HSEPredivValue=RCC_HSE_PREDIV_DIV1;//HSE预分频 8/1=8MHZ</span><br><span class="line">RCC_OscInitStructure.PLL.PLLState=RCC_PLL_ON;//打开PLL</span><br><span class="line">RCC_OscInitStructure.PLL.PLLSource=RCC_PLLSOURCE_HSE;//PLL时钟源选择HSE</span><br><span class="line">RCC_OscInitStructure.PLL.PLLMUL=RCC_PLL_MUL9; //主PLL倍频因子8*9=72MHZ</span><br><span class="line"></span><br><span class="line">if(HAL_RCC_OscConfig(&amp;RCC_OscInitStructure)!=HAL_OK) &#123;</span><br><span class="line">while(1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//选中PLL作为系统时钟源并且配置HCLK,PCLK1和PCLK2</span><br><span class="line">RCC_ClkInitStructure.ClockType=(RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2);</span><br><span class="line">RCC_ClkInitStructure.SYSCLKSource=RCC_SYSCLKSOURCE_PLLCLK;//设置系统时钟时钟源为PLL</span><br><span class="line">RCC_ClkInitStructure.AHBCLKDivider=RCC_SYSCLK_DIV1;//AHB分频系数为1 72MHZ</span><br><span class="line">RCC_ClkInitStructure.APB1CLKDivider=RCC_HCLK_DIV2; //APB1分频系数为2PCLK1 窗口看门狗时钟就来自于它 72/2=36MHZ</span><br><span class="line">RCC_ClkInitStructure.APB2CLKDivider=RCC_HCLK_DIV1; //APB2分频系数为1PCLK2 72/1=72MHZ</span><br><span class="line"></span><br><span class="line">if (HAL_RCC_ClockConfig(&amp;RCC_ClkInitStructure,FLASH_LATENCY_2) != HAL_OK)</span><br><span class="line">&#123;</span><br><span class="line">while(1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="wwdg">WWDG</h1><ul><li>WWDG(Windowwatchdog)窗口看门狗：能够<strong>产生系统复位</strong>信号和<strong>提前唤醒中断</strong>的计数器。通常被用来检测软件故障，运行时效是否精准，常用于需要精确监测程序运行时间的场合。</li><li>复位的情况：<ul><li>计数器从设定的重载值递减至设定的窗口值(不包括窗口值）前，不允许喂狗，喂狗会导致复位</li><li>在计数器从窗口值（包括）递减至0x3f时，会产生复位。所以可以在这期间喂狗，防止复位，也只有这段时间可以喂狗。</li></ul></li><li>中断的情况：当计数器达到0x40时，会参数早期唤醒中断（EWI)</li><li>综上：避免复位应只在也必须在窗口期(窗口值到0x3f)喂狗，可以通过控制延时，尽早喂狗与中断EWI喂狗两种方式进行</li></ul><figure><img src="assets/STM32学习.assets/WWDG工作原理.png"alt="WWDG工作原理" /><figcaption aria-hidden="true">WWDG工作原理</figcaption></figure><h2 id="wwdg工作原理">WWDG工作原理</h2><figure><img src="assets/STM32学习.assets/窗口看门狗框图.png"alt="窗口看门狗框图" /><figcaption aria-hidden="true">窗口看门狗框图</figcaption></figure><p>WDGA位为1代表启动看门狗。在看门狗开启的情况下，如果T6为0(当计数器的值从0x40变到0x3f,T6的值变为0），那么③处的电平为0,经过非门和或门，使得②处电平也为1,开启复位。在看门狗开启的情况下，计数器从设定的重载值递减至设定的窗口值(不包括窗口值）前，⑥处电平1，如果喂狗(会写入WWDG_CR),⑤电平为1，从而使得④②处电平也为1,开启复位。</p><h2 id="超时时间计算">超时时间计算</h2><p><span class="math display">\[\begin{aligned}&amp;超时时间计算公式：T_{WWDG}=\frac{4096*2^{WDGTB}*(T[5:0]+1)}{f_{WWDG}}\\&amp;T_{WWDG}是超时时间、f_{WWDG}是是时钟源频率、2^{WDGTB}是预分频系数，在预分频器中设置，4096是WWDG的固定的分频系数。\end{aligned}\]</span></p><h2 id="wwdg配置步骤">WWDG配置步骤</h2><h3 id="hal库配置-1">HAL库配置</h3><p>这里我们给出的是中断EWI喂狗的步骤和方式，延时喂狗请参考窗口看门狗自行修改</p><ul><li>HAL_WWDG_Init() 工作参数初始化，使能WWDG,设置预分频系数和窗口值</li><li>HAL_WWDG_MspInit() WWDG Msp初始化，用于配置NVIC,CLOCK等</li><li>HAL_NVIC_SetPriority()、HAL_NVIC_Enable() 设置优先级、使能中断</li><li>WWDG_IRQ_Handler()--&gt;HAL_WWDG_IRQ_Handler() 编写中断服务函数</li><li>HAL_WWDG_EarlyWakeupCallback() 重定义提前唤醒回调函数</li><li>HAL_WWDG_Refresh() 喂狗</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">  uint32_t Prescaler; </span><br><span class="line">  uint32_t Window;</span><br><span class="line">  uint32_t Counter</span><br><span class="line">  uint32_t EWIMode ; </span><br><span class="line">&#125; WWDG_InitTypeDef;</span><br><span class="line"></span><br><span class="line">typedef struct</span><br><span class="line">&#123;</span><br><span class="line">  WWDG_TypeDef                 *Instance; </span><br><span class="line">  WWDG_InitTypeDef             Init;   </span><br><span class="line">&#125; WWDG_HandleTypeDef;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;delay.h&quot;</span><br><span class="line"></span><br><span class="line">#include &quot;stm32f1xx_hal.h&quot;   </span><br><span class="line">#include&quot;stdio.h&quot;</span><br><span class="line"></span><br><span class="line">//声明函数</span><br><span class="line">void SystemClock_Config(void);</span><br><span class="line">void WWDG_Init(void);</span><br><span class="line">void LED_Init(void);</span><br><span class="line"></span><br><span class="line">/**********************************************************************</span><br><span class="line">运行的效果是：</span><br><span class="line">代码在While中循环，每隔58.25ms看门狗计数到0x40触发中断，调用中断处理函数，翻转小灯电平</span><br><span class="line">**********************************************************************/</span><br><span class="line">int main(void)</span><br><span class="line">&#123; </span><br><span class="line">//我们要使用HAL库，所以一定要先初始化HAL库，要使用STM32，需要先初始化系统时钟</span><br><span class="line">HAL_Init();//初始化HAL库    </span><br><span class="line">SystemClock_Config();  //设置时钟72M，设置了窗口看门狗时钟为32MHZ</span><br><span class="line">delay_init(72);</span><br><span class="line">LED_Init();//初始化LED</span><br><span class="line">WWDG_Init();//初始化看门狗</span><br><span class="line">while(1)&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**********************************************************************</span><br><span class="line">看门狗代码</span><br><span class="line">**********************************************************************/</span><br><span class="line">WWDG_HandleTypeDef WWDG_Handler;     //窗口看门狗句柄,定义为全局变量</span><br><span class="line">void WWDG_Init()&#123;</span><br><span class="line">//超出时间计算：58.25ms=4096*8*(0x7F-0x3F)/36MHZ*1000</span><br><span class="line">    WWDG_Handler.Instance=WWDG;</span><br><span class="line">    WWDG_Handler.Init.Prescaler=WWDG_PRESCALER_8; //设置分频系数</span><br><span class="line">    WWDG_Handler.Init.Window=0x5F;       //设置窗口值</span><br><span class="line">    WWDG_Handler.Init.Counter=0x7F;     //设置计数器值</span><br><span class="line">    WWDG_Handler.Init.EWIMode=WWDG_EWI_ENABLE;//使能窗口看门狗提前唤醒中断 </span><br><span class="line">    HAL_WWDG_Init(&amp;WWDG_Handler);        //初始化WWDG</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//WWDG底层驱动，时钟配置，中断配置</span><br><span class="line">//此函数会被HAL_WWDG_Init()调用</span><br><span class="line">void HAL_WWDG_MspInit(WWDG_HandleTypeDef *hwwdg) //hwwdg:窗口看门狗句柄</span><br><span class="line">&#123;   </span><br><span class="line">    __HAL_RCC_WWDG_CLK_ENABLE();    //使能窗口看门狗时钟</span><br><span class="line">        </span><br><span class="line">    HAL_NVIC_SetPriority(WWDG_IRQn,2,3);    //抢占优先级2，子优先级为3</span><br><span class="line">    HAL_NVIC_EnableIRQ(WWDG_IRQn);          //使能窗口看门狗中断</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//窗口看门狗中断服务函数</span><br><span class="line">void WWDG_IRQHandler(void)</span><br><span class="line">&#123;</span><br><span class="line">    HAL_WWDG_IRQHandler(&amp;WWDG_Handler);//调用WWDG共用中断处理函数</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//中断服务函数处理过程</span><br><span class="line">//此函数会被HAL_WWDG_IRQHandler()调用</span><br><span class="line">void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef* hwwdg)</span><br><span class="line">&#123;</span><br><span class="line">    HAL_WWDG_Refresh(&amp;WWDG_Handler);//更新窗口看门狗值</span><br><span class="line">    HAL_GPIO_TogglePin( GPIOA, GPIO_PIN_8);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**********************************************************************</span><br><span class="line">小灯代码</span><br><span class="line">**********************************************************************/</span><br><span class="line">//LED IO初始化</span><br><span class="line">void LED_Init(void)</span><br><span class="line">&#123;</span><br><span class="line">    GPIO_InitTypeDef GPIO_Initure;</span><br><span class="line">    __HAL_RCC_GPIOA_CLK_ENABLE();           //开启GPIOA时钟</span><br><span class="line">    </span><br><span class="line">    GPIO_Initure.Pin=GPIO_PIN_8; //PA8</span><br><span class="line">    GPIO_Initure.Mode=GPIO_MODE_OUTPUT_PP;  //推挽输出</span><br><span class="line">    GPIO_Initure.Pull=GPIO_PULLUP;          //上拉</span><br><span class="line">    GPIO_Initure.Speed=GPIO_SPEED_FREQ_HIGH;    //高速</span><br><span class="line">    HAL_GPIO_Init(GPIOA,&amp;GPIO_Initure);</span><br><span class="line"></span><br><span class="line">    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);//PA8置1，默认初始化后灯灭</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**********************************************************************</span><br><span class="line">系统时钟代码</span><br><span class="line">**********************************************************************/</span><br><span class="line">//系统时钟</span><br><span class="line">void SystemClock_Config(void)</span><br><span class="line">&#123;</span><br><span class="line">RCC_OscInitTypeDef RCC_OscInitStructure; </span><br><span class="line">RCC_ClkInitTypeDef RCC_ClkInitStructure;</span><br><span class="line"></span><br><span class="line">RCC_OscInitStructure.OscillatorType=RCC_OSCILLATORTYPE_HSE;    //时钟源为HSE  8MHZ</span><br><span class="line">RCC_OscInitStructure.HSEState=RCC_HSE_ON;                      //打开HSE</span><br><span class="line">RCC_OscInitStructure.HSEPredivValue=RCC_HSE_PREDIV_DIV1;//HSE预分频 8/1=8MHZ</span><br><span class="line">RCC_OscInitStructure.PLL.PLLState=RCC_PLL_ON;//打开PLL</span><br><span class="line">RCC_OscInitStructure.PLL.PLLSource=RCC_PLLSOURCE_HSE;//PLL时钟源选择HSE</span><br><span class="line">RCC_OscInitStructure.PLL.PLLMUL=RCC_PLL_MUL9; //主PLL倍频因子8*9=72MHZ</span><br><span class="line"></span><br><span class="line">if(HAL_RCC_OscConfig(&amp;RCC_OscInitStructure)!=HAL_OK) &#123;</span><br><span class="line">while(1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//选中PLL作为系统时钟源并且配置HCLK,PCLK1和PCLK2</span><br><span class="line">RCC_ClkInitStructure.ClockType=(RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2);</span><br><span class="line">RCC_ClkInitStructure.SYSCLKSource=RCC_SYSCLKSOURCE_PLLCLK;//设置系统时钟时钟源为PLL</span><br><span class="line">RCC_ClkInitStructure.AHBCLKDivider=RCC_SYSCLK_DIV1;//AHB分频系数为1 72MHZ</span><br><span class="line">RCC_ClkInitStructure.APB1CLKDivider=RCC_HCLK_DIV2; //APB1分频系数为2PCLK1 窗口看门狗时钟就来自于它 72/2=36MHZ</span><br><span class="line">RCC_ClkInitStructure.APB2CLKDivider=RCC_HCLK_DIV1; //APB2分频系数为1PCLK2 72/1=72MHZ</span><br><span class="line"></span><br><span class="line">if (HAL_RCC_ClockConfig(&amp;RCC_ClkInitStructure,FLASH_LATENCY_2) != HAL_OK)</span><br><span class="line">&#123;</span><br><span class="line">while(1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="systick">SysTick</h1><p>SysTick系统节拍时钟，是ARMCortex-M3内核的一个内设，STM32属于该内核，因此有SysTick。由于所有该内核的都有SysTick,显然，它将使得程序的可移植性更好。</p><ul><li>工作原理：从其结构图可以明显的看出，首先SysTick从时钟源接口获得时钟驱动，然后从重装寄存器将重装值读入当前计数寄存器，并在时钟驱动下减一计数，发生下溢时，将计数标志置位，并在满足一定条件下触发SysTick溢出中断，同时进行一次重装值载入操作。</li></ul><figure><img src="assets/STM32学习.assets/SysTick定时器基本结构.png"alt="SysTick定时器基本结构" /><figcaption aria-hidden="true">SysTick定时器基本结构</figcaption></figure><figure><img src="assets/STM32学习.assets/SysTick定时器寄存器.png"alt="SysTick定时器寄存器" /><figcaption aria-hidden="true">SysTick定时器寄存器</figcaption></figure><ul><li>步骤<ul><li>配置SysTick的预装载值，时钟源以及分频</li><li>写SysTick中断服务函数</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">u32 tick=0;</span><br><span class="line"></span><br><span class="line">void delay_1s(void)</span><br><span class="line">&#123;</span><br><span class="line">tick=0;</span><br><span class="line">while(tick&lt;1000);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">void Systick_Configuration(void)</span><br><span class="line">&#123;</span><br><span class="line">//主频为72/8=9 MHz,故1ms计时： 1000*计数次数/主频=1ms--&gt;计数次数=主频/1000</span><br><span class="line">SysTick_Config(9000000/1000);</span><br><span class="line">//选择HCLK进行8分频后作为Systick时钟源，本函数一定要置于SysTick_Config后调用</span><br><span class="line">//时钟源在SysTick_Config中会将时钟源位置重新设置，使得设置的时钟无效</span><br><span class="line">//但是将SysTick_CLKSourceConfig移到SysTick_Config之后调用，要记得先禁能，然后调用SysTick_CLKSourceConfig，再使能。我不会</span><br><span class="line">SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void Systick_Handler(void)</span><br><span class="line">&#123;</span><br><span class="line">tick++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">Systick_Configuration();</span><br><span class="line">delay_1s();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">/*****************************</span><br><span class="line">显然这里的配置流程可以分为两类，这里的代码是第一类</span><br><span class="line">一类是实现一个延时功能，延时功能只需要定时器工作一个周期，也就是从重装载值减到0的一个过程，执行一次后需要关闭定时器</span><br><span class="line">实现系统的us延时（参数）</span><br><span class="line">&#123;</span><br><span class="line">   //选择时钟 建议选择外部时钟</span><br><span class="line">   //写入重装载值  21*参数</span><br><span class="line">   //当前值清零</span><br><span class="line">   //打开计数器</span><br><span class="line">   //等待标志位置1</span><br><span class="line">   //关闭计数器</span><br><span class="line">&#125;</span><br><span class="line">一类是利用中断，一定时间进一次中断，以此来实现一个时间片轮询的操作方式。这时候，就需要定时器一直计数了</span><br><span class="line"></span><br><span class="line">系统滴答的初始化代码</span><br><span class="line">&#123;</span><br><span class="line">   //选择系统滴答的时钟</span><br><span class="line">   //配置系统抵达的重装载值</span><br><span class="line">   //当前值清零</span><br><span class="line">   //打开中断使能 </span><br><span class="line">   </span><br><span class="line">   //NVIC控制器</span><br><span class="line"></span><br><span class="line">   //开启定时器   </span><br><span class="line">&#125;</span><br><span class="line">中断服务函数</span><br><span class="line">&#123;</span><br><span class="line">判断标志；</span><br><span class="line">清楚标志；</span><br><span class="line">执行操作。</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//SysTick设置中断优先级为15： NVIC_SetPriority (SysTick_IRQn, (1&lt;&lt;__NVIC_PRIO_BITS) - 1);</span><br><span class="line">******************************/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">u8 reload=0;</span><br><span class="line">void delay_init()&#123;</span><br><span class="line">SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8);//选择外部时钟，将 72MHz 的频率 8 分频，把系统嘀嗒定时器的变化定位在 1ms</span><br><span class="line">raload = SystemCoreClock / 1000;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void delay_ms(u16 t)</span><br><span class="line">&#123;</span><br><span class="line">//SysTick-&gt;CTRL &amp;=~ (1&lt;&lt;2);//选择时钟源--进行AHB 8分频</span><br><span class="line">//SysTick-&gt;CTRL &amp;=~ (1&lt;&lt;1);//使能定时器中断</span><br><span class="line">SysTick-&gt;LOAD = reload-1;//AHB是72MHz时，填入计数值；</span><br><span class="line">SysTick-&gt;VAL=0x00; // 清空计数器</span><br><span class="line">SysTick-&gt;CTRL |= (1&lt;&lt;0);//开启计数器；也可以用SysTick_CTRL_ENABLE_Msk赋值</span><br><span class="line">while((SysTick-&gt;CTRL&amp;(1&lt;&lt;16))==0);//判断计数器计数是否结束（CTRL的第16位）</span><br><span class="line">SysTick-&gt;CTRL &amp;=~ (1&lt;&lt;0);//关闭计数器；</span><br><span class="line">SysTick-&gt;VAL=0x00; // 清空计数器</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="基本定时器">基本定时器</h1><ul><li>16位递增计数器</li><li>16位预分频器</li><li>可用于触发DAC</li><li>在计数器溢出时，可产生中断/DMA请求</li><li></li></ul><h1 id="点亮第一个led灯">点亮第一个LED灯</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f1xx_hal.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">SystemClock_Config</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">MX_GPIO_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  HAL_Init();                   <span class="comment">// 初始化HAL库</span></span><br><span class="line">  SystemClock_Config();         <span class="comment">// 配置系统时钟</span></span><br><span class="line">  MX_GPIO_Init();               <span class="comment">// 初始化GPIO</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_8);<span class="comment">// 切换LED灯的状态</span></span><br><span class="line">HAL_GPIO_TogglePin(GPIOD,GPIO_PIN_2);</span><br><span class="line">HAL_Delay(<span class="number">500</span>);<span class="comment">// 延时500ms</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">MX_GPIO_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStruct=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开启GPIOA时钟</span></span><br><span class="line">__HAL_RCC_GPIOA_CLK_ENABLE();</span><br><span class="line">__HAL_RCC_GPIOD_CLK_ENABLE();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置PA8,PD2为高速推挽输出</span></span><br><span class="line">GPIO_InitStruct.Pin=GPIO_PIN_8;</span><br><span class="line">GPIO_InitStruct.Mode=GPIO_MODE_OUTPUT_PP;</span><br><span class="line">GPIO_InitStruct.Speed=GPIO_SPEED_FREQ_HIGH;</span><br><span class="line">HAL_GPIO_Init(GPIOA,&amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line">GPIO_InitStruct.Pin=GPIO_PIN_2;</span><br><span class="line">HAL_GPIO_Init(GPIOD,&amp;GPIO_InitStruct);</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// 初始状态关闭LED灯</span></span><br><span class="line">HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);</span><br><span class="line">HAL_GPIO_WritePin(GPIOD,GPIO_PIN_2,GPIO_PIN_SET);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">SystemClock_Config</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  RCC_OscInitTypeDef RCC_OscInitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">  RCC_ClkInitTypeDef RCC_ClkInitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 启用外部晶振</span></span><br><span class="line">  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;</span><br><span class="line">  RCC_OscInitStruct.HSEState = RCC_HSE_ON;</span><br><span class="line">  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;</span><br><span class="line">  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;</span><br><span class="line">  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;</span><br><span class="line">  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;</span><br><span class="line">  <span class="keyword">if</span> (HAL_RCC_OscConfig(&amp;RCC_OscInitStruct) != HAL_OK)</span><br><span class="line">  &#123;</span><br><span class="line">    Error_Handler();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 配置系统时钟</span></span><br><span class="line">  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |</span><br><span class="line">                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;</span><br><span class="line">  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;</span><br><span class="line">  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;</span><br><span class="line">  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;</span><br><span class="line">  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;</span><br><span class="line">  <span class="keyword">if</span> (HAL_RCC_ClockConfig(&amp;RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)</span><br><span class="line">  &#123;</span><br><span class="line">    Error_Handler();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Error_Handler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 出错处理函数</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="按键改变小灯亮灭">按键改变小灯亮灭</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;stm32f1xx_hal.h&quot;</span><br><span class="line"></span><br><span class="line">void SystemClock_Config(void);</span><br><span class="line">static void MX_GPIO_Init(void);</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">  HAL_Init();                   // 初始化HAL库</span><br><span class="line">  SystemClock_Config();         // 配置系统时钟</span><br><span class="line">  MX_GPIO_Init();               // 初始化GPIO</span><br><span class="line"></span><br><span class="line">  while (1)</span><br><span class="line">  &#123;</span><br><span class="line">  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_15)==GPIO_PIN_RESET)&#123;</span><br><span class="line">HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">static void MX_GPIO_Init(void)</span><br><span class="line">&#123;</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStruct=&#123;0&#125;;</span><br><span class="line"></span><br><span class="line">    // 开启GPIOA时钟</span><br><span class="line">__HAL_RCC_GPIOA_CLK_ENABLE();</span><br><span class="line"></span><br><span class="line">    //设置PA8为高速推挽输出</span><br><span class="line">GPIO_InitStruct.Pin=GPIO_PIN_8;</span><br><span class="line">GPIO_InitStruct.Mode=GPIO_MODE_OUTPUT_PP;</span><br><span class="line">GPIO_InitStruct.Speed=GPIO_SPEED_FREQ_HIGH;</span><br><span class="line">HAL_GPIO_Init(GPIOA,&amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line">//设置PA15为上拉输入，PA15按下为低电平，松开为高电平</span><br><span class="line">GPIO_InitStruct.Pin=GPIO_PIN_15;</span><br><span class="line">GPIO_InitStruct.Mode=GPIO_MODE_INPUT;</span><br><span class="line">GPIO_InitStruct.Pull=GPIO_PULLUP;</span><br><span class="line">HAL_GPIO_Init(GPIOA,&amp;GPIO_InitStruct);</span><br><span class="line">    </span><br><span class="line">  // 初始状态关闭LED灯</span><br><span class="line">HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void SystemClock_Config(void)</span><br><span class="line">&#123;</span><br><span class="line">  RCC_OscInitTypeDef RCC_OscInitStruct = &#123;0&#125;;</span><br><span class="line">  RCC_ClkInitTypeDef RCC_ClkInitStruct = &#123;0&#125;;</span><br><span class="line"></span><br><span class="line">  // 启用外部晶振</span><br><span class="line">  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;</span><br><span class="line">  RCC_OscInitStruct.HSEState = RCC_HSE_ON;</span><br><span class="line">  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;</span><br><span class="line">  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;</span><br><span class="line">  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;</span><br><span class="line">  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  // 配置系统时钟</span><br><span class="line">  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |</span><br><span class="line">                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;</span><br><span class="line">  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;</span><br><span class="line">  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;</span><br><span class="line">  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;</span><br><span class="line">  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">点灯：</span><br><span class="line">灯亮</span><br><span class="line">while(1);</span><br><span class="line"></span><br><span class="line">灯闪烁：</span><br><span class="line">while(1)&#123;</span><br><span class="line">灯亮</span><br><span class="line">    延时1s</span><br><span class="line">    灯灭</span><br><span class="line">    延时1s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">按键点灯：按下按键时，灯亮，松开按键时，灯灭</span><br><span class="line">while(1)&#123;</span><br><span class="line">if 按键是按下的</span><br><span class="line">灯亮</span><br><span class="line">else</span><br><span class="line">灯灭</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">按键点灯：按下按键时，灯亮，再次按下按键，灯灭</span><br><span class="line">while(1)&#123;</span><br><span class="line">if 按键是按下的</span><br><span class="line">翻转灯亮灭</span><br><span class="line">while(按键没有松开)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">消抖按键点灯：按下按键时，灯亮，再次按下按键，灯灭</span><br><span class="line">while(1)&#123;</span><br><span class="line">if 按键是按下的</span><br><span class="line">延时一段时间</span><br><span class="line">if 按键还是按下的</span><br><span class="line">            翻转灯亮灭</span><br><span class="line">            while(按键没有松开)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;stm32相关软件下载与安装&quot;&gt;STM32相关软件下载与安装&lt;/h1&gt;
&lt;p&gt;下载并安装STM32CubeIDE&lt;/p&gt;
&lt;h1 id=&quot;section&quot;&gt;&lt;/h1&gt;
&lt;h1 id=&quot;其他&quot;&gt;其他&lt;/h1&gt;
&lt;h2 id=&quot;独立按键&quot;&gt;独立按键&lt;/h2&gt;</summary>
      
    
    
    
    <category term="嵌入式" scheme="http://example.com/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>SPI通信</title>
    <link href="http://example.com/blog/12.html"/>
    <id>http://example.com/blog/12.html</id>
    <published>2023-11-21T15:45:00.231Z</published>
    <updated>2023-11-22T23:35:29.354Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spi通信">SPI通信</h1><figure><img src="assets/SPI通信.assets/常见的SPI通信系统.png"alt="常见的SPI通信系统" /><figcaption aria-hidden="true">常见的SPI通信系统</figcaption></figure><p><strong>SPI通信使用3条总线及片选线：</strong></p><ul><li>SCK：时钟线，保证信号同步</li><li>MOSI：数据线，主机输出从机输入</li><li>MISO：主机输入从机输出</li><li>片选线(<spanclass="math inline">\(\overline{SS}，\overline{NSS}，\overline{CS}\)</span>)：主机通过片选线选择与哪个从机通信，上面的一横表示低电平有效</li></ul><p>如果只有一个从机，可以没片选线，如果只有主机输入从机输出，可以没有MOSI线。</p><p><strong>SPI共有四种通信模式，规定了总线空闲时SCK的状态(时钟极性CPOL)，以及数据采样时刻(时钟相位CPHA)。</strong>CPOL=1：表示SCK空闲时为高电平。 CPHA=1：表示时钟偶数边沿采样。假设CPHA=1，CPOL=1，空闲时SCK高电平，那么是在时钟低电平准备数据，高电平采样读取数据(空闲时采样)。假设CPHA=1，CPOL=0，空闲时SCK低电平，那么是在时钟高电平准备数据，低电平采样读取数据(空闲时采样)。假设CPHA=0，CPOL=1，空闲时SCK高电平，那么是在时钟高电平准备数据，低电平采样读取数据。假设CPHA=0，CPOL=0，空闲时SCK低电平，那么是在时钟低电平准备数据，高电平采样读取数据。</p><p>总结一下，CPOL规定了空闲是SCK是否为高电平，CPHA规定了是否时钟非空闲时准备数据，空闲时采样</p><figure><img src="assets/SPI通信.assets/CHPA=0时的SPI通信模式.png"alt="CHPA=0时的SPI通信模式" /><figcaption aria-hidden="true">CHPA=0时的SPI通信模式</figcaption></figure><figure><img src="assets/SPI通信.assets/CHPA=1时的SPI通信模式.png"alt="CHPA=1时的SPI通信模式" /><figcaption aria-hidden="true">CHPA=1时的SPI通信模式</figcaption></figure><p><strong>关于起始信号，结束信号</strong></p><ul><li>UART中采用两根线TX，RX实现双向通信，规定空闲时为高电平，检测到电平下降认为数据传输开始，以停止位作为数据结束的判断，波特率的规定实现数据同步。一个数据帧一个数据帧的同步传输。</li><li>IIC通过SCL,SDA两根线实现双向通信，通信前发送从机地址实现多从机设备选择，总线仲裁解决多主机共用总线问题。没有规定波特率，所以，每个数据帧通过发送开始信号，结束信号，ACK应答信号实现数据同步</li><li>SPI通过SCL,MOSI,MISO,SS线实现双向通信，SS片选实现多从机设备选择，检测到SCL非空闲认为数据开始。要约定双方的波特率。（我猜测是检测SCL空闲一位的时间说明总线空闲，一位的时间这个随波特率而定，需要约定波特率。）</li></ul><p><strong>因此，SPI通信需要配置</strong></p><p>时钟极性，时钟相位，主机/从机，高位/低位在前，波特率，单双向通信。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;spi通信&quot;&gt;SPI通信&lt;/h1&gt;
&lt;figure&gt;
&lt;img src=&quot;assets/SPI通信.assets/常见的SPI通信系统.png&quot;
alt=&quot;常见的SPI通信系统&quot; /&gt;
&lt;figcaption aria-hidden=&quot;true&quot;&gt;常见的S</summary>
      
    
    
    
    <category term="嵌入式" scheme="http://example.com/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>HSU-CHM-01A温湿度传感器</title>
    <link href="http://example.com/blog/10.html"/>
    <id>http://example.com/blog/10.html</id>
    <published>2023-11-21T15:45:00.222Z</published>
    <updated>2023-11-22T23:35:10.312Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="4743ee2e7b889d611e732b19bfce31e003c4b2758f4aa9307ee276cb86bf0c28">161e93c4419f838fba4978c15eeea98b08db101af874682ebb41d8fb0077903d</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这些是草稿或不便于观看的内容，需要密码。</summary>
    
    
    
    <category term="嵌入式" scheme="http://example.com/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
    <category term="草稿" scheme="http://example.com/tags/%E8%8D%89%E7%A8%BF/"/>
    
  </entry>
  
  <entry>
    <title>KMP算法</title>
    <link href="http://example.com/blog/11.html"/>
    <id>http://example.com/blog/11.html</id>
    <published>2023-11-21T15:45:00.222Z</published>
    <updated>2023-11-22T23:33:53.789Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="fcec91d1ab5df6ac44e8d0d76ea221abc5dad45fde766660d78faa9e225e8332"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这些是草稿或不便于观看的内容，需要密码。</summary>
    
    
    
    <category term="计算机基础" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="草稿" scheme="http://example.com/tags/%E8%8D%89%E7%A8%BF/"/>
    
  </entry>
  
  <entry>
    <title>DS1621</title>
    <link href="http://example.com/blog/8.html"/>
    <id>http://example.com/blog/8.html</id>
    <published>2023-11-21T15:45:00.221Z</published>
    <updated>2023-11-22T23:34:59.988Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="7afe0a624ae086593e5299634659ecd90308bb4f518cd550facca6f143bf6cae">161e93c4419f838fba4978c15eeea98b25f81897d05af6d23a1cd422e4f4e96499a294dc2d0ca86e1f654e3b89b526b74e2f6f66d3b43cd2dacbd2e6bf401a765205a2b45b38abcb0d6e286f8c7abc30f1bb14b03d1377ba1b2b35d62414eba5978b7cb9435dc5027a94507afdb5efb65aa0bfc3cf0dc733313dc13284a82db2cded53ac4c485a8144e78a279c16ad4e9b178785d3df44c77046a8d958eb9d1ec768ebfb771818708f1c8bc98294f6de9cc0976be8f7b1aaedb38fa1c45a2ad6ada4c2ad454de79b9f1942af7fc5e89a9bac5a70a28283e9469f83bd7f4cf248df02eddd7de47d9c40a5428498a57d3fdecb80c521559af776d3b95eb2b24fb30e7ddb63d1ee664d1e316d9386f6d6dba6bb4815080c1906d6db126b04ccf691373b1fe28590cf0f8a551d4e667234abece68833df93ae671e29b88155ed8c88eb1ba5050e2eb90890e4cfab6430297655b8d60a82b9551f3a66d92a32c4bf9b89e958d8367d36cb0c566c7b62691fc4234c94aaf0ebb85ed50cdb8ebe18e1fe229bba11a2f81e0ad95627b676f3614f3239b8eef58848fab6c1dc2f22aaa0d0ba2c38036bb8b169bf9c0918fd04269dccac2358efd5633873e85bdc845703c274d7af05bb8343fd88dc5c01556fe0f6a57c3c4da8ba8f8989a4f56f566899878768a8091b6f9dc69d38c57d928555607cd1b703888e63d5a70d26069eb173563caedc16df53b54fbfbbc6110ec76f75872ffd0eb0772ffc348e353acdba894680f7cd7da53b1b2fbf709e58c85252d1582c34996a404347456b440c1fb3fd0d62ad6bd6a1069bdac135b48f2739bd19e5154cd320e9802aaa50d6f1c66349633b34f42168ee87a3a0efc5660d0c7a48dac6d22791266800da1a3c9d479f92386eb36ce8482ef2d7adeb68c1d2411cc2ee7574b32112b1a9b6089fdb6545d222ec3e13e90b507cf33ce124e8664cf0415b4bca3660dc149397016edb383260eff7c0bacb564ddacf333f757a983de232ede8da0d134225cb792656a5d0e7da3b6e4cf4a12756f77187c418e440406261430ed920bfdde468f943bb25009649c072f288ba219a00341830450718a21ba3f31170c5248fa493871cfe238c52246ff9193c2e2ac6541d4a288743eff918bc3d650ec11464a9e9cc491eba70d7a9cbde563ff56102d8e667ccacdaade617020c6d94e1d9632d3c8530366c837a3a65c71d9d6b347b97516eebe19ac39cce45cb905d19af2a9975c0fc04cc3f441ed4dcc8a30b64cfdea4822dd56bd32822f3f96fdfb6373a054dc69143b3287f67c0d55617ea2b893051fdd5477a70f59f719a490897b2b83d9cbdf55e3ae7fd1236619a63ccbabfac12105aedc3e01e56af622cb5283b5903455fb050dbdcbc983a562b2e40ae26dad93063b5989b03e326b8d656c42b97c89ba8f6af81d7f9c7ab0c7ac20022a00ce800fa660ac3a27d334d5b64f5faf1fc6cf14213831490aea910aa41e1afb288e0c0170e34b64edaec6b7cd5abf8518fad62d35bd9ede01d2e4f27f89d97a346047b655db5e27f28eb0f59086970c4b6498a5a2612319cabd48aec2a565d828125b14298023c6c9d5260db6f2ac8c81672c6a80a4d254602ae79f1a02f378e8ca343c959e75f09ad1e706821d5d2a9af76f219285d19fbff555d9e4f9551cc7d0bf51c17e99c0ef4ebca2437a25d5f872af42d8933fa8e3a0f85f28358a508a564bb5007d545c14b0541d32cbf3e2bc8c1fe72cf57a1e42c1de0f0fd8c861aa30c9291110497a70c0d56a26ea69ae9aa9323a23a74320ef4ae262d3d700c366d4c04117293ca70fad9f09177036bcb373aa4f1f86c9045fc76840fac7328664cd2763011be15db5577789a728e7fd46adecc8823bb62ae0e54e327b38a29d59bd2d62e4dd1b7836551ae51585bfa7d5e9ee3146b1fdc898efa20a0051777278aaf8f68381b0856100d5d7eddafce36d9f87fb16f08ef52a2c0a1f691bb52c0c0d3522ae8ac3bea9cd934ca9d6f25437982a05b5e61da0e2d378df552e265b3d2143913c6ad406723ff8f3b833a3f9f5b9c78a48e6ea293df7de1951a9d8ceb8b392ab90a7bd903c6949619c1204bb0cc53d262b81ccaa15bc134ea97cc8bb55a4b41f0f3bdc106d857b3619fefded0ac5418137bb07bd5b01a2e0a68d02bc70539c94d2587f5ec9186b8bb7c2eabb4119c3aa97810071a235807375f4383ac98f7e8dbab88acbc7bf7c36cfff01872ea47f30e2e36127abd16a2d7fb8a72e96e30035d9af66b837291f3283f7523bef5e60bd91bf9aae2e431759770aacfd79eba0392b52c568f0e7167ef438d410a31d789bb62034dc0474f</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这些是草稿或不便于观看的内容，需要密码。</summary>
    
    
    
    <category term="嵌入式" scheme="http://example.com/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
    <category term="草稿" scheme="http://example.com/tags/%E8%8D%89%E7%A8%BF/"/>
    
  </entry>
  
  <entry>
    <title>ANSG08</title>
    <link href="http://example.com/blog/9.html"/>
    <id>http://example.com/blog/9.html</id>
    <published>2023-11-21T15:45:00.050Z</published>
    <updated>2023-11-22T23:34:53.361Z</updated>
    
    <content type="html"><![CDATA[]]></content>
    
    
      
      
    <summary type="html">
</summary>
      
    
    
    
    <category term="嵌入式" scheme="http://example.com/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>51单片机学习</title>
    <link href="http://example.com/blog/7.html"/>
    <id>http://example.com/blog/7.html</id>
    <published>2023-11-21T15:45:00.049Z</published>
    <updated>2023-11-22T23:34:26.549Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">参考书籍：</span><br><span class="line">    手把手教你学51单片机（作为51单片机的学习参考）</span><br><span class="line">    STM8单片机自学笔记_14627736（对数码管，74HC595等外设的学习可以参考它们）</span><br><span class="line">    深入浅出STM8单片机入门、进阶与应用实例_14154645（对数码管，74HC595等外设的学习可以参考它们）</span><br><span class="line">参考视频：江科大、普中</span><br></pre></td></tr></table></figure><h1 id="实验">实验</h1><h2 id="实验1led闪烁">实验1：LED闪烁</h2><figure><img src="assets/51单片机学习.assets/LED闪烁.png" alt="LED闪烁" /><figcaption aria-hidden="true">LED闪烁</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;reg51.h&gt; //包含头文件</span><br><span class="line">sbit led=P0^0;//利用位定义   </span><br><span class="line">void delay(unsigned char x)          //延时函数</span><br><span class="line">&#123;</span><br><span class="line">unsigned char i,j;</span><br><span class="line">for(i = 0;i &lt; x;i++)&#123;</span><br><span class="line">for(j = 0;j &lt; 200;j++);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">void main(void)&#123;</span><br><span class="line">led=0;//初始熄灭led灯</span><br><span class="line">while(1)&#123;</span><br><span class="line">led=~led;//led闪烁</span><br><span class="line">delay(250);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实验2流水灯">实验2：流水灯</h2><figure><img src="assets/51单片机学习.assets/流水灯.png" alt="流水灯" /><figcaption aria-hidden="true">流水灯</figcaption></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;reg51.h&gt; //包含头文件</span><br><span class="line">#define led P0</span><br><span class="line">void delay(unsigned char x)          //延时函数</span><br><span class="line">&#123;</span><br><span class="line">unsigned char i,j;</span><br><span class="line">for(i = 0;i &lt; x;i++)&#123;</span><br><span class="line">for(j = 0;j &lt; 200;j++);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">void main(void)&#123;</span><br><span class="line">led=0x00;</span><br><span class="line">led=0x01;//初始led灯1亮</span><br><span class="line">while(1)&#123;</span><br><span class="line">led=led&lt;&lt;1;</span><br><span class="line">if(led==0x00)</span><br><span class="line">led=0x01;</span><br><span class="line">delay(250);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实验3数码管数字显示">实验3：数码管数字显示</h2><h4 id="数码管">数码管</h4><p>在数码管中为减少引脚，一般会多个led灯共阳/阴。在电路图中，会用A表示阳极，K表示阴极，各个灯与编号的对应关系如下图所示。</p><figure><img src="assets/51单片机学习.assets/数码管电路引脚示意图.png"alt="数码管电路引脚示意图" /><figcaption aria-hidden="true">数码管电路引脚示意图</figcaption></figure><p>在使用多个数码管时，要引入位、段的概念，位表示的是哪个数码管，段表示的是数码管中各个led灯的电平情况。多位数码管一般会采取动态显示法。公共端上电，后送入位码，然后送段码，决定哪个数码管亮哪些灯，利用人眼的视觉残留，一定时间内依次亮不同的灯，呈现出所有灯亮的效果。当使用多个数码管时，为减少引脚，可以使用驱动、电子开关、串转并、专用驱动芯片等来节省IO口。<strong>利用74HC595芯片多个驱动数码管</strong></p><h3 id="原理图">原理图</h3><p><img src="assets/51单片机学习.assets/P0驱动数码管.png"alt="P0驱动数码管" />**</p><p>图中的数码管显然是共阳1位8段数码管，所以使能端口对应的是阳极，我们给它接上电源。那么中间的小灯应该是低电平亮。比如数字0对应的是abcdef亮，即0xC0=0x11000000。</p><h3 id="代码">代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;reg51.h&gt;</span><br><span class="line">code unsigned char ledSeg[10] = &#123;0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90&#125;;</span><br><span class="line">void delay(unsigned char x)          //延时函数</span><br><span class="line">&#123;</span><br><span class="line">unsigned char i,j;</span><br><span class="line">for(i = 0;i &lt; x;i++)&#123;</span><br><span class="line">for(j = 0;j &lt; 200;j++);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">void main(void)&#123;</span><br><span class="line">unsigned char i=0;</span><br><span class="line">P0=0X00;//初始数码管灭</span><br><span class="line">while(1)&#123;</span><br><span class="line">P0=ledSeg[i];</span><br><span class="line">delay(250)</span><br><span class="line">i=(i+1)%10;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实验4定时器的使用">实验4：定时器的使用</h2><p><strong>时钟周期与机器周期</strong></p><p>时钟周期是CPU一个时钟脉冲所需要的时间，是CPU工作的最小时间单位。<span class="math display">\[\begin{aligned}&amp;时钟周期(单位s)=\frac{1}{时钟源频率(单位HZ)}\\\end{aligned}\]</span>机器周期（主要针对汇编语言而言)是单片机完成一个操作的最短时间。51系列单片机标准架构下一个机器周期是12个时钟周期。</p><p><strong>定时器</strong></p><p>定时器中有一个计数器，从某个初值开始计数，每经过一个机器周期就自动加1，当超过值65535（因为是16位的定时器）发生溢出，溢出之后，定时器的溢出标志位自动置1.</p><p><strong>定时器使用步骤：</strong></p><ul><li>设置特殊功能寄存器TMOD,配置好工作模式。</li><li>设置计数寄存器TH0和TL0的初值。</li><li>设置TCON,通过TR0(使能)置1来让定时器开始计数。</li><li>判断TCON寄存器的TF0(标志）位，监测定时器溢出情况</li></ul><figure><img src="assets/51单片机学习.assets/定时器寄存器.png"alt="定时器寄存器" /><figcaption aria-hidden="true">定时器寄存器</figcaption></figure><figure><img src="assets/51单片机学习.assets/定时器工作模式寄存器.png"alt="定时器工作模式寄存器" /><figcaption aria-hidden="true">定时器工作模式寄存器</figcaption></figure><h3 id="原理图-1">原理图</h3><h3 id="代码-1">代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;reg51.h&gt;</span><br><span class="line">code unsigned char seven_seg[10] = &#123;0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90&#125;;</span><br><span class="line"> </span><br><span class="line">void main(void)&#123;</span><br><span class="line">unsigned char cnt=0;//定义一个计数变量，记录TO溢出次数</span><br><span class="line">unsigned char i=0;</span><br><span class="line">TMOD=0x01;//16位定时器模式</span><br><span class="line">//假设需要20ms溢出一次。</span><br><span class="line">//晶振是11.0592MHZ,那么一个机器周期是：(1/11059200)*12</span><br><span class="line">    //那么x个机器周期是0.02秒： x*12/11059200=0.02  x=18432  ，需要计数18432次</span><br><span class="line">    //那么从65536-18432=47104开始计数，会计数18432次发生溢出。</span><br><span class="line">    //47104的十六进制是0xB800</span><br><span class="line">TH0=0xB8;</span><br><span class="line">TL0=0x00;</span><br><span class="line">TR0=1;//启动T0</span><br><span class="line">P0=0X00;//初始数码管灭</span><br><span class="line">while(1)&#123;</span><br><span class="line">if(TF0==1)//如果发生溢出</span><br><span class="line">&#123;</span><br><span class="line">TF0=0;//清除标志位</span><br><span class="line">TH0=0xB8;//重新赋值</span><br><span class="line">TL0=0x00;</span><br><span class="line">cnt++;</span><br><span class="line">if(cnt&gt;=50)//每秒数码管变动一次，0.02*50=1s</span><br><span class="line">&#123;</span><br><span class="line">cnt=0;</span><br><span class="line">P0=seven_seg[i];</span><br><span class="line">i=(i+1)%10;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实验5外部中断">实验5：外部中断</h2><p>在51单片机中，中断有定时器中断，串口中断，外部中断等等。在使用中断(以定时器0中断为例）时需要：</p><ul><li>开启中断<ul><li>先打开中断总开关EA，</li><li>然后打开需要使用的中断开关ET0，</li><li>最后设置该中断的中断优先级PT0</li></ul></li><li>编写中断服务函数<imgsrc="assets/51单片机学习.assets/51中断寄存器.png"alt="51中断寄存器" /></li></ul><figure><img src="assets/51单片机学习.assets/51中断序列.png" alt="51中断序列" /><figcaption aria-hidden="true">51中断序列</figcaption></figure><p>触发中断后，中断标志位会置1，执行中断服务函数，执行完成后，中断标志位置0</p><figure><img src="assets/51单片机学习.assets/51中断优先级.png"alt="51中断优先级" /><figcaption aria-hidden="true">51中断优先级</figcaption></figure><p>首先中断优先级是数字越小，优先级越高。</p><p>其次中断寄存器中配置的优先级是抢占优先级。在中断查询序列中的默认优先级是非抢占优先级。</p><h3 id="原理图-2">原理图</h3><figure><img src="assets/51单片机学习.assets/外部中断.png" alt="外部中断" /><figcaption aria-hidden="true">外部中断</figcaption></figure><h3 id="代码-2">代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;reg51.h&gt;</span><br><span class="line">sbit LED=P0^0;</span><br><span class="line">void InterruptINT0(void);//中断服务函数</span><br><span class="line">void main(void)&#123;</span><br><span class="line">LED=0;//初始灯灭</span><br><span class="line">EA=1;//使能总中断</span><br><span class="line">EX0=1;//使能外部中断0</span><br><span class="line">PX0=3;//设置外部中断0的优先级</span><br><span class="line">while(1);</span><br><span class="line">&#125;</span><br><span class="line">void InterruptINT0(void) interrupt 0//INT0中断服务函数，INT0的中断号为0。函数名随便取</span><br><span class="line">&#123;</span><br><span class="line">LED=~LED;//改变小灯状态</span><br><span class="line">while(!INT0); //如果按键一直按，等待</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实验6按键消抖">实验6：按键消抖</h2><h3 id="原理图-3">原理图</h3><figure><img src="assets/51单片机学习.assets/按键消抖.png" alt="按键消抖" /><figcaption aria-hidden="true">按键消抖</figcaption></figure><h3 id="代码-3">代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">/******************************************/</span><br><span class="line">//代码运行效果:</span><br><span class="line">//数码管显示数字，当按下KEY1，显示数字加一</span><br><span class="line">//这里使用的方式是通过延时一段时间消除抖动。</span><br><span class="line">//按键消抖可以使用多种方式解决：</span><br><span class="line">//硬件方式：按键两端并联电容(实验5)</span><br><span class="line">//软件方式：延时、中断(实验5)</span><br><span class="line">/******************************************/</span><br><span class="line">#include&lt;reg51.h&gt;</span><br><span class="line"></span><br><span class="line">//code的作用是告诉单片机，定义的数据要放在ROM（程序存储区）里面，写入后就不能再更改。</span><br><span class="line">unsigned char code ledSeg[10] = &#123;0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90&#125;;//数码管显示的数字对应的输出电平</span><br><span class="line">sbit CE=P2^0;//数码管使能</span><br><span class="line">sbit key1 = P3^0;</span><br><span class="line">unsigned char key1_state;       //按键按下的状态变量</span><br><span class="line"></span><br><span class="line">void delay(unsigned char x);</span><br><span class="line">void keyScan(void);</span><br><span class="line"></span><br><span class="line">void main(void)&#123;</span><br><span class="line">char i;</span><br><span class="line">CE=1;//给数码管通电</span><br><span class="line">P0=ledSeg[0];//初始显示0</span><br><span class="line">while(1)&#123;</span><br><span class="line">keyScan();</span><br><span class="line">if(key1_state == 1)                //判断键盘状态变量，如果为1，说明有按键按下</span><br><span class="line">&#123;</span><br><span class="line">i++;                            //显示数据增加</span><br><span class="line">P0=ledSeg[i];</span><br><span class="line">key1_state = 0;                 //数据增加后，键盘状态变量清零</span><br><span class="line">if(i&gt;9) i = 0;                  //数据增加超过9后，回到0</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/******************************************/</span><br><span class="line">//延时函数</span><br><span class="line">/******************************************/</span><br><span class="line">void delay(unsigned char x)          </span><br><span class="line">&#123;</span><br><span class="line">unsigned char i,j;</span><br><span class="line">for(i = 0;i &lt; x;i++)&#123;</span><br><span class="line">for(j = 0;j &lt; 200;j++);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">/******************************************/</span><br><span class="line">//按键扫描函数</span><br><span class="line">/******************************************/</span><br><span class="line">void keyScan(void)&#123;</span><br><span class="line">if(key1==0)&#123;//如果按键1按下</span><br><span class="line">delay(1);//延时一段时间，消除键抖</span><br><span class="line">if(key1==0)&#123;//再对按键检测，如果确实按下，按键状态变量为1</span><br><span class="line">key1_state=1;</span><br><span class="line">while(key1==0);//等待按键松开</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实验7数码管动态显示">实验7：数码管动态显示</h2><h3 id="原理图-4">原理图</h3><figure><img src="assets/51单片机学习.assets/动态显示数码管.png"alt="动态显示数码管" /><figcaption aria-hidden="true">动态显示数码管</figcaption></figure><h3 id="代码-4">代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;reg51.h&gt;</span><br><span class="line"></span><br><span class="line">#define u8 unsigned char</span><br><span class="line">#define u32 unsigned int</span><br><span class="line"></span><br><span class="line">u32 cnt=0;//定义一个计数变量，记录T0溢出次数</span><br><span class="line">u8 ledSelect=0;//动态扫描的位选</span><br><span class="line"></span><br><span class="line">code u8 ledSeg[10] = &#123;0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90&#125;;//段选</span><br><span class="line">code u8 ledBit[6] = &#123;0xfe,0xfd,0xfb,0xf7,0xef,0xdf&#125;;//位选</span><br><span class="line">u8 ledBuff[6]=&#123;0xc0,0xc0&amp;0x7f,0xc0,0xc0&amp;0x7f,0xc0,0xc0&#125;;//数码管显示缓冲区,初始均显示0</span><br><span class="line"></span><br><span class="line">u8 flag1s=0;//1秒定时标志</span><br><span class="line"></span><br><span class="line">void InitTimer0(void);</span><br><span class="line">void InterruptTimer0(void);</span><br><span class="line">void main(void)&#123;</span><br><span class="line">u32 secCnt=0;//记录经过的秒数</span><br><span class="line">P2=ledBit[0];//选择数码管</span><br><span class="line">InitTimer0();//初始化定时器</span><br><span class="line"></span><br><span class="line">while(1)&#123;</span><br><span class="line">if(flag1s==1)//判断1s定时标志</span><br><span class="line">&#123;</span><br><span class="line">flag1s=0;//清零标志位</span><br><span class="line">secCnt++;</span><br><span class="line">//将secCnt变为数码管显示字符</span><br><span class="line">ledBuff[0]=ledSeg[secCnt/3600/10];</span><br><span class="line">ledBuff[1]=ledSeg[secCnt/3600%10]&amp;0x7f;//0x7f是为了点亮小数点位</span><br><span class="line">ledBuff[2]=ledSeg[secCnt/60%60/10];</span><br><span class="line">ledBuff[3]=ledSeg[secCnt/60%60%10]&amp;0x7f;</span><br><span class="line">ledBuff[4]=ledSeg[secCnt%60/10];</span><br><span class="line">ledBuff[5]=ledSeg[secCnt%60%10];</span><br><span class="line">            if(secCnt&gt;=86400)//24*60*60=86400</span><br><span class="line">            &#123;</span><br><span class="line">            secCnt=0;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void InitTimer0(void)&#123;</span><br><span class="line">TMOD=0x01;//16位定时器模式</span><br><span class="line">//假设需要1ms溢出一次。</span><br><span class="line">//晶振是11.0592MHZ,那么一个机器周期是：(1/11059200)*12</span><br><span class="line">//那么x个机器周期是0.001秒： x*12/11059200=0.001  x=921  ，需要计数921次</span><br><span class="line">//那么从65536-921=64615开始计数，会计数64615次发生溢出。</span><br><span class="line">//64615的十六进制是0xFC67</span><br><span class="line">TH0=0xfc;</span><br><span class="line">TL0=0x67;</span><br><span class="line">EA=1;//使能总中断</span><br><span class="line">ET0=1;//使能T0中断</span><br><span class="line">TR0=1;//启动T0</span><br><span class="line">&#125;</span><br><span class="line">void InterruptTimer0(void) interrupt 1//Timer0中断服务函数，定时器0的中断号为0。函数名随便取</span><br><span class="line">&#123;</span><br><span class="line">//重装定时器</span><br><span class="line">TH0=0xfc;</span><br><span class="line">TL0=0x67;</span><br><span class="line">cnt++;</span><br><span class="line">if(cnt&gt;=1000)//每秒数码管变动一次，0.001*1000=1s</span><br><span class="line">&#123;</span><br><span class="line">cnt=0;</span><br><span class="line">flag1s=1;</span><br><span class="line">&#125;</span><br><span class="line">//关闭所有的数码管，消除鬼影</span><br><span class="line">P2=ledBit[ledSelect];//段选</span><br><span class="line">//人眼的反映时间是0．05至0．2秒，假设是60ms，那么这意味着最慢我们应该在60ms完成6个数码管的刷新</span><br><span class="line">//也就是说每10ms刷新一次，否则会产生抖动。</span><br><span class="line">//在这里我们设置定时器每1ms产生一次定时器中断，刷新一次。</span><br><span class="line">switch(ledSelect)</span><br><span class="line">&#123;</span><br><span class="line">case 0: P0=ledBuff[0];break;</span><br><span class="line">case 1: P0=ledBuff[1];break;</span><br><span class="line">case 2: P0=ledBuff[2];break;</span><br><span class="line">case 3: P0=ledBuff[3];break;</span><br><span class="line">case 4: P0=ledBuff[4];break;</span><br><span class="line">case 5: P0=ledBuff[5];break;</span><br><span class="line">&#125;</span><br><span class="line">ledSelect++;</span><br><span class="line">if(ledSelect&gt;=6) ledSelect=0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实验8步进电机">实验8：步进电机</h2><h3 id="参考视频">参考视频</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://www.bilibili.com/video/BV1pz4y1X7dg</span><br><span class="line">https://doc.embedfire.com/motor/motor_tutorial/zh/latest/basis_part/stepper_motor.html</span><br></pre></td></tr></table></figure><h3 id="实验9">实验9：</h3><h2 id="实验1000rs485通信未实验">实验1000：RS485通信（未实验）</h2><figure><img src="assets/51单片机学习.assets/RS485注意点.png"alt="RS485注意点" /><figcaption aria-hidden="true">RS485注意点</figcaption></figure><p>执行流程:</p><p><strong>main.c</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">main函数不断执行：UartDriver();调用串口驱动。</span><br><span class="line">每隔一段时间发生定时器中断：UartRxMonitor(1);对串口接收监控</span><br><span class="line">UartRxMonitor(1);对串口接收监控，</span><br><span class="line">如果从接收数据开始，超过某段时间比如30ms没有在接收到数据，我们认为本次数据接收完毕。</span><br><span class="line">可以给 接收完毕标志位 赋值1，表示完成一次读取。</span><br></pre></td></tr></table></figure><p><strong>RS485.c</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">UartDriver()串口驱动函数会不断判断是否已经完成一次接收，</span><br><span class="line">如果已经完成一次接收：</span><br><span class="line">重置 接收完毕标志位（置0）</span><br><span class="line">会对缓冲区的数据进行处理：清零接收计数器，调用动作执行函数UartAction(*buf, len)等</span><br><span class="line"></span><br><span class="line">UartAction()动作执行函数会执行一些操作比如将接收到的数据进行处理，并发送数据过去。</span><br><span class="line">这个因需要执行的操作而改变，因此动作执行函数会定义在主函数中，由用户自行定义。</span><br><span class="line"></span><br><span class="line">串口中断函数：负责接收数据，以及通过接收计数器计数本次已经接收多少字节数据等</span><br><span class="line"></span><br><span class="line">UartRead():不是用来接收数据，而是将缓冲区接收的数据全部放入指定区域，接收数据的事情由串口中断服务函数负责了</span><br><span class="line">这样做的用处是保存本次接收数据。比如如果两次接收到的数据时间间隔很短，那么在缓冲区中的数据就会被最新一次接收的数据覆盖，上次接收的数据如果要用到就没了。</span><br><span class="line">UartWrite():确实是用来发送数据的</span><br></pre></td></tr></table></figure><p>执行流程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">该代码是将接收到的数据原样返回。</span><br><span class="line">首先main会不断调用串口驱动UartDriver();但由于还没有接收到数据，所以什么也不会发生。</span><br><span class="line">在没有接收到数据这段时间，UartRxMonitor(1);不断对串口接收监控，由于什么也没接收到，所以什么也没发生。</span><br><span class="line"></span><br><span class="line">当接收到第一个字节的数据开始，串口中断函数会接收数据，把数据保存在接收数据缓冲区bufRxd。并计数cntRxd,表示本次接收已经接收了cntRxd个字节的数据。假设本次接收会收到10个字节数据。</span><br><span class="line"></span><br><span class="line">在这期间，每隔指定的时间，定时器中断会调用UartRxMonitor()监控串口接收。</span><br><span class="line">/**************************</span><br><span class="line">cntbkp用来保存接收计数器cntRxd上个时间的状态，如果与cntRxd相同，说明本段时间没接收到新数据。</span><br><span class="line">cntRxd为0表示总线空闲，大于0表示一次接收正进行。</span><br><span class="line">在已经开始本次接收（cntRxd!=0)的情况下</span><br><span class="line">如果本段时间空闲（cntRxd==cntbkp)，那么进行时间计数idletmr++，当时间计数超过某个值，</span><br><span class="line">我们可以认为本次接收完毕，接收完毕标志位flagFrame置1</span><br><span class="line">如果本段时间不空闲，更新cntbkp状态，清零时间计数idletmr。</span><br><span class="line">如果总线空闲（cntRxd==0)</span><br><span class="line">重置cntbkp状态为0</span><br><span class="line">****************************/</span><br><span class="line">在这期间，cntbkp和cntRxd会不断更新，直到本次接收结束（flagFrame=1）（此时cntbkb=cntRxd=10)</span><br><span class="line"></span><br><span class="line">而串口驱动函数UartDriver()在主函数中不断执行，所以当接收结束（flagFrame=1），UartDriver()会立马识别到，并采取操作：</span><br><span class="line">清除接收完毕标志位（flagFrame=0）</span><br><span class="line">清零接收计数器（cntRxd)，表示总线空闲了</span><br><span class="line">在该代码中本函数中是采取了 对缓冲区数据原样发送回去 的操作。</span><br><span class="line"></span><br><span class="line">这时在经过一段时间，定时器中断调用UartRxMonitor()时：</span><br><span class="line">会发现总线空闲，清零cntbkp。</span><br><span class="line"></span><br><span class="line">现在cntbkp，cntRxd，flagFrame都为0，总线空闲，恢复到最初的状态了。</span><br><span class="line">如果下次再接收到数据，重复上述步骤。</span><br><span class="line"></span><br><span class="line">所以在下一个实验使用485协议按照Modbus进行操作时，我们更改的是对接收数据进行处理的函数UartAction。</span><br><span class="line">在串口驱动函数中使用了将缓冲区数据保存起来的函数UartRead()，我认为，需要时也可以重写。所以在先前的叙述中，没有过多解释UartRead()函数。</span><br></pre></td></tr></table></figure><p><strong>RS485.c</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;reg52.h&gt;</span><br><span class="line">#include &lt;intrins.h&gt;</span><br><span class="line">sbit RS485 DIR = P1^7;//RS-485方向选择引脚</span><br><span class="line"></span><br><span class="line">bit flagFrame = 0;//帧接收完成标志，即接收到一帧新数据</span><br><span class="line">bit flagTxd = 0;//单字节发送完成标志，用来替代TXD中断标志位</span><br><span class="line">unsigned char cntRxd = 0;//接收字节计数器</span><br><span class="line">unsigned char pdata bufRxd[64];//接收字节缓冲区</span><br><span class="line"></span><br><span class="line">extern void UartAction( unsigned char * buf, uns igned char len);</span><br><span class="line"></span><br><span class="line">/*串口配置函数，baud为通信波特率* /</span><br><span class="line">void ConfigUART(unsigned int baud)</span><br><span class="line">RS485_ DIR = 0;//RS-485设置为接收方向</span><br><span class="line">SCON = 0x50;//配置串口为模式1</span><br><span class="line">TMOD&amp;= 0x0F;//清零T1的控制位</span><br><span class="line">TMOD | = 0x20;//配置T1为模式2</span><br><span class="line">TH1 = 256- (11059200/12/32)/baud; //计算 T1重载值</span><br><span class="line">TL1 = TH1;//初值等于重载值</span><br><span class="line">ET1 = 0;//禁止TI中断</span><br><span class="line">ES= 1;//使能串口中断</span><br><span class="line">TR1 = 1;//启动T1</span><br><span class="line">&#125;</span><br><span class="line">/*软件延时函数，延时时间(t* 10)μs */</span><br><span class="line">void DelayX1Ous( unsigned char t)</span><br><span class="line">&#123;</span><br><span class="line">    do &#123;</span><br><span class="line">        _nop_ ();_nop_ ();_nop_ ();_nop_ ();_nop_ ();</span><br><span class="line">        _nop_ ();_nop_ ();_nop_ ();_nop_ ();_nop_ ();</span><br><span class="line">    &#125; while(--t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*串口数据写入，即串口发送函数，buf为待发送数据的指针,len为指定的发送长度*/</span><br><span class="line">void UartWrite( unsigned char *buf, unsigned char len)</span><br><span class="line">&#123;</span><br><span class="line">RS485 DIR = 1;//RS 485设置为发送</span><br><span class="line">while (len--)//循环发送所有字节</span><br><span class="line">&#123;</span><br><span class="line">flagTxd = 0;//清0发送标志</span><br><span class="line">SBUF =*buf++;//发送一个字节数据</span><br><span class="line">        while (!flagTxd);//等待该字节发送完成</span><br><span class="line">&#125;</span><br><span class="line">DelayX10us(5);//等待最后的停止位完成，延时时间由波特率决定</span><br><span class="line">    RS485_DIR = 0;//RS485设置为接收</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*串口数据读取函数,buf为接收指针，len为指定的读取长度,返回值为实际读到的长度*/</span><br><span class="line">unsigned char UartRead( unsigned char *buf, unsigned char len)</span><br><span class="line">&#123;</span><br><span class="line">    unsigned char i;</span><br><span class="line">    if (len&gt; cntRxd)//指定读取长度大于实际按收到的数据长度时，</span><br><span class="line">    &#123;//读取长度设置为实际接收到的数据长度</span><br><span class="line">        len=cntRxd;</span><br><span class="line">    &#125;</span><br><span class="line">    for (i=0; i&lt;len; i++)//复制接收到的数据到接收指针上</span><br><span class="line">    &#123;</span><br><span class="line">        *buf++ = bufRxd[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cntRxd = 0;//接收计数器清0</span><br><span class="line">    return len;//返回实际读取长度</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*串口接收监控，由空闲时间判定帧结束，需在定时中断中调用，ms为定时间隔*/</span><br><span class="line">void UartRxMonitor(unsigned char ms)</span><br><span class="line">&#123;</span><br><span class="line">    static unsigned char cntbkp = 0;</span><br><span class="line">    static unsigned char idletmr = 0;</span><br><span class="line">    if (cntRxd &gt; 0)//接收计数器大于0时，监控总线空闲时间</span><br><span class="line">    &#123;</span><br><span class="line">        if (cntbkp != cntRxd)//接收计数器改变，即刚接收到数据时，清0空闲计时</span><br><span class="line">        &#123;</span><br><span class="line">            cntbkp = cntRxd;</span><br><span class="line">            idletmr=0;</span><br><span class="line">        &#125;</span><br><span class="line">        else//接收计数器未改变，即总线空闲时，累积空闲时间</span><br><span class="line">        &#123;</span><br><span class="line">            if (idletmr &lt; 30)//空闲计时小于30ms时，持续累加</span><br><span class="line">            &#123;</span><br><span class="line">                idletmr += ms;</span><br><span class="line">                if (idletmr&gt;= 30)//空闲时间达到30ms时，即判定为一帧接收完毕</span><br><span class="line">                &#123;</span><br><span class="line">                    flagFrame = 1;//设置帧接收完成标志</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        cntbkp = 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*串口驱动函数，监测数据帧的接收，调度功能函数，需在主循环中调用*/</span><br><span class="line">void UartDriver()</span><br><span class="line">&#123;</span><br><span class="line">    unsigned char len;</span><br><span class="line">    unsigned char pdata buf[40];</span><br><span class="line">    if (flagFrame) //有命令到达时，读取处理该命令</span><br><span class="line">    &#123;</span><br><span class="line">        flagFrame = 0;</span><br><span class="line">        len = UartRead(buf, sizeof(buf)- 2); //将接收到的命令读取到缓冲区中</span><br><span class="line">        UartAction(buf, len); //传递数据帧，调用动作执行函数</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*串口中断服务函数*/</span><br><span class="line">void InterruptUART( ) interrupt 4</span><br><span class="line">&#123;</span><br><span class="line">    if (RI)//接收到新字节</span><br><span class="line">    &#123;</span><br><span class="line">        RI= 0;//清0接收中断标志位</span><br><span class="line">        if (cntRxd &lt; sizeof(bufRxd))//接收缓冲区尚未用完时，</span><br><span class="line">        &#123;//保存接收字节，并递增计数器</span><br><span class="line">            bufRxd[cntRxd++]=SBUF;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (TI)//字节发送完毕</span><br><span class="line">    &#123;</span><br><span class="line">        TI=0;//清0发送中断标志位</span><br><span class="line">        flagTxd=1;//设置字节发送完成标志</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>main.c</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">#include &lt; reg52.h&gt;</span><br><span class="line">unsigned char T0RH = 0;//T0重载值的高字节</span><br><span class="line">unsigned char T0RL = 0;//T0重载值的低字节</span><br><span class="line">void ConfigTimer0(unsigned int ms);</span><br><span class="line">extern void UartDriver();</span><br><span class="line">extern void ConfigUART unsigned int baud);</span><br><span class="line">extern void UartRxMonitor( unsigned char ms);</span><br><span class="line">extern void UartWrite( unsigned char *buf, unsigned char len);</span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">    EA= 1;//开总中断</span><br><span class="line">    ConfigTimer0(1);//配置T0定时1ms</span><br><span class="line">    ConfigUART(9600);//配置波特率为9600</span><br><span class="line">    while (1)</span><br><span class="line">    &#123;</span><br><span class="line">        UartDriver();//调用串口驱动</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*串口动作函数，根据接收到的命令帧执行响应的动作</span><br><span class="line">buf为接收到的命令帧指针,1en为命令帧长度*/</span><br><span class="line">void UartAction(unsigned char *buf, unsigned char len)</span><br><span class="line">&#123;</span><br><span class="line">//在接收到的数据帧后添加换车换行符后发回</span><br><span class="line">buf[len++]=&#x27;&#x27;\r&#x27;;</span><br><span class="line">    buf[en++] = &#x27;\n&#x27;;</span><br><span class="line">    UartWrite(buf, len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*配置并启动TO,ms为T0定时时间* /</span><br><span class="line">void ConfigTimer0( unsigned int ms)</span><br><span class="line">&#123;</span><br><span class="line">    unsigned long tmp;//临时变量</span><br><span class="line">    tmp = 11059200/ 12;//定时器计数频率</span><br><span class="line">    tmp = (tmp*ms) / 1000;//计算所需的计数值</span><br><span class="line">    tmp=65536-tmp;//计算定时器重载值</span><br><span class="line">    tmp=tmp+33;//补偿中断响应延时造成的误差</span><br><span class="line">    T0RH = (unsigned char)(tmp&gt;&gt; 8);//定时器重载值拆分为高低字节</span><br><span class="line">    T0RL = (unsigned char) tmp;</span><br><span class="line">    TMOD &amp;= 0xF0; //清0 T0的控制位</span><br><span class="line">    TMOD| = 0x01;//配置T0为模式1</span><br><span class="line">    TH0 = T0RH; //加载T0重载值</span><br><span class="line">    TL0 = T0RL; </span><br><span class="line">    ET0 = 1;//使能T0中断</span><br><span class="line">    TR0 = 1;//启动T0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* T0中断服务函数，执行串口接收监控*/</span><br><span class="line">void InterruptTimer00) interrupt 1</span><br><span class="line">&#123;</span><br><span class="line">    TH0 = T0RH;//重新加载重载值</span><br><span class="line">    TL0 = T0RL;</span><br><span class="line">    UartRxMonitor(1);//串口接收监控</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="项目">项目</h1><h2 id="项目1电子表程序设计">项目1：电子表程序设计</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span c</summary>
      
    
    
    
    <category term="嵌入式" scheme="http://example.com/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>红米9AROOT</title>
    <link href="http://example.com/blog/6.html"/>
    <id>http://example.com/blog/6.html</id>
    <published>2023-11-21T15:45:00.048Z</published>
    <updated>2023-11-22T23:34:00.848Z</updated>
    
    <content type="html"><![CDATA[<h1 id="所有使用到的安装包">所有使用到的安装包：</h1><p><strong>小米官方解锁工具miflash：</strong>http://www.miui.com/unlock/done.html<strong>解包提取boot：</strong>https://magiskcn.com/payload-dumper-go-boot<strong>下载MIUI系统对应的系统包：</strong>Xiaomiom.com 、https://miuiver.com/<br /><strong>Magiskapk：</strong>https://github.com/HuskyDG/magisk-files/releases 或http://miuiver.cn/?post=189<strong>解包提取boot：</strong>https://magiskcn.com/payload-dumper-go-boot<strong>adb-fastboot：</strong>https://mrzzoxo.lanzoub.com/b02plghuh<strong>Riru lsposed</strong>：https://github.com/LSPosed/LSPosed<strong>Riru：</strong>https://github.com/RikkaApps/Riru/releases/tag/v26.1.7</p><h1id="step1打开开发者模式允许usb调试">Step1：打开开发者模式，允许USB调试</h1><p><strong>设置--&gt;我的设备--&gt;全部参数--&gt;多次点击MIUI版本即可打开开发者模式</strong></p><figure><img src="assets/红米9AROOT.assets/IMG_20230920_071049.jpg"alt="IMG_20230920_071049" /><figcaption aria-hidden="true">IMG_20230920_071049</figcaption></figure><p><strong>设置--&gt;更多设置--&gt;开发者选项--&gt;打开USB调试</strong></p><figure><img src="assets/红米9AROOT.assets/IMG_20230920_085325.jpg"alt="IMG_20230920_085325" /><figcaption aria-hidden="true">IMG_20230920_085325</figcaption></figure><h1 id="step2解锁bl锁">Step2：解锁BL锁</h1><h2id="先绑定设备小米手机插卡绑定设备7天后才可以解锁">先绑定设备，小米手机插卡绑定设备7天后才可以解锁</h2><p><strong>设置--&gt;更多设置--&gt;开发者选项--&gt;设备解锁状态--&gt;绑定设备</strong></p><p>由于我已经解锁，所以从网上找了个图。 <imgsrc="assets/红米9AROOT.assets/ce1850a21d569bc60ff3137bed7be23ae2d5660b.jpg"alt="ce1850a21d569bc60ff3137bed7be23ae2d5660b" /></p><h2 id="解锁bl锁">解锁BL锁</h2><p>到小米官方网站下载官方解锁工具miflash:http://www.miui.com/unlock/done.html手机连接电脑后，关机状态下同时长按音量减与开机键，进入Fashboot，然后按照miflash上的提示操作，解锁BL锁。注意，解锁会清除数据，请提前做好数据备份。</p><h1 id="step3-下载安装面具magiskroot-权限管理">Step3:下载安装面具Magisk（Root 权限管理）</h1><h2 id="下载安装面具">下载安装面具</h2><p>安装Magisk apk:https://github.com/HuskyDG/magisk-files/releases下面的就是Magisk2.6.301版本的debug版本的apk与release版本的apk,随便选一个安装到手机就行。不能登录github的可以在这里下载：http://miuiver.cn/?post=189</p><figure><img src="assets/红米9AROOT.assets/c0218845ee344d99a96bb00a199f3115.png"alt="在这里插入图片描述" /><figcaption aria-hidden="true">在这里插入图片描述</figcaption></figure><h2 id="安装apk">安装apk</h2><p>如图，安装后打开Magisk应用后，Magisk和管理器都有显示版本号算是安装成功，step3完成。但是管理器是开始就安装了的，Magisk开始没有(不显示版本号），是我后来再安装的，步骤下来会介绍。</p><figure><img src="assets/红米9AROOT.assets/IMG_20230920_090949.jpg"alt="IMG_20230920_090949" /><figcaption aria-hidden="true">IMG_20230920_090949</figcaption></figure><h2 id="安装boot.img和magisk">安装boot.img和magisk</h2><p>下载MIUI系统对应的系统包：Xiaomiom.com 、 https://miuiver.com/都是可以下载系统包的地方。 解包提取boot：<ahref="https://magiskcn.com/payload-dumper-go-boot">Payload-dumper-go-boot</a>（如果系统包有<strong>boot.img</strong>，可以跳过此步骤）。我这个系统包是有boot.img的，这里不做解包提取的讲解，请参考教程：<ahref="https://magiskcn.com/">Magisk安装教程 - Magisk中文网(magiskcn.com)</a>将boot.img移动到手机中，比如download文件夹下，然后打开手机Magisk应用中的Magisk更新选项，选择”选择并修补一个文件“，选择boot.img，进行安装</p><figure><img src="assets/红米9AROOT.assets/IMG_20230920_094250.jpg"alt="IMG_20230920_094250" /><figcaption aria-hidden="true">IMG_20230920_094250</figcaption></figure><p>界面出现All done，boot.img安装成功</p><figure><img src="assets/红米9AROOT.assets/IMG_20230920_094454.jpg"alt="IMG_20230920_094454" /><figcaption aria-hidden="true">IMG_20230920_094454</figcaption></figure><p>boot.img安装成功后，文件夹下（这里是Download文件夹）会出现magisk-patched-26301-qY4gL.img这样的img文件<img src="assets/红米9AROOT.assets/IMG_20230920_094734.jpg"alt="IMG_20230920_094734" /> 电脑下载 <strong>adb-fastboot</strong>：<ahref="https://mrzzoxo.lanzoub.com/b02plghuh">lanzoub.com/b02plghuh</a>（解压出来)</p><p>手机插电脑，文件传输模式，把 <strong>boot.img</strong> 和<strong>magisk_xxx.img</strong> 两个文件复制到<strong>adb-fastboot</strong> 目录</p><p><img src="assets/红米9AROOT.assets/image-20230920095143380.png"alt="image-20230920095143380" />关机状态下同时长按音量减与开机键，进入Fashboot。然后打开”打开CMD命令行“输入以下的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastboot flash boot 面具文件</span><br></pre></td></tr></table></figure><p><a href="https://magiskcn.com/waiting-for-any-device">waiting for anydevice（安卓手机通用驱动） - Magisk中文网 (magiskcn.com)</a><imgsrc="assets/红米9AROOT.assets/QQ截图20230920101500.png"alt="QQ截图20230920101500" /> 如果出现&lt; waiting for any device&gt;，请参考<ahref="https://magiskcn.com/waiting-for-any-device">waiting for anydevice（安卓手机通用驱动） - Magisk中文网(magiskcn.com)</a>进行解决，再行输入命令。</p><p>如先前所说，打开Magisk应用后，Magisk和管理器都有显示版本号算是安装成功，step3完成</p><h1 id="step4-安装riru和riru-lsposed">Step4: 安装Riru和Riru lsposed</h1><p>Riru lsposed:https://github.com/LSPosed/LSPosedRiru:https://github.com/RikkaApps/Riru/releases/tag/v26.1.7</p><p>下载Riru和Riru lsposed，放在手机文件夹下(比如Download)</p><figure><img src="assets/红米9AROOT.assets/image-20230920102454725.png"alt="image-20230920102454725" /><figcaption aria-hidden="true">image-20230920102454725</figcaption></figure><p>打开面具Magisk--&gt;模块--&gt;从本地安装，安装Riru和Riru lsposed</p><figure><imgsrc="assets/红米9AROOT.assets/Screenshot_2023-09-20-10-26-54-373_io.github.huskydg.magisk.jpg"alt="Screenshot_2023-09-20-10-26-54-373_io.github.huskydg.magisk" /><figcaptionaria-hidden="true">Screenshot_2023-09-20-10-26-54-373_io.github.huskydg.magisk</figcaption></figure><p>安装成功后，root完毕(Riru lsposed我没有安装成功，可能它没啥用吧)。root成功后，安装Re管理器或MT管理器，会请求最高权限，同意后就可以操作像是data/data这样本不能操作的文件了。</p><h1 id="section"></h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;所有使用到的安装包&quot;&gt;所有使用到的安装包：&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;小米官方解锁工具miflash：&lt;/strong&gt;http://www.miui.com/unlock/done.html
&lt;strong&gt;解包提取boot：&lt;/strong&gt;http</summary>
      
    
    
    
    <category term="其他" scheme="http://example.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>IIC</title>
    <link href="http://example.com/blog/4.html"/>
    <id>http://example.com/blog/4.html</id>
    <published>2023-11-21T15:45:00.048Z</published>
    <updated>2023-11-22T23:35:21.323Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="6f0d71f7075cc0367e652087809ede4b3ffc7bd229c5813def63db5a2e1cfeba"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这些是草稿或不便于观看的内容，需要密码。</summary>
    
    
    
    <category term="嵌入式" scheme="http://example.com/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
    <category term="草稿" scheme="http://example.com/tags/%E8%8D%89%E7%A8%BF/"/>
    
  </entry>
  
  <entry>
    <title>GPT_QQ机器人搭建</title>
    <link href="http://example.com/blog/1.html"/>
    <id>http://example.com/blog/1.html</id>
    <published>2023-11-21T15:45:00.047Z</published>
    <updated>2023-11-22T23:34:16.182Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="4743ee2e7b889d611e732b19bfce31e003c4b2758f4aa9307ee276cb86bf0c28">161e93c4419f838fba4978c15eeea98b08db101af874682ebb41d8fb0077903d</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这些是草稿或不便于观看的内容，需要密码。</summary>
    
    
    
    <category term="其他" scheme="http://example.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="草稿" scheme="http://example.com/tags/%E8%8D%89%E7%A8%BF/"/>
    
  </entry>
  
  <entry>
    <title>Git_Hexo_Obsidian共同搭建个人博客</title>
    <link href="http://example.com/blog/2.html"/>
    <id>http://example.com/blog/2.html</id>
    <published>2023-11-21T15:45:00.047Z</published>
    <updated>2023-11-24T04:33:17.345Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="067b92dcb8dc9f3ed9a70d52c192b365526d65956e96dd1b4248efa9202bda97">161e93c4419f838fba4978c15eeea98b25f81897d05af6d23a1cd422e4f4e9648703883b59d9fcaa4020443c1f790f577077b23933bf88b96ead90a996decda6fa83b405c7052a3564671a61e9a14ecb115bfff60fedbc31c8cb69c766aeba43858667c1c76a9a04ce856f689db59a09e9649d8c27da005b8275446af43cb2ed1f130f09c6672f2b0911e58f21b3bf313ef86a0b961d2a689b4fd435f9ab0a122aab2b0ae601082be15418da86f66e016c80a2038a835bc1e1ed945d50ac5af52c31f890d5407266cfa47bdce0c988627632186e04c24e20ae81a0ec2e597a786428427a2146f38be2b3e1df3698dec215148faf5313232644a1f7cd830961b532c4d97e4d93a6a74a026a2fde4850e4ac42b8bd05790a6e73340571dd44af1c41d25317aebb3c52e973a0a9d010c26ff8a9e6f14fd052e9c49f44c42b01b182ec76719fa9b14cfab4806a5114bdbc90a7956a9012107de213e5957986d2d50fa398c99945aee173d97263669bb42467583b72678de939fcc8711160e8396279c85d7ed29fa4b694ad2c8f78c8aebdac27fd76a82981e7f21074462e3e8d8e9465025bf42aa51f208c138b0831ba6acb08f2323344fa4655b65be4257987256fb84486bec7409e8e9dc77f6683c9dda32dfa8016b6cc5a0b7bc6ca2b6eb1ac0dbd0f1f5e8de56b3ae0b28dacc99644c4bb82897e5abcff81b8b320145d5d07eaddc32cd61eacee0ecaaf952e57567fa68e0ac1021741e942b56dd952fc558840fc6cd6e4353d692347fdc67527f3915d6d8b12d6246b38292686e27a663ea6ec15b92b2cb07cf3b775c3c5b189481ed798753886d7e18962daa279cdeb9c5e69cb1362513c762648b3a874c7d5c49ef857192e4bd86960e8338158fc7d37e1a1c349cc86f04a52ce0f9dd0569194f412fa8261264a58073af136b8a26e999dbab5ed6e4f05ffb5f340558f13be728aaee278b2aa6d5a183d7aa9658eedd5ee10692177fa4cb393479adcbbeae626b320f313e9042b1ec538e058020e545aca6a179e206c961d70fb07ad11434caf9e85ff05a45dfccae033d27a67840db9f13d786f42eaf224ec7c48f38dcb1503af8d2ddeb31502c02fc870bb0f478692b69bdac9a732ae89ec3ce3c55d7c5cd0e0f6626fc6e625b9eac18d28d7aa865fa854845cb9ce0a32109cc5c46d0144466f9129d1f89fb9cfc589aed73ddeca99f7c2734c3c80300ed6bdc13c5ca5439a2f97e6dde961fdde4ea6f6fd150ffc6dcc63c25a9e97cb15fafcfe4e4952a13ad0f5f16a456e2876619af2edb262d1e7f0570623deb82001f51c3cb6f47a91b7119309e12437905e8c02fd82f26cc8e25522e25994ca21d87a6c7e6efee20e60434ffe83fced3eb9771ec04e2868b599bf25b2d7685a90e0c7a46b9575ad74f6780fed46f9cf418f155bd07c3cf25a5568efcc28877291cd31d414b656471d6eff00b391e40d2dd56c99a4055713f817ff33ec901c04560cf9badf12700490ea0f418e6036cbbbffe46c2715f6f79be09f5dc10aa05a85facd7edf4228955625a56307fea71f23b1e710c2392f8b64d324fc229f39f63e42f99b5f1148e8ce67be50e6826ce7515a5e1c87e78412a378b1bf3b1ac3ede4f2849f6b091aecd2a8bb513ae3a5365e68019e2f013c36e3c485116c4a4fab8cdb2f5c37a31a89cec6d39ab80b663de41b44c2a5a3cfe5938400f41d9abc6d6dec4ab9a61b9a8266d7b8522f4ff025c845c393c517a4a7497bfb513f897bc3d7bfc1e801b89034004b9fcd642c52b697555b59748db6c4fbdee48e9a823a06d5096dcfca25eb9c34d902f3f0b36520d3319863254f716477b1a7b98ec95259e65656905e5b6d39c84764aa05053a5f60abae7c56eb3630eab3c8837b40c5f60fee9cdecd8458dc365e2f638a21a6c98df6c1e67e4b4e363384b1f5ed8c53f99e0c42d45cb3877f48b6346f7d4de29e0c2c57836b4869539e984bb64b548d4188a48eaa75cab5fa11b94999962f54a2f4ca5e2b1e6e731aa72a98532f2bcc89207afc2735a46b118d9b3dde6b31be4ff94e6481a8716aba81842e3984aa6da578b209173104e73e3cc5e36be8fb284f9517642231cf3f37e2afaf9b5c5c7ff71e6a48849d1979110df59174e18b16449cad75a176e98b4383afb74aa926b522043a7fc01eaf4d025f6b03b2178a34fb5275e728d1aeb2539e0fc766c6d17a4d83c64d8c89c699dceb2014e2d00890c6bc9e1463ee331d62462bf5ef39d7cb8494caedeab57722509cef7d81e5b5484d2cc0a6d79d71ba2548f67a5c47276fa16388ebf59dc3216b75fb55099adf15d4fe7a5d240d7f11442c92dacb95873056d82d5506b1d469ba7f08620185d27bbbd86d747c317a12002d1383c22dc6e217f46395f185107601210e96aff7dc97769c5471713bc17fec2095f25511005520737c32e88b228789eb9f51d2912245d8b9f7f9f7daf4f7e394d3ef906a62bca6fe56258adb981cba77ee833346695c6c1822b37ce3857c1e94c869802ea2f44647c0dee214ce8007b978d01565687af7887d76158db44c162e58c8e870ff0fdd10be5ebaea0e85147167d4bc2830334737cffe8e26c97329fb349f9df6d74363e7109f6cbaa986336be1f286afb1171fd5cdf83e01a6bf3342fb1713c5484d9abde0ea642954321c3bc43e67af1184e051c6ecee0e0a4bb92e4629218110f099b83d67d2183086f0633d07fea3f5e9e62a7ef7f509130877acf022545196a82e0801027a69fc8cfb4a501deffe8a1fe553b7e142443fb7f54a8c36d41ad13b71f89fed14d09e8c5f7e8b75d70720fb222908c8f232ab7b756c0c4990111cc2be0e26243595c1632f5cf777e0452db7032a2c8a3caf6ae921fda60dd4f148778a7528f90b4fa8821125e9a72e406266fa9e43e75480df9ce45f0b4f38b6a5e67db568b6f0fc60b932ce0ab52ccd5fdce3a1ec0bc58e0765646e9c1aeafe8a2a17ca7d78d895b882214376aa1de359b776c7f27076d50fa376cc5388d73b2a42deaed991ab3d87a942b9c529473527b9a05425743024ed1d731f67c439e243d9a03136d7803c7f57f95552f6ccb762e3e97b7d1e2e9569577e40e7b3f6018940746f806b3bf10e173c2625db24d3802389dd7a72ed66f81c438fa8488308fe8467046990fa294389b3eadc8cf6f68e077d246fd5b57ff47e678e8845e9a7d1ba892c24807ea6f1979a5f15f78bd6fe7ce01d622f7af37092896a5e8fdc6db54aefb5e56eda97e08b78fa5deea697f61778df5ba0b50714279eefc0e10e5fccab7f62cf0b895809a2f8a80de26197bf362087637979364c2853e86a7bc8ee0d277158428f763afa65dd786f9f1c03d5069327eea2c85c8c311fd37320baec43dfe6b05b11b56fdd655531f43f7643cfe9dd488e9c4d7361c75c89e1f37afbfacff80ab79dd032097a5e50abb51f3e6168adc106ecec4b37d750b3f050632673d3c43bebe301c08e45871febf03360d6b609cd27e7a66fbb5bd43fa1c6b9b596d9f86eb7a6649042dfde1b20fdae1c790e462be8561e0dc522c90eeba8be218cc5cfb1485671cf8d842e520df80c5c628a8ef166c0234674a77a1e344d6dc3e4a17a844099bae435e0cc71a4a93a4f5c7d8517a416efcef593d86ea75d3de42fe4752199dc8e13fbf63f9f5adce1a8440f8e6dc348a51c1e242f63a00f479d98895a205d226444143662bb7fa0ebcdf12f0f9dec976964b5f36dde08a257e76085a60613e6fa79615217971351193b1903efe5bffee352398b5a79a92307e026d62fdbb6e8786e3349a606fbd8cb6a0640b45ef82fa6ffd13a8f8adc88168adb08fd47f961f2e64dd6f220e48233e1f0aa951c9773baeaa55da55151890b435dd16dc8a72c2cecf93aca0c48b065d894e3eb226aa73ee3c8f03d5cb094611ed8965298f4f0c7b28d6f9094c84ec832c5a2d34abeb8543d3ec2cb91f52dd0c3666d9f62bd5deab0426df33104788a5b7f775a718365903d196a3b4291f43744423afb6d8013a1395acbcd2807a6e8099377a726d71afd876970ec2e99cf498c92f3ddad843db0cc9c5cc26bb938fc455b9d11100775aff49bb419129c7b71d33b7abf4aee569256b4dda3f097a8720f4b1be9369cbf2bd5f1ebb77cef5d595dba111255b451778c5b198d02db599a1a13116ef7c64d0455211977670d2a6db96a3104fba37041ea31cbf8fc0ecf177f74fabb87997ef1893dd5e4162bc33c2ec1abbf9cd9955e9c0090722079c3014f3de299f28b5840171a6c2b1cee83ea13fdd498b8dcce5c98545d7f0fecd9709552b46d021c300dc0333265bcefecac9135c0ab3154c551865d436e4389c812cd5f7104401333865bbfdb62f1de1f11406a98ef6ab9b13d203abe069f97554b6eeba2bb07f6f209724b9fabefd48cc2f8e558113cd3d32e66b4fb335b771ca547749afdba0a6018fa0e9c2c132b276f8856949d12bc9cb363cd06228cd1125827cbccf6033a1b248aa56dbc610fe6f220c52c9a6349ed23d1378d64d5dccd6286cf18c1dd05c762d25515bea4dcf02223af9a60a9cf30e3457682de19f58b44cab3478645cbe939f6b0c7a4d9e372b241328cda83e0c53af0440745ae8a1e65ad082b4c33763b1ad96e5774c61a9e88ad0fc4b46be737106a35e7f7c6c3c4350f9a7782eaf9b3e98042f193a6dc821f620496e50c6875ba5ed82f126be6f5ea809c896320c5f8ed551941ae0fad56df156876c975f463ac557a1339d2780167d60f3531ade1a93931bc86ab4d70be4cc1115373c8030d9d34aab3e1eeec45cc0725daa0a4350880b28c1ea342ded700e375c4f5abbd61bb759f2dd5df486d361c5837f1ad516c7bbc09dfcd73ce0e1e36792001b8666d2b816ec70fc54c4d140b3d1672caa3029e6fe3e99b525fbed07ef2c30e1b43a30d6c87c2653d2f3ee4e921bcd00b62c88240fe125ad982c382716eb19f1d84cf6e004470221cc407ac4aa591c73df8513d59eba96768dc1e521e8a2e5c21196dbaa63f91596ff38db5410d30861d5d7bd8020848d1adde3959f2cfe0d9850f6f01f2a87ad05797418c74c1ed98a82fbdb5cec271b7ef4e319756e63e54b9167bdc14431eb516726efda2a36f9e2343b670578c0e9e5edd18e47a3fa7935675551ebf0e614a1e82584feabd441ea766763191343f8ea17479598beedb70f829db3e02687f9f78736dd35b7dd862b80d335b2f4ddb841487355dde56a0eb85beb1ff6d374cc07a67f83f9956e74f59b9ca562f966eb7b7f60410e4e923781514ea908aaa6e60d2f805ab947894cdb1dc025b394892c799f0ae0c252d23e09d55996045568d900f4ef9472760fa9707a7fab39abca45f9faec22f0434b65699eb827b2698c8433ddd793bd489451054e8c00befa35d3938e75053397c46d0007b666b00f1dd5fcd2947439ab8b823f949d4d57729a46dfbce1ed724ad790fe0bcf6217b270240680b332486f06a168deaa13488c1976f7b26d7a5b6677be2248da52aeb833d488f065f15f593b78960ba5f73639488189179451da2affbf1877a584787b9409b735df29c13e5b5c3a6dd64632c82b1cc09308ddbf396b715fbda10f37e161d78f2935e3f9d4d83c687b29f5ea3ff5d9f8c685e747dbae641e47a05884050bac9bd486606fc0d67f6a82a71c7047a47612902d57c59da0db4ee527cb9bfd36a4abf786246762f174639362c9abe2bb7cfe25349716d160796a3fb78362cebcf8f4ca0f395af1439cd91229ca466c1d1ed12258cc721bee69fb07c76dcf7e76ebcc926bebd00f894a81466e7b8e83e7178384a7dba807d94571ea33c834806789d3e2004af4534c99ba070177686f8d22e3a5163098ce507b90659fba4be2c6bf5586e873ade1457d6dc51e096d8a9327249aa755f945561d0b5fcede2a6fa8566c7438dcb3bee124a5f86fb0a9ee212e4cf36bea960c9372dd4f15a0fcd4971720f0f697e07e42260876b99276ee374e9898df6a09bbece8665294023c1235d2405215e1deed69eb4484b35185490a57e44c4050d2720b4f64d544d8d443e460ae1dd7903b5d4be53b6380f5120421ca028b4e8c68af10165038ffca2ad7c749b85dd87ed88f7c3aa65bff359542a50947c389dda4ca36c4221db7038c507adf14577dade19cc7552b852bc7fec3613e56046936b3ebe54a9fe0cc8c06fc039781966b93e95e98fe111f3deb7bc4127acc855bfbed6f206b9338ee584abecdc3db2e5568ca74ad6e39f40e29a08bbb3154c3477f72b8a7923eb44fff45700a2b12b213bee313a61b113413927a4a104dc203350089254c132e77c76edc3a6574c8d0aeed56e44c734880885aa315e870887d4e4158aed0b9129d09faffee189644aa4a26e5b759c22b58223a11758d8cfe2df00f7d438de6b5adb81dacc5d9e6275a782a71f664ff34d58d70c417e0f8cceff0d30150ce7f35dcfd9633c208b4f8ab661f3e66e783264fbbe243815dbc3e68befc10ef49e72be66118dfd1ce603f7fc7efc5870c2e7ac447e5c5ad8419053565625d2a35f42a5d658e064d880b25d8c8eb2f9c3f45d7e4f5d47b92f1d5439cf483a0239b4f32f7f2e223eaab62cc664fed7dce0cbacca06500040ad304c133cd25e59ff25507e2d250f157a599d9a2c63490e1847d97d4b1d058960c5dc7f1a3286880465dd6ebb3f6592f818468c647b5518bc959bcf27894a379366872501a96b0ac0566210773ab066f651e8b16e7df64904b2577969f92086029285761fa2025bda414c83415835ba2184ed0795da69aa2f0d2cc1ad2184520b0bd1e67638ae6422978ca99cd5818824c6c31d1af09be5416fc2e23c1ddeaf0ba18832e9a8626b150413b5db2bb1d0c7f2f1829562e370bdd3a65d7357d1e7733eec94d2b373c3acc0a764265c00c5a07b4228c9c130e767c13e46792c33f1fa3aa69b0a97f51b4dd8116b6006f1b84819fd913ac1942008be176b58634e15bbef388b9d0b3b87b4a31826cbbffe6c9f3655f3079f6674d4f8802cc7baef2290785b467b89ebef5f0a18a81dfda8c1befeb4982b900df6acbd815ae9153a4f91166bfbb8ad9694ea58e35ef416c482a52a0c6960d0b79bf95f00166d805d8e11145b9a4dec86c082b21118237aaa74820608609151236547e361bddcb73852e889b08496d5740da0b7b94578a0ebf9b85a4d69fe5ae87142a0f5f5f3f562fc20c95dfaa392a2ce7068dab92c15d0e214733e84cd67f9b3c51223b31de9ff451871f41848fbca4cf7e833f63b8ee35477ab11e81c9a9db32871b4418ccd284ad7eaa5e2ebc36d874a106035cdabdcc3e4ba4aa18a1b198c948ddb740656f23f99456e7e42d89b02bd2e94035dd069cc7298511b6aedf835b1ca86650dde233e339e5cfb310f625ccf16fec777afc030b8c2ae2e4f6aa5704555df2bad35425b7c4a8fad911177e39f507b4536ba6050ee3a4b37ad71f2343d2274aef374989fc81bad011e41e97ed9d540148d186c4ad650b57b7b01e44ad50f695d260f837ced05285a0e15fab84a836a2cca568e92ec7591c0fa8a88ceea948fc722873364ad5d7cd45fa51babff26cb65ab85cae31257d538d884e53e2b7100795778cff2da76b89d049b782efb9a2445a18fc3df25beba96b38e7232628dcdd7db5af10ea0466dd2595ee2efba8f246633cee4c083828c036db44e3cfa84735cc1d26c9579f735fff9e9535c9f9ef16c95a756ff3ee500380edba9e3c5dc931c1a13f2bfc802eeea59d13ed4513e20bf3fdbb76210624e2ad6976689f938c6d8bf303dd0f32655c12b2cd2737493d6993c975ec95415456fb4fde069a6a3cd07313cdb2c208f091f2966dede550ac80055c7372e6fb63dd8bf80eee71c31b9c3a935f421deccfbc526ae6e5b3b0456943c96486e93ce88c459e4add17712f374bc95a5d51e239127c23693b8ac4ff5722d5c38008913676e69ee8f30865f2f7b9ad7008f9ff7ca8bf7ba8a11971df767030f6159ed75ddfeb185b0fdfa3c5f50e277b0eee05c38d85e76fc8b63e8752a59a00e73381a4695702c55701f5e1336d2b6082ad789500bbab216125b3d7abc9d794eadc8d6d1982dcca1a1e2333e20e1928099dc8f078189d993d1f688bc9ca1714ec710700688af0f3e822c5161597aab264a9a673ac29d248eb05fe87c32d68148cd83c248bfe53d852ac6e9ddfe49490b1b20b182738cd3301251a3b200e99b49d80315fa0d2ce3bde4d8e00290651ae8ce10fec05d1086f3b519348eb80cc9104ecb2d6bce8dfcfa633598eb5c1334b9b1bffd650a9102e882ea0466a2235896d320a5a51a27ce95bc6db560519d829e2171be4be8dd5bee09c85ff22f77cb8f00b92c40ca6214a165eac50b99a6fd58d03f7253c5733be8bbc21f9ab3a303fdbf4016c8a8ba88dab861ac07140c112593eb0c0d5d232ec48c6f2613dbafcf2b349e666bb1865009bab1b1d9043f70becd89887cc67e481673de823e4649823d898ff37b0f1f73172fadf37e82679a0a0d1ffa30873d8a6f9ce49075340b599150011662a7c2744d5a23588d831f74c32d9948d9d49a6787f8206cd2baca143c5566dc079aecc98cebd63dd92ebf65c1a7a3e1516862065098e1e677ba2f4c154dc0e892eea38502a13854ed61695dba2009622c1701adbf287909cbc541711f74a13d294662f24864f177e8ebefa09a868722e030759338b4841079958b133eb5eeedcc4d3dad2af545585869664c2cad679000ed9edcc8b73b41b91c81a68934a5b31fda13cdfcaac424a9c2b36d43bc76d6ca43c2edca9aa5f4e3eb34db90d01c6bac8d53bc7c775b2b49a363ce0795184b3edb8b212bf38d8c382517a83ad5ef55b512a0c82b3741162e0b988767871500f3c7b9ed2245a79eb6a542b8b00440f80de0c79b51545fdade8d0bc830f1a1c029c1ad3f8327568188fa0f48fb2a12eb0ec82717c8cd954f60ec97bc54f2c24601e710e050b84ba8e546cff84d0a6929d977f690471e2b8c1b723f370b79f2a07e2b2cec69ce30ed1fc0fdc3753b2439259c6940dda45b5cafca43b2c6c698aa40bc68910be95e959008d534d7a348ab8c3d993adeac722105e8b007bdd2e8e1215bad320092c411bbace2875c69c655375ec74e4f135b589d18a6f81394014f7bcc535e7616c9157130aeaf5e8069259c957e9689abfde78db46db399e3d15f96639f5a637ea17eeaf0018fa2091868e902350696bc91b1fef62d9bbadbcf5c3bfc114493ce91589649bf6ca6cd807ab926101d81ab28cce2e784ec717d2831ff4a65592f7e981ee94df2b4ddf78ca5e1f5729bd19aa89a223aa64b4372371f3fb994e02f96ab9c4b870e1cf7deef2c60186c8e6901777c95300f1b7d9af596b91eeb50fa143554e636888b6bc749ffd2f999a55c7e34b706891039f8dc8de5f2ddccfa719b023939ee57fb84ae9e6e2743e7f5f7ef931807d2c1ba65ac227303072e2b5e688125e62827e1417cc1c3a6f718dc7a3034d7b9ec686e65b35b514eee339c65a0a695b3a7646542028a0ad106ecf7c84544a5547c2a320f5d6db3153b9409a8c260317cbb3f59950bbeae427dd3af9e42de2cfeac8e782aebebdd981d2d554de0637a5926276e37fcd09f160458edee1f65317b79e3449c9a913751a512b66a8861cce6890bbdad94e7c3c8cbf2f47d7c1d166a68ccecf3af99224cacbab07644e12f6e5fe720a3a1528d87f888cb500f198a5a8b1cc3f3f22c80c8750f33e08fe6c606d8791bb6f6b5c6ce5f19a598ba4156d153d2aaf2434083aef94fb1302c33e66266a6deeedf19ff241e8e000f3852917f3fec15e0db87f634c6c85c88976e50ff56b7e7bf7c532eda35022532d58dd9838e94546602283a74a1262a24de88427f4a59c687a054a43f33d220f7d17973f27f55f4dea81063d006f34870733373c09be88a5717a35413d14a14ef4fb40b4cb159c8ab0c3ad6fda78140f39fd2a15fbabb0bf91d683ecd4e524c97357d04a9d22676a387e9e1c1e3201711411e2243292f6710208efed46299c721982bebab7145d1cb12c777eedf39bd1550731c214675aabf53c6ab7c99fd8fbdc72a3139eb6cabe9b6083c628f01a300442ef0c9750252567709f68900a66384c8f16c8820dea27a684f2182c66572fa4d784b18cbe5641bd384d63bbb6635c2d400f9b39bdf631a16600d838dc37ebe6917b27410a83f9d00d803cc8236a69478b054cddcdfd1e9ea19aaf0c2ad8f983eefb98b7bf255d1ab011a9b83d84ece1eeb6a01c0526e7a813e368cfb223799c8af5892ff70b0f3937a5763133a92d4</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这些是草稿或不便于观看的内容，需要密码。</summary>
    
    
    
    <category term="工具软件使用" scheme="http://example.com/categories/%E5%B7%A5%E5%85%B7%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    
    
    <category term="草稿" scheme="http://example.com/tags/%E8%8D%89%E7%A8%BF/"/>
    
  </entry>
  
  <entry>
    <title>最小生成树算法Prim与Kruskal的证明</title>
    <link href="http://example.com/blog/31.html"/>
    <id>http://example.com/blog/31.html</id>
    <published>2023-11-21T15:45:00.032Z</published>
    <updated>2023-11-22T23:33:42.021Z</updated>
    
    <content type="html"><![CDATA[<h1id="最小生成树算法prim与kruskal的证明">最小生成树算法Prim与Kruskal的证明</h1><h5id="首先有推论1如果一个图中uv是权值最小的边那么所有的最小生成树必定包括这条边">首先，有推论1：如果一个图中&lt;u,v&gt;是权值最小的边，那么所有的最小生成树必定包括这条边</h5><p><strong>该推论证明：</strong></p><figure><img src="assets/最小生成树算法Prim与Kruskal的证明.assets/png1.png"alt="png1" /><figcaption aria-hidden="true">png1</figcaption></figure><p>如图所示，(V1,V3)是图1中权值最小的边，除去顶点V3，及其相关边，得图2。<img src="assets/最小生成树算法Prim与Kruskal的证明.assets/png2.png"alt="png2" /></p><p>易证图1的最小生成树，一定是图2的最小生成树连上V3所得。任意给定一个图2的最小生成树，如何要得到图1的最小生成树呢？</p><p><img src="assets/最小生成树算法Prim与Kruskal的证明.assets/png3.png"alt="png3" />(Vi,V3)选一个权值最小的连上就行，而(V1,V3)是图1中权值最小的边，一定也是(Vi,V3)中权值最小的边。故图1的最小生成树一定包含权值最小的边(V1,V3)，证明完毕</p><h5 id="prim证明">Prim证明</h5><p>从推论1的证明中，其实可以看出来一个推论2：对于顶点V3，最小生成树中一定包含以顶点V3为端点的边中权值最小的那条边。</p><p>step1：如果从V1出发，可以确定最小生成树中一定包括(V1,V3) <imgsrc="assets/最小生成树算法Prim与Kruskal的证明.assets/png4.png"alt="png4" /></p><p>step2：然后，把V1和V3捏合成一个顶点V看待，这对寻找最小生成树是没有影响的</p><figure><img src="assets/最小生成树算法Prim与Kruskal的证明.assets/png5.png"alt="png5" /><figcaption aria-hidden="true">png5</figcaption></figure><p>step3：所以，问题又回到了从V出发，构造最小生成树，也就是转Step1,直到最后只剩一个顶点，最小生成树构造完毕。</p><h5 id="kruskal证明">Kruskal证明</h5><p>Prim是以点为核心，从点出发，层层简化，那么Kruskal就是以边为核心，层层简化。Step1：由推论1，图1的最小生成树一定包含权值最小的边（V1，V3）</p><p><img src="assets/最小生成树算法Prim与Kruskal的证明.assets/png4.png"alt="png4" /> Step2：捏合顶点V1，V3，</p><p><img src="assets/最小生成树算法Prim与Kruskal的证明.assets/png5.png"alt="png5" />Step3：问题又回到了Step1的情况，继续寻找最小权值边，捏合顶点直到只剩一个顶点为止。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1
id=&quot;最小生成树算法prim与kruskal的证明&quot;&gt;最小生成树算法Prim与Kruskal的证明&lt;/h1&gt;
&lt;h5
id=&quot;首先有推论1如果一个图中uv是权值最小的边那么所有的最小生成树必定包括这条边&quot;&gt;首先，有推论1：如果一个图中&amp;lt;u,v&amp;gt;是权值最</summary>
      
    
    
    
    <category term="计算机基础" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>数据结构</title>
    <link href="http://example.com/blog/32.html"/>
    <id>http://example.com/blog/32.html</id>
    <published>2023-11-21T15:45:00.031Z</published>
    <updated>2023-11-22T23:33:27.688Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="e07df32c83dc45c8d6c541b37138a991814e03ef858b3072a0d4110a780f8b2a">161e93c4419f838fba4978c15eeea98b25f81897d05af6d23a1cd422e4f4e964da0c706e7ea234503341ec97f59b272e0a3f06f17e7c3657944e3ee9667c10f6f350c05fc87f59c890e91d4c49b0701d57e52289ca58d68ccf7622fe1f7ec980911e93912be9842b6e1ff5b46e2fcebcb9a2ca5391ccff1f2734584d58c63ef81ed7e632457d540407eb77a95076f70cda728a747b20627b329665a943686c3621334f28d2992401dcc3f3678968bcac30d5704d1d76a846ca744c4734f9465edc392eadad141662528867cdebae651769cd68c605c4f1b86749ab62ebbfd600689f2f661a2a3cfeb615d9a11af35978beb2b70af194b8c3549c392cb4188168532350f60cd35a8b5230fa236347b284aea7f642d392188ee83ac9a0c719a7626c879e2e50b7136986dc17f9bcd4bd149f70bf5f00862a12e3a81c3b256c729152ce867c5292d479d090e1177dd2e48efefce066191b4de4a250d29d857f1a54f79ae126c726a0347f39164f111c33b08823dcacb0e28e4662e7bb44d1ef0d82c6fd29797181187f996a05a9240d61820a61166c824360858df6d07f448af5e1a3f952175990c1a1a179624413f0f60a36369cde8315258ecd1416547c9f0b03f6029b1945d7bb138d3c31c3d87f368e3e29698562c0c7ecc1a3b3b1b736d9ae4bcbc23d0cd6a25d30a92fd776db7b8975842d5351176767b632fd8ddc6aace5eaa33b9be83a631c2d2c3a9c303c9ef838cf5d26fc697dd406fcfb4bddb98418ded1705a9ba9ae7090b581f3a5911afed56c06e8ca0947d5667ceec1f7bdb4c7ecd204be2324c78038d9dc751fd90cd9620d3ad61d9e58b6138f021c0fe2aa87c566a563cfbece0ecc88c5ccc0328bdee3b328187ef0c9571446ca1b04230348b3d2aa336f1db6360c38f86cbfc02962034c6ea7d43a13a317e0d120058d982c3a9bdd621cdcb5be739ee004aaa89f6709c1f39dd7f26f8fe87c6966dc37c950f0cad7fed79c6ef27498c1349597edb4aa38568b373c21039c1a921817de32a6ff112521f62e492c5bfc325762ed25b6dec58cb6e25bd550b0fedceb31958ee33b89f6268af246cb3140b99fbda9ac2eafb04e9004795bb60e95381d74f47554381f9a3673645f566d0eb03bab9e5a954623aa193c8a8f016fe276770c43eb0759fe20eb42d4bc0a40db3864c13191ca65f04474bcbc4271647c047f9a1f56eca26063f7d1c3341569f88a50b2be43d117be4ee3925e8e8362a12be796d3579c5d78637b32278fe50c8744f0f4f0f3568dc6fbaeb3318981ad09ab6100f81f59fd6edc7f0a0002fa28b53ee520c359cc7fb868c2879ecaabb34fdb5be89310301beee0a160390f82a264af3ef072019877bb82d287487233c6611196c81a3c568ea723c3ddd20f1c869c5d7039e3e3fdd1b2f24e90c6b9d08e99b97d86ca84cf73b60696b6945b391f0d3da4f4e6fa4c0e2d0a8dd458204dcb8c2be6361e6f33c45c5db28e61fe18ccaa77b8d7ad76f5d5b6439e70a79de3b1e34b42ddedb899a62a8f7f3ba475fa3b590cfaa89a1a0b8033bb15be105321a03fe097f86bab8806ca36daa411564d1ada02ba09cc310f39e75f86de73a30fbb03ea3f24df6034eb3aed16be9beb8f84770da466de422abed2556490fb250ca6b285ee6870f7d849a1dfea66a2214b83a0b8c07bab6ecbca1e7238590366e42be3ee4011c1b96a1f59ea0309c90601c11b2fa4a1374f77e2574fe355b12b49308d407755d1b43d638ef1b84c78c04ea49b7ccc1a11a1db99e2c8b0730836a0483c4af72d68cb2ea754846d319c5bb19990fee35e674ff2e7facc6a4dad01a3810dd32b2956af27f94b3fc0f47f3e6f8fb6f46201fe96096217a698b05b25200b54fe9944384b6b0779eb5798e6b673e3455bc29126e7c473c4532d29edf9d9815b39ed711a6569b9eaf77387ffa66f5fa296caa7293c547ada870fbda136b60393c32c7877ca0f59530807a638d066b0ba8431ac4b8dbf6e1d676f6e1b6dedd9a8edb2158c6ad4bf2abdcb32439a6a41716d17a6b448797fb781c959f3418b514e678e67b7729e2bd3e9aa91506a04a41e519fc15b6bef8d3a38999d0e67f516cd2b9bbc49c966de58fc1cf054296f8993cfea7420144fb863baefeabee7edcb111357ba758eb23f31bbecbf48f9c1186a6d23c61272d0472bf04d609b9b81bf83714a32a53ea917eafa76f572f5553bed67d28efe521846139101761568859a6acba0042d60fcb9393a33026aba99a6318de8398a9479a99858f4cb45ac10c1dd95860c1f1ad486f928a9388033622ee6be0aa09c3d62689dcc2bb64c9461155a1c6bf13994753bd1ade8040d75afb0f9dc59bbf0f9cd880376f6af39a77fd8c9d269606c5e03963847a21a81c69b474351fe042931e8e25b6bae03398e430341b3be72b603767b68d9f2b509e551ead7ad47cb80683c73e3827702c815b6b1e2037871581dfea72070934f0cd0975f4edb08e3f20b41079cdafe8c46672b04169db6a46cc46dfb0fc1eb7b7fc265a5045e401e5b9f8fb864459d32c9d87e64e8ac1b18e3c0ff609b9199e634e388912a99d843042c74da6415e95cbef9f06ee20d2263eb4703cf7f17294bc33b17d9d34628635b193483dfbbce3abec64a33d8e541a821174f8382db6f2f8210dbd62d4d3ba86af2093bf4e718ce26274d4753f1924723e6ea7b76e6fa4def2a49dd954b4fcad2cdaf5e71c309700966ce6cc2d250e9beec7103482b8d7f20bf3d210fb21a302b8a682b20d3e4aa3ffc0de89efe2e076645ab8c78f75e270fdb6d644aaf93bdf86aa2132738a3a8d95e0051a6dc7417591d9e84eb83a56d880497131e052f4c0dca479a7ead59ac2dd6ad11fa4c399b32982657615e60954d334cd4d39aa5a91ff67e4a6f41ebb80ec65596e59a9a773fbe943487bdbdb2c8b11929123dde87f3cc0045b4a4606c5468ef289b55fbf2a056b1696e90f566c26476dd1aa05df399c730000af703d16363848d66385b5ba6f8d8218d453ad473b8c72d6e3e370e55ebcd4a087d0a791959918f7becf39689623b782047d3c621d33426391ac0b9cff994a2c2d10f4dfabe90a3aa9cc8a3bdf3f79c981de118e4e78886d22692d22dae5845463f37e31216d2c700bf1116a896f3d254f718bc6b568039b7d868c7750a786e694ad88952fa1a232e7f792e0e2b9970a785e6768b7776d631a904a90ab744653363fb02d578b05413510d24799c5121bc95a8232a3d4b8823754023c98af2ed43212581244867b9ef02f05452379f1df6140df6fa334004e53bb76754687f166c97cb27d5bc7478ddfd206beb0fa46c90d24aec0fe8eb6333811e8cf2ce3bb2d2d6a134f541812716fadac00dd82efb6dac8e63cd4afe5d607e5a6666583da8cd5d4a265c0a6c7b9d7516a40b41327621953acfebc62a01dd85d81fee9755708d8d3a2f99615627646f9125aeb7711eb1c5c4cb1b0c906c4b9674bd6e58e96e7ffb2f5b2ad6bc815faf6ab43fb0a559c610ef7284af158d87ada56de1f76031f76d381fdff0e0f10a3b4985995fc14a91cbc6beb34c183059be0fac5b88fbf67e8e3861b0bce114db875f4af493d035daf92bacf5e0b6d34328c0b3f993c1fd6bcf6a9abffd3ad0bca8ba6ab1e67a5c16545128e9b85392469d85a7c4675e970c8f701f174ec7f7ef168baeda418968f32849e8de7107611b2258c43948c4ce8d644c5c1bd206f1b0cb06548fd6db5c00a717595394e2b3492ed67562d829af4178d7ab3ec4c0f9892d83fc5fecb84502c322b93e598235d0194bcd7eadaf48d83eaef297904f3b6467e00172727d5607ba9435c33782618d9367cff03579a2e35544b98401086c2a6ee9d793587610b7b97dd143fba0485eaf4ff66c0de0f2209110387ea52d0689d91bd11ea9a73753a3dfaa02331976a538f8a6f0c6591c5a9cc8ce87c12c9f3464a3087ded68080d2778a29eb0ece2b542e021b97beb33f552a43b6b2c472255cb5b5a914900404da39b1c05ec5afdb52429ae6673772d597aa54092d9afe1f7ea558f9726410b72e47c5a3529be8fdfaca47b16970c5b3b0ac245c87c3eab89c599518be9fc744f2b1bdbf760f9e20f77b85a0af008d25e1ee0082e766cdcdce4541ee8ab38fb7c403059872c665064257d1b56256eaef4fb7ded1e23ca85789cbce136f52d6eb0eab202f9f741c3d12f32a9b4004a546ef7b996d73c7675d7e573a8c9befb9cb8f19c81fc2f2f7fa0dc31a4e4ef20aa8296cf9d94607a131fd240a672d4d647d03d3bb7c5376f948b528c93c3e73368e0ffa4027d2a8ca5ea67882ac507e90c6a508df7b30548590e19bd0c33292ffeb829f869f85b3b8c2500b4744945caf7cd615d74ce9c1df078661cc76297b52df05553bcc590df7143b863f4de7e95068a6fe9b34c04d3b19ba208db33ce298243e69d729bd0e491ec4504f6421b8f6efb3ce270ff47b8fb72771b2ccef22d46db356ee678343e0eda8af078069cfc7ce74b6dc58fddc9c9b8ae40a0aa1321942fac4ab874dcb9cf2aa4708eef04f16ba3eb1b5e616ac031cc403ab02c1cbbe5d5093ea68bb8707f1673a8456e74cca6e30b88ee6b3aae13e3958923140874ec9d1172405eab06740715a954b14873feebda268b924af191ef872c951e2d6529324dee8c1999208ee806d70f19f3827546f1ce5e405242beb439b0e4a45c2514189ee8d077585c567157cbfa116b45d255a1097c47064fd651bbfad907fe88f9be34c67faeaf8e505a128fcd168a95b909e9ea015103afa70e3970ace1d1a7b83923921fdcfbd7119abed204ee4e2685c7347d948b7a91d727f8158cf1b1026635b08f2297daa6fb9db64e3fa692395c236ca296bedf2893d851b0a8d1af1c183425e3914bfc87aab274dd607a6f73eddb2d0afb3c9460c6b9dfd72a65e5e30d97e4f635a5292ee28babb1db745c3c18b08bc2cf21b001e0c67826984d66cd81483c564f1fb81f448d3685bf80f8f4afb37210cf479c9137d9e018bdc8035dc5c8c5d63c1ae15bcd139e7f2c7459e283519da3ca2e338087f4267ce4d7e1d262125455ded2e645cacdc7b05ab07910c09826543113c5b66f65660636bf7e8a913911a7a4fe0ebaa3513c6cd34f48f05d6b66b704c7ef29b76fc9c99dd5dcdbff03021ff247cf4c963d608e1c48fafa414bcf23746dbf1ca673f07e06ef9ca1413551a4fd98d4bba39768c1a0a4cd8655be27498c53ffe6b534607c4003c28af85cd20296ddc44f02c1d5ca4c5b7fb734ae0100d5163e3d1e8fd309a055b057595c0b8d4d9c7bcd7b31ad597d237f6720d4913507e209879d079ffa3761bf46989c39e399edfefc4049ef2d9a2ca83411c7d5a4e330f5db98a4e5ad31cddf3582f7ca06f4717f36f86bf7960a9e3d31f46cd1517bc611eacbba0bc87361c03fc722818696ec0325c966256890f8116367f4f895b7ca8b0cb7bdea99edf19e6ce583fcd40a6a5bb7fd828737a3a9b603f9a1cf32f89124b416d8037b29ab7cfc78cfcf12cf043b69826335dde0dd429afa72b99b2d56e230aed0ad6ba9d637b61726f36818846526d5d9aba2370fd89a</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这些是草稿或不便于观看的内容，需要密码。</summary>
    
    
    
    <category term="计算机基础" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="草稿" scheme="http://example.com/tags/%E8%8D%89%E7%A8%BF/"/>
    
  </entry>
  
  <entry>
    <title>图解设计模式笔记：装饰器模式</title>
    <link href="http://example.com/blog/41.html"/>
    <id>http://example.com/blog/41.html</id>
    <published>2023-11-21T15:45:00.031Z</published>
    <updated>2023-11-22T23:32:39.869Z</updated>
    
    <content type="html"><![CDATA[<h1 id="装饰器模式decorator">装饰器模式（Decorator）</h1><h5 id="目的">目的</h5><p>​在不改变原有对象的基础上，将功能附加到对象上，从而透明且动态的扩展类的功能。##### 举例 ​假设你已经做好了一块蛋糕，现在需要将蛋糕打包为生日蛋糕送给客户，你需要：将其装饰为生日蛋糕、打包放入包装盒。##### 类图 <imgsrc="https://img-blog.csdnimg.cn/d3095e9ab32a49e3b46d16b0371cf900.png"alt="在这里插入图片描述" /></p><h5 id="代码">代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//省略了部分构造方法，注解等东西</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">CakeGoods</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">makeCake</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Decorator</span> <span class="keyword">extends</span> <span class="title class_">CakeGoods</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> CakeGoods cakeGoods;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Decorator</span><span class="params">(CakeGoods cakeGoods)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cakeGoods = cakeGoods;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cake</span> <span class="keyword">extends</span> <span class="title class_">CakeGoods</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeCake</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println (<span class="string">&quot;制作蛋糕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BirthDecorator</span> <span class="keyword">extends</span> <span class="title class_">Decorator</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BirthDecorator</span><span class="params">(CakeGoods cakeGoods)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span> (cakeGoods);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeCake</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.cakeGoods.makeCake ();</span><br><span class="line">        System.out.println (<span class="string">&quot;加上相应装饰，装饰为生日蛋糕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BoxDecorator</span> <span class="keyword">extends</span> <span class="title class_">Decorator</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BoxDecorator</span><span class="params">(CakeGoods cakeGoods)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span> (cakeGoods);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeCake</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.cakeGoods.makeCake ();</span><br><span class="line">        System.out.println (<span class="string">&quot;放入包装盒，打包。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        CakeGoods cakeGoods=<span class="keyword">new</span> <span class="title class_">Cake</span>();</span><br><span class="line">        BirthDecorator birth_Cake=<span class="keyword">new</span> <span class="title class_">BirthDecorator</span> (cakeGoods);</span><br><span class="line">        BoxDecorator box_birth_Cake=<span class="keyword">new</span> <span class="title class_">BoxDecorator</span> (birth_Cake);</span><br><span class="line">        cakeGoods.makeCake ();</span><br><span class="line">        System.out.println ();</span><br><span class="line"></span><br><span class="line">        birth_Cake.makeCake ();</span><br><span class="line">        System.out.println ();</span><br><span class="line"></span><br><span class="line">        box_birth_Cake.makeCake ();</span><br><span class="line">        System.out.println ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="运行结果">运行结果</h5><p><imgsrc="https://img-blog.csdnimg.cn/dfa9c8c03f2040ca9a6b6c7f0e50ebe9.png"alt="在这里插入图片描述" /> ##### 实际应用</p><p>比如除了java.io，javax.swing.border，javax.swing.border都使用了装饰器模式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">举例 java.io:</span><br><span class="line">首先,我们可以像下面这样生成一个读取文件的实例。</span><br><span class="line">Reader reader = new FileReader ( &quot;datafile.txt &quot;);</span><br><span class="line">然后,我们也可以像下面这样在读取文件时将文件内容放入缓冲区。</span><br><span class="line">Reader reader - new BufferedReader(</span><br><span class="line">new FileReader ( &quot; datafile.txt&quot;);</span><br><span class="line">);</span><br><span class="line">这样，在生成BufferedReader类的实例时，会指定将文件读取到FileReader类的实例中。</span><br></pre></td></tr></table></figure><h5 id="优缺点">优缺点</h5><p>优点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">接口的透明性</span><br><span class="line">在不改变原有对象情况下动态扩展功能</span><br><span class="line">不同装饰器可以随意排列组合</span><br></pre></td></tr></table></figure><p>缺点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">增加了许多类，增加了程序复杂性</span><br><span class="line">动态装饰时多层装饰时会更复杂</span><br></pre></td></tr></table></figure><h5 id="参考文档">参考文档：</h5><p>转载自：<ahref="https://juejin.cn/post/7166531323320860680">装饰器模式</a>图解设计模式</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;装饰器模式decorator&quot;&gt;装饰器模式（Decorator）&lt;/h1&gt;
&lt;h5 id=&quot;目的&quot;&gt;目的&lt;/h5&gt;
&lt;p&gt;​
在不改变原有对象的基础上，将功能附加到对象上，从而透明且动态的扩展类的功能。
##### 举例 ​
假设你已经做好了一块蛋糕，现</summary>
      
    
    
    
    <category term="计算机基础" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="设计模式_Java版" scheme="http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-Java%E7%89%88/"/>
    
    
  </entry>
  
</feed>
